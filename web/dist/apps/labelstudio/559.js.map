{"version":3,"file":"559.js","mappings":"mBASO,MAAMA,EA0DXC,WAAAA,CAAYC,GAAa,KAzDjBC,YAAM,EA0DZC,KAAKD,OAASD,CAChB,CAEA,aAAMG,CAAQC,GAA2B,IAAAC,EACvC,MAAMC,QAAeJ,KAAKK,YACxBL,KAAKD,OACL,CACEG,OACAI,KAAM,YAER,GAGF,OAAa,MAANF,GAAY,OAAND,EAANC,EAAQF,OAAY,OAARC,EAAZA,EAAcC,aAAM,EAApBD,EAAsBD,IAC/B,CAEA,gBAAMK,CAAWL,SACTF,KAAKK,YAAYL,KAAKD,OAAQ,CAClCG,OACAI,KAAM,cAEV,CAEA,WAAME,CAAMN,SACJF,KAAKK,YAAYL,KAAKD,OAAQ,CAClCG,OACAI,KAAM,SAEV,CAEA,gBAAMG,GAAa,IAAAC,EACjB,MAAMC,QAAiBX,KAAKK,YAC1BL,KAAKD,OACL,CACEO,KAAM,eAER,GAGF,OAAe,MAARK,GAAc,OAAND,EAARC,EAAUT,WAAI,EAAdQ,EAAgBN,MACzB,CAEAQ,OAAAA,GACEZ,KAAKD,OAAOc,WACd,CAEQR,WAAAA,CAAYN,EAAgBG,EAA2BY,GAAe,GAC5E,OAAO,IAAIC,SAAmCC,IAC5C,MAAMC,EAAUC,KAAKC,SAASC,WAE9B,GAAIN,EAAc,CAChB,MAAMO,EAAYC,IACZL,IAAYK,EAAEpB,KAAKe,UACrBlB,EAAOwB,oBAAoB,UAAWF,GACtCL,EAAQM,GACV,EAGFvB,EAAOyB,iBAAiB,UAAWH,EACrC,CAEAtB,EAAO0B,YAAWC,OAAAC,OAAC,CAAC,EAAIzB,EAAM,CAAAe,aAEzBH,GAAcE,OAAQY,EAAU,GAEzC,ECnIK,SAASC,GAAc,MAC5BC,EAAK,aACLC,IAKA,MAAMC,EAA2B,GAGjC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAcE,IAChCD,EAASC,GAAK,IAAIC,aAAaJ,EAAMK,OAASJ,GAIhD,IAAK,IAAIK,EAAS,EAAGA,EAASN,EAAMK,OAAQC,IAAU,CAIpD,MAAMC,EAAUD,EAASL,EAOnBO,EAAepB,KAAKqB,MAAMH,EAASL,GAEzCC,EAASK,GAASC,GAAgBR,EAAMM,EAC1C,CAEA,OAAOJ,CACT,CDzBapC,EAGJ4C,UAAY,CACjBC,OAAAA,EAAUxC,QAASyC,EAAiBnC,WAAYoC,IAC9C,MAAMC,EAA+B,CAAC,EA8BtCC,KAAKrB,iBAAiB,WAAYF,IAChC,IAAKA,EAAEpB,KAAM,OAEb,MAAM,KAAEA,EAAI,KAAEI,EAAI,QAAEW,GAAYK,EAAEpB,KAElC,OAAQI,GACN,IAAK,UA9BOL,EAACC,EAAWe,KAQ1ByB,EAAgBxC,EAAM0C,GAPLxC,IACfyC,KAAKpB,YAAY,CACfrB,SACAa,WACA,GAGmC,EAuBnChB,CAAQC,EAAMe,GACd,MACF,IAAK,aAtBWf,KACA,MAAlByC,GAAAA,EAAqBzC,EAAM0C,GAAUxC,IACnCsB,OAAOC,OAAOiB,EAASxC,EAAO,GAC9B,EAoBEG,CAAWL,GACX,MACF,IAAK,QAxCUoB,KACjBI,OAAOC,OAAOiB,EAAStB,EAAEpB,KAAKA,KAAK,EAwC/B4C,CAAUxB,GACV,MACF,IAAK,aAtBWL,KAClB4B,KAAKpB,YAAY,CACfrB,OAAQwC,EACR3B,WACA,EAmBER,CAAWQ,GAEf,GAEJ,GC5BJrB,EAAc4C,UAAUC,QAAQ,CAC9BxC,QAASA,CAACC,EAAM6C,EAAUC,KACxBA,EAAQ,CACN9C,KAAM2B,EAAc3B,IACpB,EAGJK,WAAYA,CAACL,EAAM6C,EAAUC,KAC3BA,EAAQ,CACN9C,KAAM2B,EAAc3B,IACpB,G","sources":["webpack://labelstudio/../../libs/editor/src/lib/AudioUltra/Common/Worker/index.ts","webpack://labelstudio/../../libs/editor/src/lib/AudioUltra/Media/SplitChannelWorker.ts"],"sourcesContent":["type MessengerResponder = (result: Record<string, any>) => void;\n\ntype MessengerCallback = (data: any, storage: Record<string, any>, respond: MessengerResponder) => void;\n\ntype MessengerInput = {\n  compute: MessengerCallback;\n  precompute?: MessengerCallback;\n};\n\nexport class ComputeWorker {\n  private worker: Worker;\n\n  static Messenger = {\n    receive({ compute: computeCallback, precompute: precomputeCallback }: MessengerInput) {\n      const storage: Record<string, any> = {};\n\n      const storeData = (e: MessageEvent) => {\n        Object.assign(storage, e.data.data);\n      };\n\n      const compute = (data: any, eventId: string) => {\n        const respond = (result: Record<string, any>) => {\n          self.postMessage({\n            result,\n            eventId,\n          });\n        };\n\n        computeCallback(data, storage, respond);\n      };\n\n      const precompute = (data: any) => {\n        precomputeCallback?.(data, storage, (result) => {\n          Object.assign(storage, result);\n        });\n      };\n\n      const getStorage = (eventId: string) => {\n        self.postMessage({\n          result: storage,\n          eventId,\n        });\n      };\n\n      self.addEventListener(\"message\", (e) => {\n        if (!e.data) return;\n\n        const { data, type, eventId } = e.data;\n\n        switch (type) {\n          case \"compute\":\n            compute(data, eventId);\n            break;\n          case \"precompute\":\n            precompute(data);\n            break;\n          case \"store\":\n            storeData(e);\n            break;\n          case \"getStorage\":\n            getStorage(eventId);\n            break;\n        }\n      });\n    },\n  };\n\n  constructor(url: Worker) {\n    this.worker = url;\n  }\n\n  async compute(data: Record<string, any>) {\n    const result = await this.sendMessage(\n      this.worker,\n      {\n        data,\n        type: \"compute\",\n      },\n      true,\n    );\n\n    return result?.data?.result?.data;\n  }\n\n  async precompute(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: \"precompute\",\n    });\n  }\n\n  async store(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: \"store\",\n    });\n  }\n\n  async getStorage() {\n    const response = await this.sendMessage(\n      this.worker,\n      {\n        type: \"getStorage\",\n      },\n      true,\n    );\n\n    return response?.data?.result;\n  }\n\n  destroy() {\n    this.worker.terminate();\n  }\n\n  private sendMessage(worker: Worker, data: Record<string, any>, waitResponse = false) {\n    return new Promise<MessageEvent | undefined>((resolve) => {\n      const eventId = Math.random().toString();\n\n      if (waitResponse) {\n        const resolver = (e: MessageEvent) => {\n          if (eventId === e.data.eventId) {\n            worker.removeEventListener(\"message\", resolver);\n            resolve(e);\n          }\n        };\n\n        worker.addEventListener(\"message\", resolver);\n      }\n\n      worker.postMessage({ ...data, eventId });\n\n      if (!waitResponse) resolve(undefined);\n    });\n  }\n}\n","import { ComputeWorker } from \"../Common/Worker\";\n\nexport function splitChannels({\n  value,\n  channelCount,\n}: {\n  value: Float32Array;\n  channelCount: number;\n}): Float32Array[] {\n  const channels: Float32Array[] = [];\n\n  // Create new Float32Array for each channel\n  for (let c = 0; c < channelCount; c++) {\n    channels[c] = new Float32Array(value.length / channelCount);\n  }\n\n  // Split the channels into separate Float32Array samples\n  for (let sample = 0; sample < value.length; sample++) {\n    // interleaved channels\n    // ie. 2 channels\n    // [channel1, channel2, channel1, channel2, ...]\n    const channel = sample % channelCount;\n    // index of the channel sample\n    // ie. 2 channels\n    // sample = 8, channel = 0, channelIndex = 4\n    // sample = 9, channel = 1, channelIndex = 4\n    // sample = 10, channel = 0, channelIndex = 5\n    // sample = 11, channel = 1, channelIndex = 5\n    const channelIndex = Math.floor(sample / channelCount);\n\n    channels[channel][channelIndex] = value[sample];\n  }\n\n  return channels;\n}\n\nComputeWorker.Messenger.receive({\n  compute: (data, _storage, respond) => {\n    respond({\n      data: splitChannels(data),\n    });\n  },\n\n  precompute: (data, _storage, respond) => {\n    respond({\n      data: splitChannels(data),\n    });\n  },\n});\n"],"names":["ComputeWorker","constructor","url","worker","this","compute","data","_result$data","result","sendMessage","type","precompute","store","getStorage","_response$data","response","destroy","terminate","waitResponse","Promise","resolve","eventId","Math","random","toString","resolver","e","removeEventListener","addEventListener","postMessage","Object","assign","undefined","splitChannels","value","channelCount","channels","c","Float32Array","length","sample","channel","channelIndex","floor","Messenger","receive","computeCallback","precomputeCallback","storage","self","storeData","_storage","respond"],"sourceRoot":""}