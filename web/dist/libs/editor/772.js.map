{"version":3,"file":"772.js","mappings":"gcASO,MAAMA,EAqDXC,WAAAA,CAAYC,GAAaC,EAAA,sBACvBC,KAAKC,OAASH,CAChB,CAEA,aAAMI,CAAQC,GAA2B,IAAAC,EAAAC,EACvC,MAAMC,QAAeN,KAAKO,YAAYP,KAAKC,OAAQ,CACjDE,OACAK,KAAM,YACL,GAEH,OAAOF,SAAY,QAANF,EAANE,EAAQH,YAAI,IAAAC,GAAQ,QAARC,EAAZD,EAAcE,cAAM,IAAAD,OAAd,EAANA,EAAsBF,IAC/B,CAEA,gBAAMM,CAAWN,SACTH,KAAKO,YAAYP,KAAKC,OAAQ,CAClCE,OACAK,KAAM,cAEV,CAEA,WAAME,CAAMP,SACJH,KAAKO,YAAYP,KAAKC,OAAQ,CAClCE,OACAK,KAAM,SAEV,CAEA,gBAAMG,GAAa,IAAAC,EACjB,MAAMC,QAAiBb,KAAKO,YAAYP,KAAKC,OAAQ,CACnDO,KAAM,eACL,GAEH,OAAOK,SAAc,QAAND,EAARC,EAAUV,YAAI,IAAAS,OAAN,EAARA,EAAgBN,MACzB,CAEAQ,OAAAA,GACEd,KAAKC,OAAOc,WACd,CAEQR,WAAAA,CAAYN,EAAgBE,EAA2Ba,GAAe,GAC5E,OAAO,IAAIC,SAAmCC,IAC5C,MAAMC,EAAUC,KAAKC,SAASC,WAE9B,GAAIN,EAAc,CAChB,MAAMO,EAAYC,IACZL,IAAYK,EAAErB,KAAKgB,UACrBlB,EAAOwB,oBAAoB,UAAWF,GACtCL,EAAQM,GACV,EAGFvB,EAAOyB,iBAAiB,UAAWH,EACrC,CAEAtB,EAAO0B,YAAY,IAAKxB,EAAMgB,YAEzBH,GAAcE,OAAQU,EAAU,GAEzC,ECtHK,SAASC,GAAc,MAC5BC,EAAK,aACLC,IAKA,MAAMC,EAA2B,GAGjC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAcE,IAChCD,EAASC,GAAK,IAAIC,aAAaJ,EAAMK,OAASJ,GAIhD,IAAK,IAAIK,EAAS,EAAGA,EAASN,EAAMK,OAAQC,IAAU,CAIpD,MAAMC,EAAUD,EAASL,EAOnBO,EAAelB,KAAKmB,MAAMH,EAASL,GAEzCC,EAASK,GAASC,GAAgBR,EAAMM,EAC1C,CAEA,OAAOJ,CACT,CDuFCjC,EAhHYH,EAAa,YAGL,CACjB4C,OAAAA,EACEtC,QAASuC,EACThC,WAAYiC,IAEZ,MAAMC,EAA+B,CAAC,EA8BtCC,KAAKlB,iBAAiB,WAAYF,IAChC,IAAKA,EAAErB,KAAM,OAEb,MAAM,KAAEA,EAAI,KAAEK,EAAI,QAAEW,GAAYK,EAAErB,KAElC,OAAQK,GACN,IAAK,UA9BON,EAACC,EAAWgB,KAQ1BsB,EAAgBtC,EAAMwC,GAPLrC,IACfsC,KAAKjB,YAAY,CACfrB,SACAa,WACA,GAGmC,EAsBrBjB,CAAQC,EAAMgB,GAAU,MACxC,IAAK,aApBWhB,KAClBuC,SAAAA,EAAqBvC,EAAMwC,GAAUrC,IACnCuC,OAAOC,OAAOH,EAASrC,EAAO,GAC9B,EAiBmBG,CAAWN,GAAO,MACrC,IAAK,QApCUqB,KACjBqB,OAAOC,OAAOH,EAASnB,EAAErB,KAAKA,KAAK,EAmCnB4C,CAAUvB,GAAI,MAC5B,IAAK,aAhBWL,KAClByB,KAAKjB,YAAY,CACfrB,OAAQqC,EACRxB,WACA,EAYmBR,CAAWQ,GAChC,GAEJ,ICvBJvB,EAAcoD,UAAUR,QAAQ,CAC9BtC,QAASA,CAACC,EAAM8C,EAAUC,KACxBA,EAAQ,CACN/C,KAAM0B,EAAc1B,IACpB,EAGJM,WAAYA,CAACN,EAAM8C,EAAUC,KAC3BA,EAAQ,CACN/C,KAAM0B,EAAc1B,IACpB,G","sources":["webpack://labelstudio/./src/lib/AudioUltra/Common/Worker/index.ts","webpack://labelstudio/./src/lib/AudioUltra/Media/SplitChannelWorker.ts"],"sourcesContent":["type MessengerResponder = (result: Record<string, any>) => void;\n\ntype MessengerCallback = (data: any, storage: Record<string, any>, respond: MessengerResponder) => void;\n\ntype MessengerInput = {\n  compute: MessengerCallback,\n  precompute?: MessengerCallback,\n}\n\nexport class ComputeWorker {\n  private worker: Worker;\n\n  static Messenger = {\n    receive({\n      compute: computeCallback,\n      precompute: precomputeCallback,\n    }: MessengerInput) {\n      const storage: Record<string, any> = {};\n\n      const storeData = (e: MessageEvent) => {\n        Object.assign(storage, e.data.data);\n      };\n\n      const compute = (data: any, eventId: string) => {\n        const respond = (result: Record<string, any>) => {\n          self.postMessage({\n            result,\n            eventId,\n          });\n        };\n\n        computeCallback(data, storage, respond);\n      };\n\n      const precompute = (data: any) => {\n        precomputeCallback?.(data, storage, (result) => {\n          Object.assign(storage, result);\n        });\n      };\n\n      const getStorage = (eventId: string) => {\n        self.postMessage({\n          result: storage,\n          eventId,\n        });\n      };\n\n      self.addEventListener('message', (e) => {\n        if (!e.data) return;\n\n        const { data, type, eventId } = e.data;\n\n        switch (type) {\n          case 'compute': compute(data, eventId); break;\n          case 'precompute': precompute(data); break;\n          case 'store': storeData(e); break;\n          case 'getStorage': getStorage(eventId); break;\n        }\n      });\n    },\n  };\n\n  constructor(url: Worker) {\n    this.worker = url;\n  }\n\n  async compute(data: Record<string, any>) {\n    const result = await this.sendMessage(this.worker, {\n      data,\n      type: 'compute',\n    }, true);\n\n    return result?.data?.result?.data;\n  }\n\n  async precompute(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: 'precompute',\n    });\n  }\n\n  async store(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: 'store',\n    });\n  }\n\n  async getStorage() {\n    const response = await this.sendMessage(this.worker, {\n      type: 'getStorage',\n    }, true);\n\n    return response?.data?.result;\n  }\n\n  destroy() {\n    this.worker.terminate();\n  }\n\n  private sendMessage(worker: Worker, data: Record<string, any>, waitResponse = false) {\n    return new Promise<MessageEvent | undefined>((resolve) => {\n      const eventId = Math.random().toString();\n\n      if (waitResponse) {\n        const resolver = (e: MessageEvent) => {\n          if (eventId === e.data.eventId) {\n            worker.removeEventListener('message', resolver);\n            resolve(e);\n          }\n        };\n\n        worker.addEventListener('message', resolver);\n      }\n\n      worker.postMessage({ ...data, eventId });\n\n      if (!waitResponse) resolve(undefined);\n    });\n  }\n}\n","import { ComputeWorker } from '../Common/Worker';\n\nexport function splitChannels({\n  value,\n  channelCount,\n}: {\n  value: Float32Array,\n  channelCount: number,\n}) : Float32Array[] {\n  const channels: Float32Array[] = [];\n\n  // Create new Float32Array for each channel\n  for (let c = 0; c < channelCount; c++) {\n    channels[c] = new Float32Array(value.length / channelCount);\n  }\n\n  // Split the channels into separate Float32Array samples\n  for (let sample = 0; sample < value.length; sample++) {\n    // interleaved channels\n    // ie. 2 channels\n    // [channel1, channel2, channel1, channel2, ...]\n    const channel = sample % channelCount;\n    // index of the channel sample\n    // ie. 2 channels\n    // sample = 8, channel = 0, channelIndex = 4\n    // sample = 9, channel = 1, channelIndex = 4\n    // sample = 10, channel = 0, channelIndex = 5\n    // sample = 11, channel = 1, channelIndex = 5\n    const channelIndex = Math.floor(sample / channelCount);\n\n    channels[channel][channelIndex] = value[sample];\n  }\n\n  return channels;\n}\n\nComputeWorker.Messenger.receive({\n  compute: (data, _storage, respond) => {\n    respond({\n      data: splitChannels(data),\n    });\n  },\n\n  precompute: (data, _storage, respond) => {\n    respond({\n      data: splitChannels(data),\n    });\n  },\n});\n"],"names":["ComputeWorker","constructor","url","_defineProperty","this","worker","compute","data","_result$data","_result$data$result","result","sendMessage","type","precompute","store","getStorage","_response$data","response","destroy","terminate","waitResponse","Promise","resolve","eventId","Math","random","toString","resolver","e","removeEventListener","addEventListener","postMessage","undefined","splitChannels","value","channelCount","channels","c","Float32Array","length","sample","channel","channelIndex","floor","receive","computeCallback","precomputeCallback","storage","self","Object","assign","storeData","Messenger","_storage","respond"],"sourceRoot":""}