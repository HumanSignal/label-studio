name: label-studio:docker

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      dm2branch:
        description: 'dm2 branch'
        required: true
        default: 'master'
      editorbranch:
        description: 'editor branch'
        required: true
        default: 'master'


jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout current commit
      uses: actions/checkout@v2

    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker-internal
        IMAGE_TAG: ${{ github.sha }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npm ci
        node scripts/get-build.js dm ${{ github.event.inputs.dm2branch }}
        node scripts/get-build.js editor ${{ github.event.inputs.editorbranch }}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition docker-test --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: docker-test
        image: ${{ steps.build-image.outputs.image }}


    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: docker-test

    - name: Deploy Amazon ECS task
      run: |
        REV=`aws ecs describe-task-definition --task-definition docker-test --query taskDefinition  | grep revision | awk '{print $2}' | sed 's/,//g'`
        aws ecs run-task --cluster docker-test --task-definition docker-test:$REV --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-038a27a87413ebf05],securityGroups=[sg-07c555815f2b1f1ed],assignPublicIp=ENABLED}"
