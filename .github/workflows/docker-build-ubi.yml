name: "Docker build & push UBI"

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version:
        required: true
        type: string

env:
  DOCKER_CLI_EXPERIMENTAL: enabled
  IMAGE_NAME: heartexlabs/label-studio
  PREFLIGHT_REPO: quay.io/opdev/preflight:stable
  DOCKER_CONFIG_PATH: /home/runner/.docker/config.json

jobs:
  docker_build_and_push:
    name: "Docker image"
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ref: ${{ inputs.sha }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Login to RedHat Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: quay.io
          username: ${{ secrets.REDHAT_REGISTRY_LOGIN }}
          password: ${{ secrets.REDHAT_REGISTRY_PASSWORD }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Create version_.py
        run: |
          python3 $(pwd)/label_studio/core/version.py
          cat $(pwd)/label_studio/core/version_.py

      - name: Download LaunchDarkly Community config
        env:
          LAUNCHDARKLY_COMMUNITY_SDK_KEY: ${{ secrets.LAUNCHDARKLY_COMMUNITY_SDK_KEY }}
          LAUNCHDARKLY_DOWNLOAD_PATH: "label_studio/feature_flags.json"
        run: |
          set -xeuo pipefail
          curl \
            --connect-timeout 30 \
            --retry 5 \
            --retry-delay 10 \
            -H "Authorization: $LAUNCHDARKLY_COMMUNITY_SDK_KEY" \
            "https://sdk.launchdarkly.com/sdk/latest-all" >"$LAUNCHDARKLY_DOWNLOAD_PATH"
          if [ "$(jq 'has("flags")' <<< cat $LAUNCHDARKLY_DOWNLOAD_PATH)" = "true" ]; then 
            echo "feature_flags.json is valid"
          else
            echo "feature_flags.json is invalid"
            cat $LAUNCHDARKLY_DOWNLOAD_PATH
            exit 1
          fi

      - name: Check is latest tag needs to be updated
        uses: actions/github-script@v6
        id: generate-tags
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const {repo, owner} = context.repo;
            const newTag = '${{ inputs.version }}';
            const dockerHubImageName = '${{ env.IMAGE_NAME }}';
            const redHatImageName = 'quay.io/redhat-isv-containers/${{ secrets.REDHAT_MARKETPLACE_LS_PROJECT_ID }}';
            const regexp = '^[v]?([0-9]+)\.([0-9]+)\.([0-9]+)(\.post([0-9]+))?$';
            
            function compareVersions(a, b) {
              if (a[1] === b[1])
                if (a[2] === b[2])
                  if (a[3] === b[3])
                    return (+a[5] || -1) - (+b[5] || -1)
                  else
                    return +a[3] - b[3]
                else
                  return +a[2] - b[2]
              else
                return +a[1] - b[1]
            }
            
            const tags = await github.paginate(
              github.rest.repos.listTags,
              {
                owner,
                repo,
                per_page: 100
              },
              (response) => response.data
            );
            const rawTags = tags.map(e => e.name)
            const filteredTags = rawTags.filter(e => e.match(regexp))
            const sortedTags = filteredTags
              .map(e => e.match(regexp))
              .sort(compareVersions)
              .reverse()
            console.log('Sorted tags:')
            console.log(sortedTags.map(e => e[0]))
            
            const newestVersion = sortedTags[0];
            console.log(`Newest tag: ${newestVersion[0]}`)
            
            let dockerHubUbuntuRawTags = [newTag];
            let dockerHubUbiRawTags = [`ubi_${newTag}`];
            let redHatUbiRawTags = [newTag];
            
            
            if (compareVersions(newTag.match(regexp), newestVersion) >= 0) {
              console.log(`new tag ${newTag} is higher that all existing tags`)
              console.log(dockerHubUbuntuRawTags)
              dockerHubUbuntuRawTags.push('latest')
              dockerHubUbiRawTags.push('ubi_latest')
              redHatUbiRawTags.push('latest')
              core.setOutput("latest", true);
            } else {
              console.log('not latest')
              core.setOutput("latest", false);
            }
            
            const ubuntuTags = dockerHubUbuntuRawTags.map(e => `${dockerHubImageName}:${e}`)
            const redHatTags = redHatUbiRawTags.map(e => `${redHatImageName}:${e}`)
            const ubiTags = redHatTags.concat(
              dockerHubUbiRawTags.map(e => `${dockerHubImageName}:${e}`)
            )
            
            console.log('Ubuntu tags:')
            console.log(ubuntuTags)
            console.log('Ubi tags:')
            console.log(ubiTags)
            
            core.setOutput("ubuntu-tags", ubuntuTags.join(','));
            core.setOutput("redhat-tags", redHatTags.join(','));
            core.setOutput("ubi-tags", ubiTags.join(','));

      - name: Build and push ubi
        uses: docker/build-push-action@v4.0.0
        id: docker_build_and_push_ubi
        with:
          context: .
          file: Dockerfile.redhat
          push: true
          tags: ${{ steps.generate-tags.outputs.ubi-tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run preflight and submit validation results to RedHat
        shell: bash
        run: |
          docker pull ${{ env.PREFLIGHT_REPO }}
          while IFS= read -d ',' image; do
            docker run --rm -v ${{ env.DOCKER_CONFIG_PATH }}:${{ env.DOCKER_CONFIG_PATH }} \
              --env PFLT_DOCKERCONFIG=${{ env.DOCKER_CONFIG_PATH }} \
              --env PFLT_PYXIS_API_TOKEN=${{ secrets.REDHAT_MARKETPLACE_LS_PYXIS_TOKEN }} \
              --env PFLT_CERTIFICATION_PROJECT_ID=${{ secrets.REDHAT_MARKETPLACE_LS_PROJECT_ID }} \
              ${{ env.PREFLIGHT_REPO }} \
              check container "${image}" \
              --submit
          done <<< '${{ steps.generate-tags.outputs.redhat-tags }},'
