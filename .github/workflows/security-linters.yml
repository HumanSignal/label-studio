name: "Security linters"

on:
  push:
    paths:
      - 'label_studio/**'
      - '.github/workflows/security-linters.yml'
      - 'deploy/requirements**'
    tags-ignore:
      - '**'
  pull_request_target:
    types: [ opened, synchronize, reopened, ready_for_review ]
    branches:
      - develop

env:
  BANDIT_VERSION: 1.7.4
  PROJECT_PATH: 'label_studio/'
  REPORT_PATH: 'bandit_results/bandit_security_report.txt'
  ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'
  GIT_GITLEAKS_VERSION: 8.8.7

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.pull_request.head.ref || github.ref }}
  cancel-in-progress: true

jobs:
  bandit:
    name: "Bandit"
    timeout-minutes: 2
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2.0.1

      - name: Extract branch name on direct push to a branch
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Extract branch name on 'pull_request_target'
        if: github.event_name == 'pull_request_target'
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF})" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: "${{ env.BRANCH_NAME }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Bandit
        run: |
          pip install bandit==$BANDIT_VERSION

      - name: Run Bandit
        run: |
          mkdir -p bandit_results
          touch ${{ env.REPORT_PATH }}
          bandit -r $PROJECT_PATH -o ${{ env.REPORT_PATH }} -f 'txt' -ll

      - name: Print scan results
        if: always()
        run: cat ${{ env.REPORT_PATH }}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Security check results
          path: ${{ env.REPORT_PATH }}

  gitleaks:
    name: "Git Leaks"
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2.0.1

      - name: Configure gitleaks binary cache
        id: cache
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/gitleaks
          key: gitleaks-${{ env.GIT_GITLEAKS_VERSION }}

      - name: Install tools
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget -O - \
          "https://github.com/zricethezav/gitleaks/releases/download/v${GIT_GITLEAKS_VERSION}/gitleaks_${GIT_GITLEAKS_VERSION}_linux_x64.tar.gz" \
          | sudo tar xzf - -C /usr/local/bin

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          token: ${{ secrets.GIT_PAT }}
          fetch-depth: 0

      - name: Run gitleaks
        run: |
          set -euo pipefail ${ACTIONS_STEP_DEBUG:+-x}
          
          if [[ "${{ github.event_name }}" = "pull_request_target" ]]; then
            head_ref=${{ github.event.pull_request.head.sha }}
            base_ref=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            head_ref=${{ github.event.after }}
            base_ref=${{ github.event.before }}
          fi
          
          echo "${base_ref}..${head_ref}"
          
          gitleaks \
            detect \
            --source="." \
            --redact \
            -v \
            --exit-code=2 \
            --report-format=sarif \
            --report-path=results.sarif \
            --log-level=debug \
            --log-opts="${base_ref}..${head_ref}"

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: GitLeaks results
          path: results.sarif
