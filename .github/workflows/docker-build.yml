name: "Docker build & push"

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      branch_name:
        required: true
        type: string
    outputs:
      image_version:
        description: "Docker tag"
        value: ${{ jobs.docker_build_and_push.outputs.image_version }}

env:
  DOCKER_CLI_EXPERIMENTAL: enabled
  IMAGE_NAME: heartexlabs/label-studio
  DOCKER_IMAGE_TAG_CHECK_NAME: "Docker image tag"

jobs:
  docker_build_and_push:
    name: "Docker image"
    timeout-minutes: 30
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.version.outputs.image_version }}
    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ref: ${{ inputs.sha }}
          fetch-depth: 0

      - name: Calculate version
        id: version
        env:
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          set -x
          sha="$(git rev-parse HEAD)"
          echo "sha=$sha" >> $GITHUB_OUTPUT
          regexp='^ls-release\/(.*)$'; 
          if [[ '${{ inputs.branch_name }}' =~ $regexp ]]; then
            image_version="${BASH_REMATCH[1]}rc${sha}"
          else
            image_version='${{ inputs.branch_name }}'
          fi
          echo "image_version=${image_version}" >> $GITHUB_OUTPUT
          echo "ubi_image_version=ubi_${image_version}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.1

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: heartexlabs
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Create version_.py
        run: |
          python3 $(pwd)/label_studio/core/version.py
          cat $(pwd)/label_studio/core/version_.py

      - name: Download LaunchDarkly Community config
        env:
          LAUNCHDARKLY_COMMUNITY_SDK_KEY: ${{ secrets.LAUNCHDARKLY_COMMUNITY_SDK_KEY }}
          LAUNCHDARKLY_DOWNLOAD_PATH: "label_studio/feature_flags.json"
        run: |
          set -xeuo pipefail
          curl \
            --connect-timeout 30 \
            --retry 5 \
            --retry-delay 10 \
            -H "Authorization: $LAUNCHDARKLY_COMMUNITY_SDK_KEY" \
            "https://sdk.launchdarkly.com/sdk/latest-all" >"$LAUNCHDARKLY_DOWNLOAD_PATH"
          if [ "$(jq 'has("flags")' <<< cat $LAUNCHDARKLY_DOWNLOAD_PATH)" = "true" ]; then 
            echo "feature_flags.json is valid"
          else
            echo "feature_flags.json is invalid"
            cat $LAUNCHDARKLY_DOWNLOAD_PATH
            exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Push Docker image
        uses: docker/build-push-action@v4.0.0
        id: docker_build_and_push
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.image_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker image tag Check
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const details = {
              "branch": "${{ inputs.branch_name }}",
              "image_version": "${{ steps.version.outputs.image_version }}",
              "sha": "${{ steps.version.outputs.sha }}"
            }
            const { data: check } = await github.rest.checks.create({
              owner,
              repo,
              name: '${{ env.DOCKER_IMAGE_TAG_CHECK_NAME }}',
              head_sha: '${{ steps.version.outputs.sha }}',
              status: 'in_progress',
              output: {
                title: '${{ env.DOCKER_IMAGE_TAG_CHECK_NAME }}',
                summary: JSON.stringify(details)
              }
            });
            await github.rest.checks.update({
              owner,
              repo,
              check_run_id: check.id,
              status: 'completed',
              conclusion: 'success'
            });
