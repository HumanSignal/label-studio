name: "Docker release promote"

on:
  workflow_call:
    inputs:
      release_tag:
        required: true
        type: string

env:
  DOCKER_IMAGE_TAG_CHECK_NAME: "Docker image tag"
  IMAGE_NAME: "heartexlabs/label-studio"
  RELEASE_DOCKERFILE: "Dockerfile.release"
  RELEASE_UBI_DOCKERFILE: "Dockerfile.redhat.release"
  PREFLIGHT_REPO: "quay.io/opdev/preflight:stable"
  DOCKER_CONFIG_PATH: "/home/runner/.docker/config.json"

jobs:
  docker_release_retag:
    name: "Docker image"
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.get_info.outputs.image_version }}
      ubi_image_version: ${{ steps.get_info.outputs.ubi_image_version }}
    steps:
      - uses: hmarr/debug-action@v2.0.1

      - name: Get an artifact from check suite
        uses: actions/github-script@v6
        id: get_info
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const {repo, owner} = context.repo;
            const {data: checks} = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: 'tags/${{ inputs.release_tag }}',
              status: "completed",
            })
            const check = checks.check_runs.find(e => e.name === '${{ env.DOCKER_IMAGE_TAG_CHECK_NAME }}')
            const details = JSON.parse(check.output.summary)
            console.log(details)
            core.setOutput("image_version", details.image_version);
            core.setOutput("ubi_image_version", details.ubi_image_version);
            core.setOutput("sha", details.sha);

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.release_tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Create version_.py
        run: |
          python3 $(pwd)/label_studio/core/version.py
          cat $(pwd)/label_studio/core/version_.py

      - name: Download feature flags
        env:
          LAUNCHDARKLY_COMMUNITY_SDK_KEY: ${{ secrets.LAUNCHDARKLY_COMMUNITY_SDK_KEY }}
        run: |
          curl -H "Authorization: $LAUNCHDARKLY_COMMUNITY_SDK_KEY" https://app.launchdarkly.com/sdk/latest-all > feature_flags.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2.0.0
        with:
          username: heartexlabs
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Release Dockerfile
        id: release_dockerfile
        shell: bash
        run: |
          set -euo pipefail ${ACTIONS_STEP_DEBUG:+-x}

          release_dir=release_${{ inputs.release_tag }}
          echo "::set-output name=release_dir::$release_dir"
          mkdir -p $release_dir
          cp label_studio/core/version_.py $release_dir/
          cp feature_flags.json $release_dir/
          cd $release_dir

          cat <<EOF > "${{ env.RELEASE_DOCKERFILE }}"
          FROM ${{ env.IMAGE_NAME }}:${{ steps.get_info.outputs.image_version }}
          COPY --chown=54546:0 version_.py /label-studio/label_studio/core/version_.py
          COPY --chown=54546:0 feature_flags.json /label-studio/label_studio/feature_flags.json
          EOF

      - name: Build and push Release Ubuntu Docker image
        uses: docker/build-push-action@v3.1.1
        id: docker_build_and_push
        with:
          context: ${{ steps.release_dockerfile.outputs.release_dir }}
          file: ${{ steps.release_dockerfile.outputs.release_dir }}/${{ env.RELEASE_DOCKERFILE }}
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ inputs.release_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare Release UBI Dockerfile
        id: ubi_release_dockerfile
        shell: bash
        run: |
          set -euo pipefail ${ACTIONS_STEP_DEBUG:+-x}

          release_dir=ubi_release_${{ inputs.release_tag }}
          echo "::set-output name=release_dir::$release_dir"
          mkdir -p $release_dir
          cp label_studio/core/version_.py $release_dir/
          cp feature_flags.json $release_dir/
          cd $release_dir

          cat <<EOF > "${{ env.RELEASE_UBI_DOCKERFILE }}"
          FROM scan.connect.redhat.com/${{ secrets.REDHAT_MARKETPLACE_LS_OSPID }}/label-studio:${{ steps.get_info.outputs.image_version }}
          COPY --chown=54546:0 version_.py /label-studio/label_studio/core/version_.py
          COPY --chown=54546:0 feature_flags.json /label-studio/label_studio/feature_flags.json
          EOF

      - name: Build and push Release UBI Docker image
        uses: docker/build-push-action@v3.1.1
        id: docker_build_and_push_ubi
        with:
          context: ${{ steps.ubi_release_dockerfile.outputs.release_dir }}
          file: ${{ steps.ubi_release_dockerfile.outputs.release_dir }}/${{ env.RELEASE_UBI_DOCKERFILE }}
          push: true
          tags: scan.connect.redhat.com/${{ secrets.REDHAT_MARKETPLACE_LS_OSPID }}/label-studio:${{ inputs.release_tag }},${{ env.IMAGE_NAME }}:ubi_${{ inputs.release_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run preflight and submit validation results to RedHat
        run: |
          docker pull ${{ env.PREFLIGHT_REPO }}
          docker run --rm -v ${{ env.DOCKER_CONFIG_PATH }}:${{ env.DOCKER_CONFIG_PATH }} \
          --env PFLT_DOCKERCONFIG=${{ env.DOCKER_CONFIG_PATH }} \
          --env PFLT_PYXIS_API_TOKEN=${{ secrets.REDHAT_MARKETPLACE_LS_PYXIS_TOKEN }} \
          --env PFLT_CERTIFICATION_PROJECT_ID=${{ secrets.REDHAT_MARKETPLACE_LS_PROJECT_ID }} \
          ${{ env.PREFLIGHT_REPO }} \
          check container scan.connect.redhat.com/${{ secrets.REDHAT_MARKETPLACE_LS_OSPID }}/label-studio:${{ inputs.release_tag }} \
          --submit
