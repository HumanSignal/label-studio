name: "Tests"

on:
  workflow_call:
    inputs:
      head_sha:
        required: true
        type: string

env:
  NODE: '14'
  CACHE_NAME_PREFIX: v1

jobs:
  run_pytest_sqlite:
    name: LS SQLite Ubuntu
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'

    env:
      DJANGO_SETTINGS_MODULE: core.settings.label_studio
      COVERAGE_PROCESS_START: 1
      LOG_DIR: pytest_logs
      collect_analytics: true
      DEBUG_CONTEXTLOG: true
      LABEL_STUDIO_TEST_ENVIRONMENT: false
      SENTRY_ENVIRONMENT: tests-ubuntu-sqlite
      SENTRY_RATE: 0
      DJANGO_DB: sqlite
      JSON_LOG: 0
      # SENTRY_DSN:

    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsasl2-dev python3-dev libldap2-dev libssl-dev libxml2-dev libxslt-dev

      - uses: actions/cache@v3
        name: Configure pip cache
        id: pip-cache
        with:
          # Cache the Python package environment, excluding pip and setuptools and label_studio* installed by setup-python
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}/bin/*
            ${{ env.pythonLocation }}/include
            ${{ env.pythonLocation }}/lib/python*/site-packages/*
            !${{ env.pythonLocation }}/bin/pip*
            !${{ env.pythonLocation }}/lib/python*/site-packages/pip*
            !${{ env.pythonLocation }}/lib/python*/site-packages/setuptools*
            !${{ env.pythonLocation }}/lib/python*/site-packages/label_studio*
          key: ${{ runner.os }}-pip-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements-test.txt') }}
          restore-keys: |
            ${{ env.CACHE_NAME_PREFIX }}-${{ runner.os }}-pip-django-${{ env.pythonLocation }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install --upgrade cython
          pip install -U pip==20.2
          pip install -r deploy/requirements.txt -r deploy/requirements-test.txt
          pip install -e .

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE }}"

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Configure npm cache
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.NODE }}-${{ hashFiles('label_studio/frontend/package.json') }}-${{ hashFiles('label_studio/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE }}-

      - name: Install LSF & set version.py
        run: ./deploy/prebuild_wo_frontend.sh
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Do migrations
        run: python label_studio/manage.py migrate

      - name: Run functional tests
        run: |
          cd label_studio/
          pytest --cov=. --cov-report=xml -vv -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.1
        with:
          fail_ci_if_error: true
          files: ./label_studio/coverage.xml
          verbose: true
          name: codecov-python-${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}

  run_pytest_postgresql:
    name: LS PostgreSQL Ubuntu
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10' ]
    env:
      DJANGO_SETTINGS_MODULE: core.settings.label_studio
      DJANGO_DB: default
      COVERAGE_PROCESS_START: .coveragerc
      PYTHONPATH: .
      LOG_LEVEL: ERROR
      LOG_DIR: pytest_logs
      collect_analytics: true
      DEBUG_CONTEXTLOG: true
      LABEL_STUDIO_TEST_ENVIRONMENT: false
      SENTRY_ENVIRONMENT: tests-ubuntu-postgresql
      SENTRY_RATE: 0
      JSON_LOG: 0
      # SENTRY_DSN:

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:13.8
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsasl2-dev python-dev libldap2-dev libssl-dev libxml2-dev libxslt-dev python-dev

      - uses: actions/cache@v3
        name: Configure pip cache
        id: pip-cache
        with:
          # Cache the Python package environment, excluding pip and setuptools and label_studio* installed by setup-python
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}/bin/*
            ${{ env.pythonLocation }}/include
            ${{ env.pythonLocation }}/lib/python*/site-packages/*
            !${{ env.pythonLocation }}/bin/pip*
            !${{ env.pythonLocation }}/lib/python*/site-packages/pip*
            !${{ env.pythonLocation }}/lib/python*/site-packages/setuptools*
            !${{ env.pythonLocation }}/lib/python*/site-packages/label_studio*
          key: ${{ runner.os }}-pip-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements-test.txt') }}
          restore-keys: |
            ${{ env.CACHE_NAME_PREFIX }}-${{ runner.os }}-pip-django-${{ env.pythonLocation }}-

      - name: Install pip dependencies
        run: |
          pip install -U pip==20.2
          pip install -r deploy/requirements.txt -r deploy/requirements-test.txt
          pip install -e .

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Configure npm cache
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.NODE }}-${{ hashFiles('label_studio/frontend/package.json') }}-${{ hashFiles('label_studio/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE }}-

      - name: Install LSF & set version.py
        run: ./deploy/prebuild_wo_frontend.sh
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Do migrations
        run: python label_studio/manage.py migrate

      - name: Run functional tests
        run: |
          cd label_studio/
          pytest --cov=. --cov-report=xml -vv -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.1
        with:
          fail_ci_if_error: true
          files: ./label_studio/coverage.xml
          verbose: true
          name: codecov-python-${{ matrix.python-version }}-postgresql
          token: ${{ secrets.CODECOV_TOKEN }}

  windows_label_studio:
    name: LS SQLite Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'

    env:
      DJANGO_SETTINGS_MODULE: core.settings.label_studio
      COVERAGE_PROCESS_START: 1
      LOG_DIR: pytest_logs
      collect_analytics: true
      DEBUG_CONTEXTLOG: true
      LABEL_STUDIO_TEST_ENVIRONMENT: false
      SENTRY_ENVIRONMENT: tests-windows-sqlite
      SENTRY_RATE: 0
      DJANGO_DB: sqlite
      JSON_LOG: 0
      # SENTRY_DSN:

    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        name: Configure pip cache
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install --upgrade cython
          if (Test-Path -Path '.\deploy\requirements.txt' -PathType Leaf)
          {pip install -r deploy\requirements.txt}
          if (Test-Path -Path '.\deploy\requirements-test.txt' -PathType Leaf)
          {pip install -r deploy/requirements-test.txt}
          pip install -e .

      - name: Fix sqlite.dll for python < 3.9
        if: ${{ contains(matrix.python-version, '3.7') || contains(matrix.python-version, '3.8') }}
        run: |
          set PYTHONIOENCODING=utf-8
          set PYTHONLEGACYWINDOWSSTDIO=utf-8
          label-studio init my_project --agree-fix-sqlite --force-fix-sqlite
          cp sqlite3.dll %pythonLocation%/DLLs/sqlite3.dll
        shell: cmd

      - name: Init project
        run: |
          set PYTHONIOENCODING=utf-8
          set PYTHONLEGACYWINDOWSSTDIO=utf-8
          label-studio init my_project --username test@test.com --password testpwd
        shell: cmd

      - name: Test with pytest
        env:
          collect_analytics: 0
        run: |
          cd label_studio/
          python -m pytest -vv -n auto
