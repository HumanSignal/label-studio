name: "Tests"

on:
  workflow_call:
    inputs:
      head_sha:
        required: true
        type: string

env:
  NODE: '18'
  CACHE_NAME_PREFIX: v1

jobs:
  run_pytest_sqlite:
    name: LS SQLite Ubuntu
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    env:
      DJANGO_SETTINGS_MODULE: core.settings.label_studio
      COVERAGE_PROCESS_START: 1
      LOG_DIR: pytest_logs
      collect_analytics: true
      DEBUG_CONTEXTLOG: true
      LABEL_STUDIO_TEST_ENVIRONMENT: false
      SENTRY_ENVIRONMENT: tests-ubuntu-sqlite
      SENTRY_RATE: 0
      DJANGO_DB: sqlite
      JSON_LOG: 0
      # SENTRY_DSN:

    steps:
      - uses: hmarr/debug-action@v3.0.0

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libffi7 libldap2-dev libsasl2-dev libssl-dev libxml2-dev libxslt-dev python3-dev

      - name: Set up Poetry
        uses: snok/install-poetry@v1

      - name: Install Python dependencies
        run: poetry install --with test

      - name: Install LSF & set version.py
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: poetry run ./deploy/prebuild_wo_frontend.sh

      - name: Do migrations
        run: poetry run python label_studio/manage.py migrate

      - name: Run functional tests
        working-directory: label_studio
        run: poetry run pytest -vv -n auto

  run_pytest_postgresql:
    name: LS PostgreSQL Ubuntu
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10' ]
    env:
      DJANGO_SETTINGS_MODULE: core.settings.label_studio
      DJANGO_DB: default
      COVERAGE_PROCESS_START: .coveragerc
      PYTHONPATH: .
      LOG_LEVEL: ERROR
      LOG_DIR: pytest_logs
      collect_analytics: true
      DEBUG_CONTEXTLOG: true
      LABEL_STUDIO_TEST_ENVIRONMENT: false
      SENTRY_ENVIRONMENT: tests-ubuntu-postgresql
      SENTRY_RATE: 0
      JSON_LOG: 0
      # SENTRY_DSN:

    services:
      postgres:
        image: postgres:13.8
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: hmarr/debug-action@v3.0.0

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libffi7 libldap2-dev libsasl2-dev libssl-dev libxml2-dev libxslt-dev python3-dev

      - name: Set up Poetry
        uses: snok/install-poetry@v1

      - name: Install Python dependencies
        run: poetry install --with test

      - name: Install LSF & set version.py
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: poetry run ./deploy/prebuild_wo_frontend.sh

      - name: Do migrations
        run: poetry run python label_studio/manage.py migrate

      - name: Run functional tests
        working-directory: label_studio
        run: poetry run pytest --cov=. --cov-report=xml -vv -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.2.0
        with:
          name: codecov-python-${{ matrix.python-version }}
          flags: pytests
          files: ./label_studio/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          fail_ci_if_error: true

  windows_label_studio:
    name: LS SQLite Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.8'
          - '3.9'

    # required for poetry action
    # see https://github.com/marketplace/actions/install-poetry-action#running-on-windows
    defaults:
      run:
        shell: bash

    env:
      DJANGO_SETTINGS_MODULE: core.settings.label_studio
      COVERAGE_PROCESS_START: 1
      LOG_DIR: pytest_logs
      collect_analytics: true
      DEBUG_CONTEXTLOG: true
      LABEL_STUDIO_TEST_ENVIRONMENT: false
      SENTRY_ENVIRONMENT: tests-windows-sqlite
      SENTRY_RATE: 0
      DJANGO_DB: sqlite
      JSON_LOG: 0
      # SENTRY_DSN:

    steps:
      - uses: hmarr/debug-action@v3.0.0

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry
        uses: snok/install-poetry@v1

      - name: Install Python dependencies
        run: poetry install --with test

      - name: Fix sqlite.dll for python < 3.9
        if: ${{ contains(matrix.python-version, '3.8') }}
        run: |
          set PYTHONIOENCODING=utf-8
          set PYTHONLEGACYWINDOWSSTDIO=utf-8
          bash -c "poetry run label-studio init my_project --agree-fix-sqlite --force-fix-sqlite"
          cp sqlite3.dll %pythonLocation%/DLLs/sqlite3.dll
        shell: cmd

      - name: Init project
        run: |
          set PYTHONIOENCODING=utf-8
          set PYTHONLEGACYWINDOWSSTDIO=utf-8
          bash -c "poetry run label-studio init my_project --username test@test.com --password testpwd"
        shell: cmd

      - name: Test with pytest
        env:
          collect_analytics: 0
        working-directory: label_studio
        run: poetry run pytest -vv -n auto
