name: 'Follow Merge: Sync PR'

on:
  pull_request_target:
    types:
      - opened
      - closed
      - converted_to_draft
      - ready_for_review
      - synchronize
    branches:
      - develop
      - 'lse-release/**'
    paths-ignore:
      - 'label_studio/frontend/**'
      - 'docs/**'

concurrency:
  group: ${{ github.head_ref }}

env:
  DOWNSTREAM_REPO_OWNER: heartexlabs
  DOWNSTREAM_REPO: label-studio-enterprise

jobs:
  sync:
    name: "Sync"
    if: startsWith(github.head_ref, 'fb-')
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Check user's membership
        uses: actions/github-script@v6
        id: check-membership
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            try {
              return (await github.rest.orgs.getMembershipForUser({
                org: '${{ env.DOWNSTREAM_REPO_OWNER }}',
                username: '${{ github.actor }}',
              }))?.data?.state == "active";
            } catch (error) {
              return false;
            }

      - name: Notify user on failure
        if: steps.check-membership.outputs.result == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: '${{ github.event.number }}',
              body: [
                'Hi @${{ github.actor }}!',
                '',
                'Unfortunately you don\'t have membership in ${{ env.DOWNSTREAM_REPO_OWNER }} organization, your PR wasn\'t synced with ${{ env.DOWNSTREAM_REPO }}.'
              ].join('\n')
            });

      - name: Sync Merged PR
        uses: actions/github-script@v6
        if: |
          steps.check-membership.outputs.result == 'true' &&
          github.event.pull_request.merged == true
        id: sync-merge-pr
        env:
          TITLE: ${{ github.event.pull_request.title }}
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const getCommitResponse = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: '${{ github.sha }}'
            });
            const result = await github.rest.repos.createDispatchEvent({
              owner: '${{ env.DOWNSTREAM_REPO_OWNER }}',
              repo: '${{ env.DOWNSTREAM_REPO }}',
              event_type: 'upstream_repo_update',
              client_payload: {
                branch_name: '${{ github.head_ref }}',
                base_branch_name: '${{ github.base_ref }}',
                repo_name: '${{ github.repository }}',
                commit_sha : '${{ github.sha }}',
                title: process.env.TITLE,
                html_url: '${{ github.event.pull_request.html_url }}',
                actor: '${{ github.actor }}',
                author_username: getCommitResponse.data.commit.author.name,
                author_email: getCommitResponse.data.commit.author.email,
                event_action: 'merged'
              }
            });
            return result

      - name: Sync PR
        uses: actions/github-script@v6
        if: |
          steps.check-membership.outputs.result == 'true' &&
          github.event.pull_request.merged != true
        id: sync-pr
        env:
          TITLE: ${{ github.event.pull_request.title }}
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const getCommitResponse = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: '${{ github.event.pull_request.head.sha }}'
            });
            const result = await github.rest.repos.createDispatchEvent({
              owner: '${{ env.DOWNSTREAM_REPO_OWNER }}',
              repo: '${{ env.DOWNSTREAM_REPO }}',
              event_type: 'upstream_repo_update',
              client_payload: {
                branch_name: '${{ github.head_ref }}',
                base_branch_name: '${{ github.base_ref }}',
                repo_name: '${{ github.repository }}',
                commit_sha : '${{ github.event.pull_request.head.sha }}',
                title: process.env.TITLE,
                html_url: '${{ github.event.pull_request.html_url }}',
                actor: '${{ github.actor }}',
                author_username: getCommitResponse.data.commit.author.name,
                author_email: getCommitResponse.data.commit.author.email,
                event_action: '${{ github.event.action }}'
              }
            });
            return result
