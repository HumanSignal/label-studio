{"version":3,"sources":["components/Node/Node.module.scss","components/Panel/Panel.module.scss","components/Relations/Relations.module.scss","components/ImageControls/ImageControls.module.scss","components/App/App.module.scss","components/Hint/Hint.module.scss","components/Entities/Entities.module.scss","components/Waveform/Waveform.module.scss","components/Segment/Segment.module.scss","components/TextHighlight/TextHighlight.module.scss","interfaces/object/TextRegion/TextRegion.module.scss","examples/sentiment_analysis/config.xml","examples/audio_classification/config.xml","examples/audio_regions/config.xml","examples/dialogue_analysis/config.xml","examples/image_bbox/config.xml","examples/image_polygons/config.xml","examples/image_keypoints/config.xml","examples/image_multilabel/config.xml","examples/named_entity/config.xml","examples/references/config.xml","examples/transcribe_audio/config.xml","components/Completions/Completions.module.scss","interfaces/object/AudioPlus/AudioPlus.module.scss","core/Registry.js","core/Requests.js","utils/unique.js","core/Helpers.js","core/Tree.js","utils/utilities.js","utils/colors.js","utils/date.js","utils/index.js","utils/debounce.js","utils/styles.js","components/Completions/Completions.js","components/Predictions/Predictions.js","components/Hint/Hint.js","components/Controls/Controls.js","components/Panel/Panel.js","components/Settings/Settings.js","components/Debug.js","components/Node/Node.js","components/Relations/Relations.js","components/Entities/Entities.js","components/Entity/Entity.js","components/SideColumn/SideColumn.js","components/Segment/Segment.js","core/Types.js","interfaces/visual/View.js","core/Template.js","interfaces/mixins/ProcessAttrs.js","interfaces/visual/Table.js","interfaces/visual/Header.js","interfaces/visual/HyperText.js","components/Dialog/Dialog.js","interfaces/visual/Dialog.js","interfaces/object/AudioHOC.js","interfaces/object/Audio/Controls.js","components/Waveform/Waveform.js","interfaces/object/Audio.js","interfaces/mixins/Regions.js","interfaces/mixins/Normalization.js","interfaces/control/Label.js","interfaces/mixins/SelectedModel.js","components/Infomodal/Infomodal.js","interfaces/mixins/LabelMixin.js","interfaces/control/Labels.js","interfaces/control/Rating.js","interfaces/object/AudioRegion.js","interfaces/object/AudioPlus.js","interfaces/control/Rectangle.js","interfaces/control/RectangleLabels.js","interfaces/object/RectRegion.js","interfaces/object/PolygonPoint.js","interfaces/control/Polygon.js","interfaces/control/PolygonLabels.js","interfaces/object/PolygonRegion.js","interfaces/control/KeyPoint.js","interfaces/control/KeyPointLabels.js","interfaces/object/KeyPointRegion.js","components/ImageTransformer/ImageTransformer.js","components/ImageControls/ImageControls.js","components/ImageGrid/ImageGrid.js","components/ImageView/ImageView.js","interfaces/object/Image.js","components/TextHighlight/Range.js","components/TextNode/TextNode.js","components/TextHighlight/Node.js","components/TextHighlight/UrlNode.js","components/TextHighlight/EmojiNode.js","components/TextHighlight/TextHighlight.js","interfaces/object/TextRegion.js","interfaces/object/Text.js","interfaces/control/Choice.js","interfaces/control/Choices.js","interfaces/control/List.js","interfaces/control/Ranker.js","interfaces/control/Shortcut.js","interfaces/object/TextAreaRegion.js","interfaces/control/TextArea.js","components/App/App.js","serviceWorker.js","stores/TaskStore.js","stores/ProjectStore.js","stores/UserStore.js","core/Hotkey.js","stores/SettingsStore.js","core/TimeTraveller.js","stores/RelationStore.js","stores/NormalizationStore.js","stores/RegionStore.js","stores/CompletionStore.js","constants/Api.js","stores/AppStore.js","core/External.js","env/production.js","examples/sentiment_analysis/index.js","examples/audio_classification/index.js","examples/audio_regions/index.js","examples/dialogue_analysis/index.js","examples/image_bbox/index.js","examples/image_polygons/index.js","examples/image_keypoints/index.js","examples/image_multilabel/index.js","examples/named_entity/index.js","examples/references/index.js","env/development.js","examples/transcribe_audio/index.js","index.js","components/Entity/Entity.module.scss","components/Controls/Controls.module.scss","components/Dialog/Dialog.module.scss"],"names":["module","exports","node","container","block","block__controls","section","section__blocks","delete","divider","button","editor","menu","content","common","main","list","item","progress","wave","state","__webpack_require__","p","buttons","completion","completion_selected","title","titlespace","itembtns","play","Registry","_Registry","Object","classCallCheck","this","tags","models","views","views_models","tag","model","view","push","name","values","modelName","Error","keys","join","handleResponse","res","status","json","wrapperRequest","url","method","headers","body","window","fetch","credentials","then","response","Requests","fetcher","Accept","fetcherAuth","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","wrap","_context","prev","next","Content-Type","Authorization","btoa","username","password","sent","abrupt","stop","_x","_x2","apply","arguments","poster","remover","patch","guidGenerator","lgth","uniqueID","nanoid","cloneNode","snapshot","getSnapshot","getType","create","objectSpread","id","restoreNewsnapshot","fromModel","renderItem","el","View","getViewByModel","react_default","createElement","key","Tree","cloneReactTree","items","attrs","clone","children","React","Children","forEach","child","props","moreProps","cloneElement","renderChildren","length","map","treeToModel","html","buildData","_i","_Object$keys","toLowerCase","JSON","parse","attrsToProps","$","document","htmlSelfClosingTags","split","newData","i","edsplit","editSelfClosingTags","replace","parseString","explicitChildren","preserveChildrenOrder","charsAsChildren","err","result","root","addNode","$$","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","chld","value","return","findInterface","tree","fn","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","findParentOfType","obj","classes","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","c","getParentOfType","filterChildrenOfType","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","cssConverter","style","firstIndexOfColon","attributes","indexOf","substring","x","toUpperCase","isString","String","isStringEmpty","isStringJSON","e","getUrl","text","stringToTest","slice","match","exec","toTimeString","ms","Date","toUTCString","colorNames","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hexToRGBA","hex","opacity","r","g","b","parseInt","concat","colorToRGBA","alpha","convertToRGBA","charAt","stringToColor","str","hash","charCodeAt","color","toString","substr","rgbaChangeAlpha","rgba","msToHMS","seconds","hours","Math","floor","prettyDate","time","test","date","diff","getTime","day_diff","isNaN","ceil","currentISODate","tzOffest","getTimezoneOffset","now","toISOString","utils","Checkers","Colors","UDate","debounce","func","wait","immediate","timeout","context","args","callNow","clearTimeout","setTimeout","styleToProp","styles","filter","trim","reduce","styleObj","defineProperty","Completion","observer","completionID","store","badge","es_badge","userGenerate","sentUserGenerate","className","pk","Item","selected","onClick","ev","completionStore","selectCompletion","createdAgo","Utils","createdDate","createdBy","honeypot","es_button","type","preventDefault","removeHoneypot","icon","ghost","setHoneypot","tooltip","placement","deleteCompletion","Completions","shape","addUserCompletion","savedCompletions","card","bodyStyle","padding","paddingTop","Component","Prediction","selectPrediction","addCompletionFromPrediction","Predictions","predictions","predict","Hint","localClass","data-copy","copy","inject","taskInformation","skipButton","updateButton","submitButton","skip","update","submit","_store$completionStor","_store$settings","settings","enableHotkeys","enableTooltips","task","Hint_Hint","predictSelect","explore","hasInterface","skipTask","sendTask","updateTask","wrapper","history","canUndo","undo","canRedo","redo","reset","setPrelabeling","display","resetPrelabeling","description","showingDescription","toggleDescription","toggleSettings","modal","visible","showingSettings","footer","onCancel","tabs","defaultActiveKey","TabPane","tab","es_checkbox","defaultChecked","onChange","toggleHotkeys","toggleTooltips","DebugComponent","_this2","self","basic","setState","stringify","toJSON","serializeCompletion","deserializeCompletion","addInitialCompletion","project","resetState","addTask","addGeneratedCompletion","markLoading","traverseTree","updateValue","es_form","TextArea","target","Node","click","getRoot","regionStore","unselectAll","selectRegion","href","start","toFixed","end","_value","w","width","scaleX","y","height","scaleY","NodeMinimal","_ref2","react","Relation","rl","isValidReference","node1","node2","onMouseOver","toggleHighlight","onMouseOut","Node_NodeMinimal","deleteRelation","relations","relationStore","Relations_Relation","regions","paddingLeft","deleteAllRegions","region","toggleHightlight","RenderStates","_render","s","element","pid","labels","getSelectedNames","bgColor","findLabel","background","es_tag","getSelectedString","states","highlightedNode","normalization","cursor","deleteNormalization","Entity_RenderStates","startRelationMode","setNormalizationMode","unselectRegion","deleteRegion","normalizationMode","marginTop","marginBottom","onSubmit","setNormalization","normInput","input","setNormInput","placeholder","htmlType","marginRight","Entity","Entities","Relations","Segment","oneOf","arr","types","union","dispatcher","sn","find","val","getModelByTag","Types","unionArray","maybeNull","array","allModelsTypes","modelsArr","results","isType","nt","getParentOfTypeString","parent","getParent","Array","isArray","_loop","v","_ret","TagAttrs","optional","string","margin","Model","identifier","ViewModel","compose","HtxView","addTag","variableNotation","variable","_index","is","runTemplate","options","re","reExp","code","add","line","js","index","Function","console","error","message","ProcessAttrsMixin","actions","updateLocalValue","dataObj","auth","enable","to","getSecureResource","TableModel","HtxTable","dataSource","k","table","columns","dataIndex","size","number","underline","boolean","HeaderModel","HtxHeader","typography","Title","level","fromStateJSON","choices","names","get","from_name","HyperTextActions","HyperTextModel","HtxHyperTextView","dangerouslySetInnerHTML","__html","DialogView","hint","selectedStyle","bg","block_selected","maxWidth","Replica","DialogActions","DialogModel","HtxDialogView","empty","ind","Dialog_DialogView","flexFlow","maxHeight","overflowY","paddingRight","dashed","zoom","volume","speed","playing","wsCreated","ws","_ws","handlePlay","AudioHOCModel","AudioControls","justifyContent","playPause","formatTimeCallback","pxPerSec","Number","minutes","secondsStr","round","timeInterval","primaryLabelInterval","secondaryLabelInterval","Waveform","_this","possibleConstructorReturn","getPrototypeOf","call","onChangeZoom","wavesurfer","onChangeVolume","setVolume","onChangeSpeed","setPlaybackRate","src","pos","colors","waveColor","progressColor","$el","ReactDOM","findDOMNode","$waveform","querySelector","wavesurferConfigure","backend","plugins","RegionsPlugin","dragSelection","slop","TimelinePlugin","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","CursorPlugin","showTime","WaveSurfer","load","on","reg","_region","onMouseLeave","addRegion","selectedregionbg","onUpdateEnd","slider","oninput","onCreate","onLoad","_this3","row","es_col","span","input_number","min","max","es_slider","step","range","named","AudioModel","HtxAudioView","Waveform_Waveform","Audio_Controls","HtxAudio","RegionsMixin","highlighted","setHighlightedNode","relationMode","stopRelationMode","onClickRegion","addRelation","deleteNodeRelation","destroyRegion","setHighlight","NormalizationMixin","alias","hotkey","showalias","aliasstyle","selectedcolor","toggleSelected","selectedLabel","finishCurrentObject","shouldBeUnselected","markSelected","onHotKey","LabelModel","HtxLabelView","labelStyle","backgroundColor","SelectedModelMixin","selectedLabels","isSelected","joinstr","_type","custom","Modal","warning","success","info","Infomodal","LabelMixin","getSelectedColor","sel","activePolygon","closePoly","beforeSend","objectType","findedObj","InfoModal","toname","choice","enumeration","showinline","selectionstyle","ModelAttrs","toStateJSON","to_name","LabelsModel","HtxLabels","alignItems","maxRating","defaultValue","rating","handleRate","increaseValue","RatingModel","HtxRating","iconSize","rate","character","fontSize","count","AudioPlusModel","buildTree","source","_ws_region","border","beforeDestroy","remove","AudioRegionModel","regs","hasStates","toNames","activeStates","findRegion","m","setRangeValue","rangeValue","playBackRate","ws_region","clonedStates","find_r","regionbg","HtxAudioPlus","fillcolor","strokeWidth","strokeColor","canrotate","RectangleModel","Composition","RectangleLabelsModel","HtxRectangleLabels","relativeX","relativeY","relativeWidth","relativeHeight","_start_x","_start_y","rotation","fill","wp","hp","sw","sh","coordstype","supportsTransform","ImageModel","afterCreate","setSelected","coordsInside","rx","ry","rw","rh","getCurrentCoordinates","setPosition","stageWidth","stageHeight","setScale","addState","setFill","updateImageSize","fromEl","RectRegionModel","HtxRectangle","ReactKonva","stroke","strokeScaleEnabled","shadowBlur","onTransformEnd","t","getAttr","onDragEnd","dragBoundFunc","_getParent","stage","stageRef","draggable","PolygonPoint","init_x","init_y","isMouseOverStartPoint","movePoint","_movePoint","closeStartPoint","mouseOverStartPoint","handleMouseOverStartPoint","closed","points","startPoint","setX","setY","scale","small","medium","large","setMouseOverStartPoint","handleMouseOutStartPoint","PolygonPointView","startPointAttr","hitStrokeWidth","strokecolor","primary","dragOpts","onDragMove","assign","radius","dragOnTop","strokewidth","pointsize","pointstyle","PolygonModel","PolygonLabelsModel","HtxPolygonLabels","fromName","handleMouseMove","flattenedPoints","_e$evt","evt","point","getAnchorPoint","cursorX","offsetX","cursorY","offsetY","zoomScale","_ref7","group","layer","getHoverAnchor","_ref6","hoverAnchor","Konva","Circle","draw","createHoverAnchor","duration","moveHoverAnchor","currentTarget","getLayer","handleMouseLeave","removeHoverAnchor","handleLineClick","_ref3","insertIdx","cancelBubble","_e$evt2","insertPoint","addPoint","_addPoint","splice","canClose","p1","p2","setActivePolygon","deleteSelectedShape","detach","destroy","_self$parent","naturalWidth","naturalHeight","perc_w","perc_h","perc_points","PolygonRegionModel","_ref4","_flattenedPoints","slicedToArray","point1X","point1Y","point2X","point2Y","getFlattenedPoints","_ref5","findOne","_ref8","HtxPolygon","_ref9","onDragStart","setDragMode","lineJoin","idx","idx1","idx2","_ref10","onMouseMove","renderLine","renderLines","_ref11","renderCircle","renderCircles","KeyPointModel","keypointlabels","l","label","KeyPointLabelsModel","HtxKeyPointLabels","from","KeyPointRegionModel","HtxKeyPoint","wwidth","wheight","onChangedPosition","TransformerComponent","checkNode","transformer","getStage","selectedShape","batchDraw","selectedNode","attachTo","resizeEnabled","keepRatio","rotateEnabled","boundBoxFunc","oldBox","newBox","anchorSize","ref","_Component","ImageControls","inherits","createClass","brightnessControl","vertical","tipFormatter","updateBrightness","zoomControls","event","handleZoom","brightness","ImageGrid","nodeSize","grid","gridSize","toConsumableArray","_","col","n","gridColor","ImageView","handleOnClick","onImageClick","handleMouseUp","freezeHistory","mode","setMode","minSize","currentShape","detachActiveShape","addShape","zoomingPositionX","zoomingPositionY","updateDraw","setPointerPosition","handleMouseOver","handleStageMouseDown","controlButtonType","startDraw","setBrightnessGrade","ctrlKey","mousePointTo","newScale","newPos","scaleBy","parseFloat","zoomby","oldScale","getPointerPosition","deltaY","negativezoom","setZoom","position","updateDimensions","bind","assertThisInitialized","cursorPositionY","tension","dash","cursorPositionX","onResizeSize","offsetWidth","offsetHeight","addEventListener","removeEventListener","_this$props","divStyle","overflow","imgStyle","maxwidth","transformOrigin","brightnessGrade","translate","resize","updateIE","alt","setStageRef","top","left","onDblClick","handleDblClick","onMouseDown","onMouseUp","onWheel","sizeUpdated","ImageGrid_ImageGrid","shapes","activeShape","ImageTransformer_TransformerComponent","controlButton","ImageControls_ImageControls","showmousepos","IMAGE_CONSTANTS","integer","initialWidth","initialHeight","safeReference","returnedControl","freeze","flow","req","fetchAuth","t0","log","requestToResource","blob","URL","createObjectURL","_ev$target","userResize","poly","detachActivePolygon","deleteActivePolygon","removeShape","rect","_addRect","noadd","lookupStates","_reverseCoordinates","r1","r2","d","r1X","r1Y","r2X","r2Y","abs","x1","y1","x2","y2","reverseCoordinates","fun","dispmap","addPolyEv","_addKeyPointEv","setLocalUpdate","_addKeyPoint","kp","_addRectEv","wx","wy","localStates","dragMode","_addPoly","stateFlag","addPolygonObject","newPolygon","polygonID","polygonOpacity","polygonStrokeWidth","shapeModel","rectanglelabels","polygonlabels","HtxImage","Range","TextNode","data-position","overlap","keyNode","HtxTextNode","highlightStyle","charIndex","getRangeKey","getKey","getStyle","overlapItem","includes","reduceRight","TextNode_TextNode","UrlNode","wordWrap","EmojiNode","TextHighlight","dismissMouseUp","ranges","onMouseOverHighlightedWord","nl","char","arrOverlap","TextHighlight_EmojiNode","TextHighlight_UrlNode","enabled","getSelection","selectionContents","getRangeAt","cloneRange","cloneContents","virtualDiv","appendChild","elementsWithSup","getElementsByTagName","innerText","selection","createRange","startContainer","parentNode","dataset","endContainer","startContainerPosition","endContainerPosition","rangeObj","onTextHighlighted","mouseEvent","letterGroup","textCharIndex","rangeRenderer","isEmoji","getUrlNode","getEmojiNode","getLetterNode","lastRange","newText","getRange","emojiRegex","getNode","rangeCharIndex","getRanges","onMouseEnter","onDoubleClick","TextModel","highlightStates","TextRegionModel","RegionState","localState","selectedString","outline","data-hint","HtxTextRegion","labelColor","markStyle","borderRadius","regionStates","TextRegion_RegionState","hover","selelectwithoutlabel","hidden","adjustselection","selectionenabled","_addRegion","params","HtxTextView","components_TextHighlight_TextHighlight","adjustSelection","renderRegion","HtxText","typeOfChoice","ChoicesModel","isCheckbox","ChoiceModel","HtxChoice","cStyle","checked","es_radio","HtxChoices","layout","ListItemModel","setBG","setIdx","axis","lockaxis","elementvalue","elementtag","sortedhighlightcolor","setUpdate","vals","moveItems","oldIndex","newIndex","arrayMove","ranked","sort","weights","item_weight","ListModel","DragHandle","sortableHandle","isMobileDevice","orientation","navigator","userAgent","SortableText","SortableElement","classNames","image","audio","userSelect","SortableList","SortableContainer","celled","HtxListView","onSortEnd","HtxList","RankerItemModel","sortable","RankerModel","Ranker_DragHandle","Ranker_SortableText","HtxRankerView","Ranker_SortableList","HtxRanker","hotkeyScope","onShortcut","ShortcutModel","HtxShortcutView","TextAreaModel","TextAreaRegionModel","HtxTextAreaRegion","es_alert","Input","allowSubmit","rows","showsubmitbutton","maxsubmissions","submissionsNum","showSubmit","num","setValue","addText","deleteText","HtxTextArea","showSubmitButton","App","es_result","spin","currentCompletion","currentPrediction","isLoading","renderLoader","noTask","renderNothingToLabel","labeledSuccess","renderSuccess","Settings","index_module","Panel","Segment_Segment","Controls","components_Completions_Completions","components_Predictions_Predictions","SideColumn","Debug","renderNoCompletion","Boolean","location","hostname","AuthStore","TaskStore","app","Utilities","ProjectStore","identifierNumber","UserStore","firstName","lastName","_hotkeys_map","keymaster","getScope","srcElement","tagName","setScope","Hotkey","addKey","scope","unbindAll","unbind","makeComb","combs","comb","hasOwnProperty","SettingsModel","enablePanelHotkeys","togglePanelHotkeys","TimeTraveller","frozen","undoIdx","targetPath","skipNextUndoState","createdIdx","isFrozen","frozenIdx","targetStore","snapshotDisposer","addUndoState","recorder","resolvePath","getEnv","onSnapshot","newIdx","set","applySnapshot","reference","HtxObjectModel","findRelations","nodesRelated","from_id","to_id","deserializeRelation","Normalization","normalizations","findNormalization","addNormalization","unshift","deleteNodeNormalization","unhighlightAll","loadedDate","leadTime","localUpdate","RelationStore","normalizationStore","NormalizationStore","RegionStore","reinitHistory","_updateServerState","sendUserGenerate","updatePersonalKey","_relationObj","cb","visitNode","flatten","flat","toFlatten","objCompletion","toModel","completions","_deleteCompletion","destroyCompletion","addCompletion","createdCompletion","selectedData","generateCompletion","apiCalls","addSavedCompletion","completionModel","config","created_ago","created_username","lead_time","addPrediction","prediction","predictionModel","model_version","addPredictionItem","createdPrediction","expert","API_URL","MAIN","TASKS","COMPLETIONS","CANCEL","PROJECTS","NEXT","EXPERT_INSRUCTIONS","Task","Project","interfaces","CompletionStore","User","debug","alert","post","loadTask","loadTaskAPI","loadedTask","Response","was_cancelled","comp","_context2","sendToServer","requestType","_callee2","responseCompletion","_context3","updateCompletion","submitCompletion","taskObject","loading","initializeStore","generatedCompletions","pred","itemOfCompletion","iC","External","onTaskLoad","onLabelStudioLoad","production","getData","mstTask","getState","rootElement","getElementById","innerHTML","configureApplication","Sentiment","tasks","getConfig","pathToConfig","datatype","enviroment","getExample","ProductionEnviroment","LabelStudio","AppStore","render","components_App_App","Htx","serviceWorker","ready","registration","unregister","rewrite"],"mappings":"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","file":"static/js/main.b0d402a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"node\":\"Node_node__2zfnl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Panel_container__k7Wtb\",\"block\":\"Panel_block__2FWic\",\"block__controls\":\"Panel_block__controls__126YS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Relations_block__y9p7x\",\"section\":\"Relations_section__1HWZV\",\"section__blocks\":\"Relations_section__blocks__psNZJ\",\"delete\":\"Relations_delete__3G9Dt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"ImageControls_block__hzmSd\",\"divider\":\"ImageControls_divider__2jOAH\",\"button\":\"ImageControls_button__3C9VA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"App_editor__AN5Ja\",\"menu\":\"App_menu__2VI0Y\",\"content\":\"App_content__JH5xC\",\"common\":\"App_common__3d2BY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Hint_main__2awbL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Entities_list__NZliB\",\"item\":\"Entities_item__FM8UT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"Waveform_progress__157rO\",\"wave\":\"Waveform_wave__25YPc\",\"menu\":\"Waveform_menu__dA-IM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Segment_block__QpaOX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"TextHighlight_block__2n_6E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"state\":\"TextRegion_state__175iM\"};","module.exports = __webpack_public_path__ + \"static/media/config.5bb63d8f.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.c5233796.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.3c2fe907.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.0e2a1e7f.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.2a6054fe.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.be40f192.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.f4626f44.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.db6ac10b.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.bb22cd0c.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.836adaf9.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.1890026d.xml\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Completions_buttons__3p4Zf\",\"completion\":\"Completions_completion__SZ9JG\",\"completion_selected\":\"Completions_completion_selected__3ctXe\",\"title\":\"Completions_title__3R3jE\",\"titlespace\":\"Completions_titlespace__2RG9U\",\"itembtns\":\"Completions_itembtns__PQZy4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"play\":\"AudioPlus_play__2uIcT\"};","/**\n * Class for register View\n */\nclass _Registry {\n  constructor() {\n    this.tags = [];\n    this.models = {};\n    this.views = {};\n    this.views_models = {};\n  }\n\n  addTag(tag, model, view) {\n    this.tags.push(tag);\n    this.models[tag] = model;\n    this.views[tag] = view;\n    this.views_models[model.name] = view;\n  }\n\n  modelsArr() {\n    return Object.values(this.models);\n  }\n\n  getViewByModel(modelName) {\n    const view = this.views_models[modelName];\n\n    if (!view) throw new Error(\"No view for model: \" + modelName);\n\n    return view;\n  }\n\n  getViewByTag(tag) {\n    return this.views[tag];\n  }\n\n  /**\n   * Get model\n   * @param {*} tag\n   */\n  getModelByTag(tag) {\n    const model = this.models[tag];\n\n    if (!model) {\n      const models = Object.keys(this.models);\n      throw new Error(\"No model registered for tag: \" + tag + \"\\nAvailable models:\\n\\t\" + models.join(\"\\n\\t\"));\n    }\n\n    return model;\n  }\n}\n\nconst Registry = new _Registry();\n\nexport default Registry;\n","const handleResponse = res => {\n  if (res.status !== 200 || res.status !== 201) {\n    return res;\n  } else {\n    return res.json();\n  }\n};\n\nconst wrapperRequest = (url, method, headers, body) => {\n  return window\n    .fetch(url, {\n      method: method,\n      headers: headers,\n      credentials: \"include\",\n      body: body,\n    })\n    .then(response => handleResponse(response));\n};\n\nconst fetcher = url => {\n  return wrapperRequest(url, \"GET\", { Accept: \"application/json\" });\n};\n\nconst fetcherAuth = async (url, data) => {\n  const response = await window.fetch(url, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Basic \" + btoa(data.username + \":\" + data.password),\n    },\n    credentials: \"same-origin\",\n  });\n  return handleResponse(response);\n};\n\nconst poster = (url, body) => {\n  return wrapperRequest(url, \"POST\", { Accept: \"application/json\", \"Content-Type\": \"application/json\" }, body);\n};\n\nconst patch = (url, body) => {\n  return wrapperRequest(\n    url,\n    \"PATCH\",\n    {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body,\n  );\n};\n\nconst remover = (url, body) => {\n  return wrapperRequest(\n    url,\n    \"DELETE\",\n    {\n      \"Content-Type\": \"application/json\",\n    },\n    body,\n  );\n};\n\nexport default { fetcher, fetcherAuth, poster, remover, patch };\n","import nanoid from \"nanoid\";\n\n/**\n * Unique hash generator\n * @param {number} lgth\n */\nexport function guidGenerator(lgth) {\n  let uniqueID = nanoid(10);\n\n  if (lgth) {\n    uniqueID = nanoid(lgth);\n  }\n\n  return uniqueID;\n}\n","import { getType, getSnapshot } from \"mobx-state-tree\";\nimport { guidGenerator } from \"../utils/unique\";\n\n/**\n * TODO: refactor\n */\nexport { guidGenerator };\n\n/**\n * Helper function to detect HTX Component\n * @param {any} component\n * @param {string} name\n * @returns {boolean}\n */\nexport function isHtx(component, name) {\n  return typeof component.type === \"function\" && component.type.name === \"Htx\" + name;\n}\n\n/**\n * Clone node with new ID\n * @param {*} node\n */\nexport function cloneNode(node) {\n  const snapshot = getSnapshot(node);\n  const snapshotRandomId = getType(node).create({\n    ...snapshot,\n    id: guidGenerator(),\n  });\n  return snapshotRandomId;\n}\n\n/**\n *\n * @param {*} fromModel\n */\nexport function restoreNewsnapshot(fromModel) {\n  const snapshot = getSnapshot(fromModel);\n\n  /**\n   * Need to modify ID\n   */\n  const modifySnapshot = getType(fromModel).create({\n    ...snapshot,\n    id: guidGenerator(),\n  });\n\n  /**\n   * Update state\n   */\n  return modifySnapshot;\n}\n","import React from \"react\";\nimport { getType, getParentOfType } from \"mobx-state-tree\";\nimport { parseString } from \"xml2js\";\n\nimport Registry from \"./Registry\";\nimport { guidGenerator } from \"./Helpers\";\n\n/**\n * Clone React Tree\n * @param {*} items\n * @param {*} attrs\n */\nfunction cloneReactTree(items, attrs) {\n  let clone = null;\n  clone = function(children) {\n    const res = [];\n\n    React.Children.forEach(children, function(child) {\n      let el;\n\n      if (child.props) {\n        let moreProps = {};\n\n        if (typeof attrs === \"function\") {\n          moreProps = attrs(child);\n        } else if (typeof attrs === \"object\") {\n          moreProps = attrs;\n        }\n\n        el = React.cloneElement(child, moreProps, clone(child.props.children));\n      } else {\n        el = child;\n      }\n\n      res.push(el);\n    });\n\n    return res;\n  };\n\n  return clone(items);\n}\n\n/**\n * Function to convert CSS string to object\n * @param {string} style\n * @returns {object}\n */\nfunction cssConverter(style) {\n  let result = {},\n    attributes = style.split(\";\"),\n    firstIndexOfColon,\n    i,\n    key,\n    value;\n\n  for (i = 0; i < attributes.length; i++) {\n    firstIndexOfColon = attributes[i].indexOf(\":\");\n    key = attributes[i].substring(0, firstIndexOfColon);\n    value = attributes[i].substring(firstIndexOfColon + 1);\n\n    key = key.replace(/ /g, \"\");\n    if (key.length < 1) {\n      continue;\n    }\n\n    if (value[0] === \" \") {\n      value = value.substring(1);\n    }\n\n    if (value[value.length - 1] === \" \") {\n      value = value.substring(0, value.length - 1);\n    }\n\n    var ukey = key.replace(/(-.)/g, x => x[1].toUpperCase());\n\n    result[ukey] = value;\n  }\n\n  return result;\n}\n\n/**\n *\n * @param {*} attrs\n */\nfunction attrsToProps(attrs) {\n  const props = {};\n\n  if (!attrs) return props;\n\n  for (let item of Object.keys(attrs)) {\n    /**\n     * Convert node of Tree to boolean value\n     */\n    if (item !== \"value\" && (attrs[item] === \"true\" || attrs[item] === \"false\")) {\n      props[item.toLowerCase()] = JSON.parse(attrs[item]);\n    } else {\n      props[item.toLowerCase()] = attrs[item];\n    }\n  }\n\n  return props;\n}\n\n/**\n *\n * @param {*} html\n */\nfunction treeToModel(html) {\n  /**\n   * Remove all line breaks from a string\n   * @param {string}\n   * @returns {string}\n   */\n  function removeAllBreaks(data) {\n    return data.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n  }\n\n  /**\n   * Edit all self closing tags from XML View\n   * TODO: Fix bug: if the value of <Choice /> or another tag contains \"/>\" function return error\n   * @param {string} data\n   * @returns {string}\n   */\n  function editSelfClosingTags(data) {\n    let split = data.split(\"/>\");\n    let newData = \"\";\n\n    for (let i = 0; i < split.length - 1; i++) {\n      let edsplit = split[i].split(\"<\");\n      newData += split[i] + \"></\" + edsplit[edsplit.length - 1].split(\" \")[0] + \">\";\n    }\n\n    return newData + split[split.length - 1];\n  }\n\n  /**\n   * Generate new node\n   * @param {object} node\n   */\n  function addNode(node) {\n    if (!node.$$) return null;\n\n    const res = [];\n\n    for (let chld of node.$$) {\n      if (chld[\"#name\"] !== \"__text__\") {\n        const data = buildData(chld);\n        const children = addNode(chld);\n\n        if (children) {\n          if (typeof children === \"string\") data[\"value\"] = children;\n          else data.children = children;\n        }\n\n        res.push(data);\n      }\n    }\n\n    return res.length === 0 ? null : res;\n  }\n\n  /**\n   * Generate obj with main data\n   */\n  function buildData(node) {\n    const data = attrsToProps(node.$);\n\n    /**\n     * Generation id of node\n     */\n    data[\"id\"] = guidGenerator();\n\n    /**\n     * Build type name\n     */\n    data[\"type\"] = node[\"#name\"].toLowerCase();\n\n    return data;\n  }\n\n  const htmlWithotBreaks = removeAllBreaks(html);\n  const htmlSelfClosingTags = editSelfClosingTags(htmlWithotBreaks);\n  let document;\n\n  // it's actually a sync function, but there is no sync interface\n  // because of some backwards compat\n  parseString(\n    htmlSelfClosingTags,\n    {\n      explicitChildren: true,\n      preserveChildrenOrder: true,\n      charsAsChildren: true,\n    },\n    function(err, result) {\n      document = result;\n    },\n  );\n\n  const root = buildData(Object.values(document)[0]);\n  root.children = addNode(Object.values(document)[0]);\n\n  return root;\n}\n\n/**\n * Render items of tree\n * @param {*} el\n */\nfunction renderItem(el) {\n  const View = Registry.getViewByModel(getType(el).name);\n\n  if (!View) {\n    throw new Error(\"No view for model:\" + getType(el).name);\n  }\n\n  return <View key={guidGenerator()} item={el} />;\n}\n\n/**\n *\n * @param {*} item\n */\nfunction renderChildren(item) {\n  if (item && item.children && item.children.length) {\n    return item.children.map(el => {\n      return renderItem(el);\n    });\n  } else {\n    return null;\n  }\n}\n\n/**\n *\n * @param {*} name\n * @param {*} tree\n */\nfunction findInterface(name, tree) {\n  let fn;\n  fn = function(node) {\n    if (getType(node).name === name) return node;\n\n    if (node.children) {\n      for (let chld of node.children) {\n        const res = fn(chld);\n        if (res) return res;\n      }\n    }\n  };\n\n  return fn(tree);\n}\n\n/**\n *\n * @param {*} obj\n * @param {*} classes\n */\nfunction findParentOfType(obj, classes) {\n  for (let c of classes) {\n    try {\n      const p = getParentOfType(obj, c);\n      if (p) return p;\n    } catch (err) {}\n  }\n\n  return null;\n}\n\n/**\n *\n * @param {*} obj\n * @param {*} classes\n */\nfunction filterChildrenOfType(obj, classes) {\n  const res = [];\n\n  let fn;\n  fn = function(node) {\n    for (let c of classes) {\n      if (getType(node).name === c) res.push(node);\n    }\n\n    if (node.children) {\n      for (let chld of node.children) {\n        fn(chld);\n      }\n    }\n  };\n\n  fn(obj);\n\n  return res;\n}\n\nexport default {\n  cloneReactTree,\n  renderItem,\n  renderChildren,\n  treeToModel,\n  findInterface,\n  findParentOfType,\n  filterChildrenOfType,\n  cssConverter,\n};\n","/**\n * Internal helper to check if parameter is a string\n * @param {*} value\n * @returns {boolean}\n */\nexport const isString = value => {\n  return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Internal helper to check if string is empty\n * @param {*} value\n * @returns {boolean}\n */\nexport const isStringEmpty = value => {\n  if (!isString(value)) {\n    return false;\n  }\n\n  return value.length === 0;\n};\n\n/**\n * Internal helper to check if string is JSON\n * @param {string} value\n * @returns {boolean}\n */\nexport const isStringJSON = value => {\n  if (isString(value)) {\n    try {\n      JSON.parse(value);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Check if text is url\n * @param {*} i\n * @param {*} text\n */\nexport function getUrl(i, text) {\n  const stringToTest = text.slice(i);\n  const myRegexp = /^(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/g;\n  const match = myRegexp.exec(stringToTest);\n\n  return match && match.length ? match[1] : \"\";\n}\n\n/**\n * Convert MS to Time String\n * Example: 2000 -> 00:00:02\n * @param {number} ms\n * @returns {string}\n */\nexport function toTimeString(ms) {\n  if (typeof ms === \"number\") {\n    return new Date(ms).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/)[0];\n  }\n}\n","let colorNames = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgrey: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370d8\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#d87093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\",\n};\n\n/**\n * Convert HEX to RGBA\n * @param {string} hex 3 digits + # or 6 digits + #\n * @param {number?} opacity From 0 to 1\n */\nexport function hexToRGBA(hex, opacity) {\n  let r = 0,\n    g = 0,\n    b = 0;\n\n  let a = 0.3;\n\n  if (opacity && typeof parseInt(opacity) === \"number\") {\n    a = opacity;\n  }\n\n  /**\n   * If HEX = 3\n   */\n  if (hex && hex.length === 4) {\n    r = \"0x\" + hex[1] + hex[1];\n    g = \"0x\" + hex[2] + hex[2];\n    b = \"0x\" + hex[3] + hex[3];\n\n    /**\n     * If HEX = 6\n     */\n  } else if (hex && hex.length === 7) {\n    r = \"0x\" + hex[1] + hex[2];\n    g = \"0x\" + hex[3] + hex[4];\n    b = \"0x\" + hex[5] + hex[6];\n  }\n\n  const result = `rgba(${+r}, ${+g}, ${+b}, ${a})`;\n\n  return result;\n}\n\n/**\n * Color to RGBA\n * @param {*} value\n */\nexport function colorToRGBA(value, alpha) {\n  if (typeof value === \"string\" && typeof colorNames[value.toLowerCase()] !== undefined) {\n    const hexColor = colorNames[value.toLowerCase()];\n    return hexToRGBA(hexColor, alpha);\n  }\n\n  return value;\n}\n\n/**\n * Convert color to RGB(A)\n * @param {*} value\n * @param {number} alpha\n */\nexport function convertToRGBA(value, alpha) {\n  if (value.charAt(0) === \"#\") {\n    return hexToRGBA(value, alpha);\n  } else {\n    return colorToRGBA(value, alpha);\n  }\n}\n\n/**\n * Convert string to HEX color\n * @param {string} str\n */\nexport function stringToColor(str) {\n  let hash = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = \"#\";\n\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xff;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\n/**\n * Change alpha channel of RGBA\n * @param {string} rgba\n * @param {number} alpha from 0 to 1\n */\nexport function rgbaChangeAlpha(rgba, alpha) {\n  return rgba.replace(/[\\d\\.]+\\)$/g, `${alpha})`);\n}\n","function checkISO(value) {\n  let regExpISO = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/;\n\n  return regExpISO.test(value);\n}\n\n/**\n * Helper function to convert ms -> HHMMSS\n * @param {number} ms\n * @returns {string}\n */\nexport function msToHMS(ms) {\n  // 1- Convert to seconds:\n  var seconds = ms / 1000;\n  // 2- Extract hours:\n  var hours = parseInt(seconds / 3600); // 3,600 seconds in 1 hour\n  seconds = seconds % 3600; // seconds remaining after extracting hours\n  // 3- Extract minutes:\n  var minutes = parseInt(seconds / 60); // 60 seconds in 1 minute\n  // 4- Keep only seconds not extracted to minutes:\n  seconds = Math.floor(seconds); // % 60;\n\n  return hours + \":\" + minutes + \":\" + seconds;\n}\n\n/**\n * Helper function to pretty date\n */\nexport function prettyDate(time) {\n  if (typeof time !== \"string\" && !checkISO(time)) return;\n\n  let date = new Date((time || \"\").replace(/-/g, \"/\").replace(/[TZ]/g, \" \")),\n    diff = (new Date().getTime() - date.getTime()) / 1000,\n    day_diff = Math.floor(diff / 86400);\n\n  if (isNaN(day_diff) || day_diff < 0) return;\n\n  return (\n    (day_diff === 0 &&\n      ((diff < 60 && \"just now\") ||\n        (diff < 120 && \"1 minute ago\") ||\n        (diff < 3600 && Math.floor(diff / 60) + \" minutes ago\") ||\n        (diff < 7200 && \"1 hour ago\") ||\n        (diff < 86400 && Math.floor(diff / 3600) + \" hours ago\"))) ||\n    (day_diff === 1 && \"Yesterday\") ||\n    (day_diff < 7 && day_diff + \" days ago\") ||\n    (day_diff < 31 && Math.ceil(day_diff / 7) + \" weeks ago\") ||\n    day_diff + \" days ago\"\n  );\n}\n\n/**\n * Helper function to get current timezone\n */\nexport function currentISODate() {\n  let tzOffest = new Date().getTimezoneOffset() * 60000;\n  let localISOTime = new Date(Date.now() - tzOffest).toISOString().slice(0, -1);\n\n  return localISOTime;\n}\n","import * as Checkers from \"./utilities\";\nimport * as Colors from \"./colors\";\nimport * as UDate from \"./date\";\nimport { guidGenerator } from \"./unique\";\nimport { debounce } from \"./debounce\";\nimport { styleToProp } from \"./styles\";\n\nexport default { Checkers, Colors, UDate, guidGenerator, debounce, styleToProp };\n","/**\n * Returns a function, that, as long as it continues to be invoked,\n * will not be triggered. The function will be called after it\n * stops being called for N milliseconds. If `immediate` is passed,\n * trigger the function on the leading edge, instead of the trailing.\n *\n * @param {function} func\n * @param {number} wait\n * @param {boolean} immediate\n */\nexport function debounce(func, wait, immediate) {\n  let timeout;\n\n  return function() {\n    const context = this,\n      args = arguments;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n","/**\n * Parses a string of inline styles into a JavaScript object with casing for React\n *\n * @see TemplateEngine via MIT Licensed https://github.com/NervJS/taro/blob/master/packages/taro-components-rn/src/utils/index.ts\n *\n * @param {string} styles\n * @returns {Object}\n */\nexport function styleToProp(styles) {\n  if (!styles) return null;\n  return styles\n    .split(\";\")\n    .filter(style => style.split(\":\")[0] && style.split(\":\")[1])\n    .map(style => [\n      style\n        .split(\":\")[0]\n        .trim()\n        .replace(/-./g, c => c.substr(1).toUpperCase()),\n      style\n        .split(\":\")\n        .slice(1)\n        .join(\":\")\n        .trim(),\n    ])\n    .reduce(\n      (styleObj, style) => ({\n        ...styleObj,\n        [style[0]]: style[1],\n      }),\n      {},\n    );\n}\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Card, Button, Icon, Tooltip, Badge, List } from \"antd\";\n\nimport Utils from \"../../utils\";\nimport styles from \"./Completions.module.scss\";\n\nconst Completion = observer(({ item, store }) => {\n  let removeHoney = () => (\n    <Button\n      type=\"primary\"\n      onClick={ev => {\n        ev.preventDefault();\n        item.removeHoneypot();\n      }}\n    >\n      <Icon type=\"star\" />\n    </Button>\n  );\n\n  let setHoney = () => (\n    <Button\n      type=\"primary\"\n      ghost={true}\n      onClick={ev => {\n        ev.preventDefault();\n        item.setHoneypot();\n      }}\n    >\n      <Icon type=\"star\" />\n    </Button>\n  );\n\n  /**\n   * Default badge for saved completions\n   */\n  let badge = <Badge status=\"default\" />;\n\n  /**\n   *\n   */\n  let completionID;\n\n  /**\n   * Title of card\n   */\n  if (item.userGenerate && !item.sentUserGenerate) {\n    completionID = <span className={styles.title}>New completion</span>;\n  } else {\n    if (item.pk) {\n      completionID = <span className={styles.title}>ID {item.pk}</span>;\n    } else if (item.id) {\n      completionID = <span className={styles.title}>ID {item.id}</span>;\n    }\n  }\n\n  /**\n   * Badge for processing of user generate completion\n   */\n  if (item.userGenerate) {\n    badge = <Badge status=\"processing\" />;\n  }\n\n  /**\n   * Badge for complete of user generate completion\n   */\n  if (item.userGenerate && item.sentUserGenerate) {\n    badge = <Badge status=\"success\" />;\n  }\n\n  return (\n    <List.Item\n      key={item.id}\n      className={item.selected ? `${styles.completion} ${styles.completion_selected}` : styles.completion}\n      onClick={ev => {\n        !item.selected && store.completionStore.selectCompletion(item.id);\n      }}\n    >\n      <div className={styles.title}>\n        {badge}\n        {completionID}\n      </div>\n      Created\n      <i>{item.createdAgo ? ` ${item.createdAgo} ago` : ` ${Utils.UDate.prettyDate(item.createdDate)}`}</i>\n      {item.createdBy ? ` by ${item.createdBy}` : null}\n      {item.selected && (\n        <div className={styles.buttons}>\n          {item.honeypot ? removeHoney() : setHoney()}\n\n          <Tooltip placement=\"topLeft\" title=\"Delete selected completion\">\n            <Button\n              type=\"danger\"\n              onClick={ev => {\n                ev.preventDefault();\n                item.store.deleteCompletion(item);\n              }}\n            >\n              <Icon type=\"delete\" />\n            </Button>\n          </Tooltip>\n        </div>\n      )}\n    </List.Item>\n  );\n});\n\nclass Completions extends Component {\n  render() {\n    const { store } = this.props;\n\n    let content = [];\n    let title = (\n      <div className={styles.title + \" \" + styles.titlespace}>\n        <h3>Completions</h3>\n        <Tooltip placement=\"topLeft\" title=\"Add a new completion\">\n          <Button\n            shape={\"circle\"}\n            onClick={ev => {\n              ev.preventDefault();\n              store.completionStore.addUserCompletion();\n            }}\n          >\n            <Icon type=\"plus\" />\n          </Button>\n        </Tooltip>\n      </div>\n    );\n\n    store.completionStore.savedCompletions.forEach(c => {\n      if (c) {\n        content.push(<Completion key={c.id} item={c} store={store} />);\n      }\n    });\n\n    return (\n      <Card title={title} bodyStyle={{ padding: \"0\", paddingTop: \"1px\" }}>\n        <List>{store.completionStore.savedCompletions ? content : <p>No completions submitted yet</p>}</List>\n      </Card>\n    );\n  }\n}\n\nexport default observer(Completions);\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Button, Card, Icon, List, Tooltip } from \"antd\";\nimport Utils from \"../../utils\";\nimport styles from \"../Completions/Completions.module.scss\";\n\nconst Prediction = observer(({ item, store }) => {\n  return (\n    <List.Item\n      key={item.id}\n      className={item.selected ? `${styles.completion} ${styles.completion_selected}` : styles.completion}\n      onClick={ev => {\n        !item.selected && store.completionStore.selectPrediction(item.id);\n      }}\n    >\n      <div className={styles.itembtns}>\n        <div>\n          <div className={styles.title}>{item.createdBy ? `Model (${item.createdBy})` : null}</div>\n          Created\n          <i>{item.createdAgo ? ` ${item.createdAgo} ago` : ` ${Utils.UDate.prettyDate(item.createdDate)}`}</i>\n        </div>\n        <div>\n          {item.selected && (\n            <Tooltip placement=\"topLeft\" title=\"Add a new completion based on this prediction\">\n              <Button\n                onClick={ev => {\n                  ev.preventDefault();\n                  const c = store.completionStore.addCompletionFromPrediction();\n\n                  // this is here because otherwise React doesn't re-render the change in the tree\n                  window.setTimeout(function() {\n                    store.completionStore.selectCompletion(c.id);\n                  }, 100);\n                }}\n              >\n                <Icon type=\"copy\" />\n              </Button>\n            </Tooltip>\n          )}\n        </div>\n      </div>\n    </List.Item>\n  );\n});\n\nclass Predictions extends Component {\n  render() {\n    const { store } = this.props;\n\n    let content = [];\n\n    store.completionStore.predictions &&\n      store.completionStore.predictions.map(predict => {\n        if (predict) {\n          content.push(<Prediction key={predict.pk} item={predict} store={store} />);\n        }\n      });\n\n    return (\n      <Card title=\"Predictions\" bodyStyle={{ padding: \"0\" }}>\n        <List>\n          {store.completionStore.predictions && store.completionStore.predictions.length ? (\n            content\n          ) : (\n            <List.Item>\n              <div style={{ padding: \"0 12px\" }}>No predictions</div>\n            </List.Item>\n          )}\n        </List>\n      </Card>\n    );\n  }\n}\n\nexport default observer(Predictions);\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport styles from \"./Hint.module.scss\";\n\n/**\n * Hint Component\n * @param {object} style\n * @param {ant} children\n */\nexport default class Hint extends Component {\n  render() {\n    let style;\n    let localClass = `${styles.main}`;\n\n    if (this.props.style) style = this.props.style;\n\n    if (this.props.className) {\n      localClass = `${styles.main} ${this.props.className}`;\n    }\n\n    return (\n      <sup data-copy={this.props.copy} className={localClass} style={style}>\n        {this.props.children}\n      </sup>\n    );\n  }\n}\n\nHint.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  copy: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object]),\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button } from \"antd\";\n\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Controls.module.scss\";\n\nexport default inject(\"store\")(\n  observer(({ store }) => {\n    /**\n     * Buttons of Controls\n     */\n    let buttons = {\n      skip: \"\",\n      update: \"\",\n      submit: \"\",\n    };\n\n    const { userGenerate, update, sentUserGenerate } = store.completionStore.selected;\n    const { enableHotkeys, enableTooltips } = store.settings;\n\n    /**\n     * Task information\n     */\n    let taskInformation;\n    if (store.task) {\n      taskInformation = <h4 className={styles.task}>Task ID: {store.task.id}</h4>;\n    }\n\n    /**\n     * Hotkeys\n     */\n    if (enableHotkeys && enableTooltips) {\n      buttons.submit = <Hint> [ Ctrl+Enter ]</Hint>;\n      buttons.skip = <Hint> [ Ctrl+Space ]</Hint>;\n      buttons.update = <Hint> [ Alt+Enter] </Hint>;\n    }\n\n    let skipButton;\n    let updateButton;\n    let submitButton;\n\n    /**\n     * Check for Predict Menu\n     */\n    if (!store.completionStore.predictSelect || store.explore) {\n      if (store.hasInterface(\"skip\")) {\n        skipButton = (\n          <Button type=\"ghost\" onClick={store.skipTask} className={styles.skip}>\n            Skip {buttons.skip}\n          </Button>\n        );\n      }\n\n      if ((userGenerate && !sentUserGenerate) || (store.explore && !userGenerate && store.hasInterface(\"submit\"))) {\n        submitButton = (\n          <Button type=\"primary\" icon=\"check\" onClick={store.sendTask} className={styles.submit}>\n            Submit {buttons.submit}\n          </Button>\n        );\n      }\n\n      if ((userGenerate && sentUserGenerate) || (!userGenerate && store.hasInterface(\"update\"))) {\n        updateButton = (\n          <Button type=\"primary\" icon=\"rollback\" onClick={store.updateTask}>\n            Update {buttons.update}\n          </Button>\n        );\n      }\n    }\n\n    let content = (\n      <div className={styles.block}>\n        <div className={styles.wrapper}>\n          <div className={styles.container}>\n            {skipButton}\n            {updateButton}\n            {submitButton}\n          </div>\n          {taskInformation}\n        </div>\n      </div>\n    );\n\n    return (!store.completionStore.predictSelect || store.explore) && content;\n  }),\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Button } from \"antd\";\n\nimport styles from \"./Panel.module.scss\";\nimport Hint from \"../Hint/Hint\";\n\n/**\n * Panel component with buttons:\n * Undo\n * Redo\n * Reset\n * Show Instructions\n * Settings\n */\nexport default observer(({ store }) => {\n  const { history } = store.completionStore.selected;\n\n  return (\n    <div className={styles.container}>\n      <div className={`${styles.block} ${styles.block__controls}`}>\n        <Button\n          type=\"ghost\"\n          icon=\"undo\"\n          onClick={ev => {\n            history && history.canUndo && history.undo();\n            ev.preventDefault();\n          }}\n        >\n          Undo\n          {store.settings.enableHotkeys && store.settings.enableTooltips && <Hint>[ Ctrl+z ]</Hint>}\n        </Button>\n        <Button\n          type=\"ghost\"\n          icon=\"redo\"\n          onClick={ev => {\n            history && history.canRedo && history.redo();\n            ev.preventDefault();\n          }}\n        >\n          Redo\n        </Button>\n        <Button\n          type=\"ghost\"\n          icon=\"rest\"\n          onClick={ev => {\n            history && history.reset();\n          }}\n        >\n          Reset\n        </Button>\n        {store.setPrelabeling && (\n          <Button\n            style={{ display: \"none\" }}\n            onClick={ev => {\n              store.resetPrelabeling();\n            }}\n          >\n            {\" \"}\n            Reset Prelabeling\n          </Button>\n        )}\n      </div>\n\n      <div className={styles.block}>\n        {store.description && store.showingDescription && (\n          <Button\n            type=\"primary\"\n            onClick={ev => {\n              store.toggleDescription();\n            }}\n          >\n            Hide Instructions\n          </Button>\n        )}\n        {store.description && !store.showingDescription && (\n          <Button\n            type=\"primary\"\n            onClick={ev => {\n              store.toggleDescription();\n            }}\n          >\n            Show Instructions\n          </Button>\n        )}\n\n        <Button\n          type=\"dashed\"\n          icon=\"setting\"\n          onClick={ev => {\n            store.toggleSettings();\n            ev.preventDefault();\n            return false;\n          }}\n        />\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Modal, Checkbox, Tabs } from \"antd\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(({ store }) => {\n  return (\n    <Modal\n      visible={store.showingSettings}\n      title=\"Settings\"\n      bodyStyle={{ paddingTop: \"0\" }}\n      footer=\"\"\n      onCancel={store.toggleSettings}\n    >\n      <Tabs defaultActiveKey=\"1\">\n        <Tabs.TabPane tab=\"Hotkeys\" key=\"1\">\n          <Checkbox\n            value=\"Enable labeling hotkeys\"\n            defaultChecked={store.settings.enableHotkeys}\n            onChange={() => {\n              store.settings.toggleHotkeys();\n            }}\n          >\n            Enable labeling hotkeys\n          </Checkbox>\n          <br />\n          <Checkbox\n            value=\"Show tooltips\"\n            defaultChecked={store.settings.enableTooltips}\n            onChange={() => {\n              store.settings.toggleTooltips();\n            }}\n          >\n            Show tooltips\n          </Checkbox>\n        </Tabs.TabPane>\n      </Tabs>\n    </Modal>\n  );\n});\n","import React, { Component } from \"react\";\nimport { Form, Button } from \"antd\";\n\nimport { observer } from \"mobx-react\";\n\nclass DebugComponent extends Component {\n  state = { res: null };\n\n  render() {\n    const self = this;\n    const { store } = this.props;\n    const completion = store.completionStore.selected;\n\n    return (\n      <div>\n        <br />\n        <h2>Debug</h2>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: JSON.stringify(store.completionStore.selected.toJSON()) });\n          }}\n        >\n          Serialize whole tree\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: JSON.stringify(store.completionStore.selected.serializeCompletion()) });\n          }}\n        >\n          Seriealize results tree\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            if (self.state.res) completion.deserializeCompletion(JSON.parse(self.state.res));\n          }}\n        >\n          Load Serialized Results\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            const c = store.completionStore.addInitialCompletion();\n            store.completionStore.selectCompletion(c.id);\n\n            if (self.state.res) c.deserializeCompletion(JSON.parse(self.state.res));\n            // this.setState.res;\n          }}\n        >\n          Load As New Completion\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: store.task.data });\n          }}\n        >\n          Task data\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            // this.setState.res;\n            const data = JSON.parse(self.state.res);\n            const task = {\n              id: data[\"id\"],\n              project: 2,\n              data: JSON.stringify(data),\n            };\n\n            store.resetState();\n            store.addTask(task);\n            store.addGeneratedCompletion(task);\n            store.markLoading(false);\n\n            if (store.completionStore.selected)\n              store.completionStore.selected.traverseTree(node => node.updateValue && node.updateValue(self));\n          }}\n        >\n          Simulate Loading Task\n        </Button>\n\n        <br />\n        <br />\n        <Form>\n          <Form.TextArea\n            value={this.state.res}\n            className=\"is-search\"\n            // label={item.label}\n            onChange={ev => {\n              this.setState({ res: ev.target.value });\n            }}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default observer(DebugComponent);\n","import React, { Component, Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { getType, getRoot } from \"mobx-state-tree\";\nimport { Icon } from \"antd\";\n\nimport styles from \"./Node.module.scss\";\n\nconst Node = observer(({ node }) => {\n  const click = ev => {\n    ev.preventDefault();\n    getRoot(node).completionStore.selected.regionStore.unselectAll();\n    node.selectRegion();\n\n    return false;\n  };\n\n  if (getType(node).name === \"TextRegionModel\") {\n    return (\n      <div>\n        <Icon type=\"font-colors\" />\n        Text &nbsp;\n        <span style={{ color: \"#5a5a5a\" }}>{node.text}</span>\n      </div>\n    );\n  }\n\n  if (getType(node).name === \"AudioRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"microphone icon\" />\n          Audio {node.start.toFixed(2)} - {node.end.toFixed(2)}\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"TextAreaRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"i cursor icon\" />\n          Input <span style={{ color: \"#5a5a5a\" }}>{node._value}</span>\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"RectRegionModel\") {\n    const w = node.width * node.scaleX;\n    const y = node.height * node.scaleY;\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"expand icon\" />\n          Rectangle {w.toFixed(2)} x {y.toFixed(2)}\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"PolygonRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"i object ungroup outline icon\" />\n          Polygon\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"KeyPointRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"i object bullseye icon\" />\n          KeyPoint\n        </a>\n      </p>\n    );\n  }\n});\n\nconst NodeMinimal = ({ node }) => {\n  if (getType(node).name === \"TextRegionModel\") {\n    return (\n      <Fragment>\n        <Icon type=\"font-colors\" /> Text\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"RectRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"expand icon\" />\n        Rectangle\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"AudioRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"microphone icon\" />\n        Audio\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"TextAreaRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i cursor icon\" />\n        Input\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"PolygonRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i object ungroup outline icon\" />\n        Polygon\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"KeyPointRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i object bullseye icon\" />\n        KeyPoint\n      </Fragment>\n    );\n  }\n};\n\nexport { Node, NodeMinimal };\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { isValidReference } from \"mobx-state-tree\";\nimport { Icon } from \"antd\";\n\nimport { NodeMinimal } from \"../Node/Node\";\nimport styles from \"./Relations.module.scss\";\n\n/**\n * Relation Component\n *\n * Shows the relationship between two selected items\n */\nconst Relation = ({ store, rl }) => {\n  if (!isValidReference(() => rl.node1) || !isValidReference(() => rl.node2)) {\n    return null;\n  }\n\n  return (\n    <div className={styles.block}>\n      <div\n        className={styles.section}\n        onMouseOver={() => {\n          rl.toggleHighlight();\n        }}\n        onMouseOut={() => {\n          rl.toggleHighlight();\n        }}\n      >\n        <div className={styles.section__blocks}>\n          <div>\n            <NodeMinimal node={rl.node1} />\n          </div>\n          <Icon type=\"arrow-right\" />\n          <div>\n            <NodeMinimal node={rl.node2} />\n          </div>\n        </div>\n      </div>\n      <a\n        href=\"#\"\n        className={styles.delete}\n        onClick={() => {\n          store.deleteRelation(rl);\n          return false;\n        }}\n      >\n        <Icon type=\"delete\" />\n      </a>\n    </div>\n  );\n};\n\nexport default observer(({ store }) => {\n  const completion = store.completionStore.selected;\n  const { relations } = completion.relationStore;\n\n  return (\n    <Fragment>\n      <h4>Relations ({relations.length})</h4>\n\n      {!relations.length && <p>No Relations added yet</p>}\n\n      {completion.relationStore.relations.map(rl => (\n        <Relation store={completion.relationStore} rl={rl} />\n      ))}\n    </Fragment>\n  );\n});\n","import React, { Component, Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Typography } from \"antd\";\n\nimport { Node, NodeMinimal } from \"../Node/Node\";\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Entities.module.scss\";\n\nexport default observer(({ store, regionStore }) => {\n  const { regions } = regionStore;\n\n  let buttonRemove = () => {\n    return (\n      <Button\n        type=\"link\"\n        style={{ paddingLeft: 0 }}\n        onClick={ev => {\n          store.completionStore.selected.deleteAllRegions();\n          ev.preventDefault();\n        }}\n      >\n        Remove all\n        {regions.length > 0 && store.settings.enableHotkeys && store.settings.enableTooltips && (\n          <Hint>[ Ctrl+bksp ]</Hint>\n        )}\n      </Button>\n    );\n  };\n\n  return (\n    <div>\n      <h4>Entities ({regions.length})</h4>\n      {regions.length > 0 && buttonRemove()}\n      {!regions.length && <p>No Entitied added yet</p>}\n      <ul className={styles.list}>\n        {regions.map(region => (\n          <li\n            key={region.id}\n            className={styles.item}\n            onMouseOver={() => {\n              region.toggleHightlight();\n            }}\n            onMouseOut={() => {\n              region.toggleHightlight();\n            }}\n          >\n            <Node node={region} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import React, { Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { getType } from \"mobx-state-tree\";\nimport { Form, Input, Icon, Button, Tag } from \"antd\";\n\nimport { Node, NodeMinimal } from \"../Node/Node\";\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Entity.module.scss\";\n\nconst templateElement = element => {\n  return (\n    <div key={element.pid} className={styles.labels}>\n      Labels:&nbsp;\n      {element.getSelectedNames().map(title => {\n        let bgColor = element.findLabel(title).background ? element.findLabel(title).background : \"#000000\";\n\n        return (\n          <Tag key={element.findLabel(title).id} color={bgColor} className={styles.tag}>\n            {title}\n          </Tag>\n        );\n      })}\n    </div>\n  );\n};\n\nconst RenderStates = ({ node }) => {\n  const _render = s => {\n    if (\n      getType(s).name === \"LabelsModel\" ||\n      getType(s).name === \"RectangleLabelsModel\" ||\n      getType(s).name === \"PolygonLabelsModel\" ||\n      getType(s).name === \"KeyPointLabelsModel\"\n    ) {\n      return templateElement(s);\n    } else if (getType(s).name === \"RatingModel\") {\n      return <p>Rating: {s.getSelectedString()}</p>;\n    }\n\n    return null;\n  };\n\n  return <Fragment>{node.states.map(s => _render(s))}</Fragment>;\n};\n\nexport default observer(({ store, completion }) => {\n  const node = completion.highlightedNode;\n\n  return (\n    <Fragment>\n      <p>\n        <NodeMinimal node={node} /> (id: {node.id})\n      </p>\n\n      {node.normalization && (\n        <p>\n          Normalization: {node.normalization}\n          <Icon\n            name=\"delete\"\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              node.deleteNormalization();\n            }}\n          />\n        </p>\n      )}\n      {node.states && <RenderStates node={node} />}\n\n      <div className={styles.block}>\n        <Button\n          className={styles.button}\n          onClick={() => {\n            completion.startRelationMode(node);\n          }}\n        >\n          <Icon type=\"link\" />\n          Relation\n        </Button>\n\n        <Button\n          className={styles.button}\n          onClick={() => {\n            completion.setNormalizationMode(true);\n          }}\n        >\n          <Icon type=\"plus\" />\n          Normalization\n        </Button>\n\n        <Button\n          className={styles.button}\n          type=\"dashed\"\n          onClick={() => {\n            completion.highlightedNode.unselectRegion();\n          }}\n        >\n          <Icon type=\"fullscreen-exit\" />\n          Unselect\n        </Button>\n\n        <Button\n          type=\"danger\"\n          className={styles.button}\n          onClick={() => {\n            completion.highlightedNode.deleteRegion();\n          }}\n        >\n          <Icon type=\"delete\" />\n          Delete\n          {store.settings.enableHotkeys && store.settings.enableTooltips && <Hint>[ Bksp ]</Hint>}\n        </Button>\n      </div>\n\n      {completion.normalizationMode && (\n        <Form\n          style={{ marginTop: \"0.5em\", marginBottom: \"0.5em\" }}\n          onSubmit={ev => {\n            const { value } = ev.target;\n            node.setNormalization(node.normInput);\n            completion.setNormalizationMode(false);\n\n            ev.preventDefault();\n            return false;\n          }}\n        >\n          <Input\n            onChange={ev => {\n              const { value } = ev.target;\n              node.setNormInput(value);\n            }}\n            style={{ marginBottom: \"0.5em\" }}\n            placeholder=\"Add Normalization\"\n          />\n          <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: \"0.5em\" }}>\n            Add\n          </Button>\n          <Button\n            type=\"danger\"\n            htmlType=\"reset\"\n            onClick={ev => {\n              completion.setNormalizationMode(false);\n\n              ev.preventDefault();\n              return false;\n            }}\n          >\n            Cancel\n          </Button>\n        </Form>\n      )}\n    </Fragment>\n  );\n});\n","import React, { Component } from \"react\";\nimport { Card } from \"antd\";\nimport { observer } from \"mobx-react\";\n\nimport Relations from \"../Relations/Relations\";\nimport Entities from \"../Entities/Entities\";\nimport Entity from \"../Entity/Entity\";\nimport styles from \"./SideColumn.module.scss\";\n\n/**\n * Component Side with:\n * Completions\n * Entities\n * Relations\n */\nexport default observer(({ store }) => {\n  const completion = store.completionStore.selected;\n  const node = completion.highlightedNode;\n\n  return (\n    <Card title=\"Entity\" className={styles.card}>\n      {node && <Entity store={store} completion={completion} />}\n\n      {!completion.highlightedNode && <p>Nothing selected</p>}\n\n      <Entities store={store} regionStore={completion.regionStore} />\n\n      <Relations store={store} item={completion} />\n    </Card>\n  );\n});\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport styles from \"./Segment.module.scss\";\n\n/**\n * Segment Component\n */\nexport default class Segment extends React.Component {\n  render() {\n    return <div className={styles.block}>{this.props.children}</div>;\n  }\n}\n\nSegment.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n","import { types, getType, getParent } from \"mobx-state-tree\";\nimport Registry from \"./Registry\";\n\nfunction unionArray(arr) {\n  return types.maybeNull(types.array(oneOf(arr)));\n}\n\nfunction oneOf(arr) {\n  return types.union({\n    dispatcher: sn => {\n      if (arr.find(val => sn.type === val)) {\n        return Registry.getModelByTag(sn.type);\n      } else {\n        throw Error(\"Not expecting tag: \" + sn.type);\n      }\n    },\n  });\n}\n\nfunction allModelsTypes() {\n  const args = [\n    {\n      dispatcher: sn => {\n        if (Registry.tags.find(val => sn.type === val)) {\n          return Registry.getModelByTag(sn.type);\n        } else {\n          throw Error(\"Not expecting tag: \" + sn.type);\n        }\n      },\n    },\n    Registry.modelsArr(),\n  ];\n\n  const results = [].concat.apply([], args);\n\n  return types.union.apply(null, results);\n}\n\nfunction isType(node, types) {\n  const nt = getType(node);\n  for (let t of types) if (nt === t) return true;\n\n  return false;\n}\n\nfunction getParentOfTypeString(node, str) {\n  // same as getParentOfType but checks models .name instead of type\n  let parent = getParent(node);\n\n  if (!Array.isArray(str)) str = [str];\n\n  while (parent) {\n    const name = getType(parent).name;\n\n    if (str.find(c => c === name)) return parent;\n\n    parent = getParent(parent);\n  }\n\n  return null;\n}\n\nexport default { unionArray, allModelsTypes, oneOf, isType, getParentOfTypeString };\n","import React from \"react\";\nimport { types, getEnv, flow, getParentOfType } from \"mobx-state-tree\";\nimport { observer, Provider } from \"mobx-react\";\n\nimport Tree from \"../../core/Tree\";\n\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\n\n/**\n * View element. It's analogous to div element in html and can be used to visual configure display of blocks\n * @example\n * <View style=\"display: flex;\">\n *  <View style=\"flex: 50%\">\n *   <Header value=\"Facts:\"></Header>\n *   <Text name=\"text\" value=\"$fact\"></Text>\n *  </View>\n *  <View style=\"flex: 50%; margin-left: 1em\">\n *   <Header value=\"Enter your question:\"></Header>\n *   <TextArea name=\"question\" ></TextArea>\n *  </View>\n * </View>\n * @name View\n * @param {block|inline} display\n * @param {style} style css style string\n */\nconst TagAttrs = types.model({\n  display: types.optional(types.string, \"block\"),\n  margin: types.optional(types.string, \"\"),\n});\n\nconst Model = types.model({\n  id: types.identifier,\n  type: \"view\",\n  style: types.maybeNull(types.string),\n  children: Types.unionArray([\n    \"view\",\n    \"header\",\n    \"labels\",\n    \"table\",\n    \"choices\",\n    \"rating\",\n    \"ranker\",\n    \"rectangle\",\n    \"polygon\",\n    \"keypoint\",\n    \"rectanglelabels\",\n    \"polygonlabels\",\n    \"keypointlabels\",\n    \"text\",\n    \"audio\",\n    \"image\",\n    \"hypertext\",\n    \"audioplus\",\n    \"list\",\n    \"dialog\",\n    \"textarea\",\n  ]),\n});\n\nconst ViewModel = types.compose(\n  \"ViewModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = observer(({ item }) => {\n  let style = {};\n\n  if (item.display === \"inline\") {\n    style = { display: \"inline-block\", marginRight: \"15px\" };\n  }\n\n  if (item.style) {\n    style = Tree.cssConverter(item.style);\n  }\n\n  return <div style={style}>{Tree.renderChildren(item)}</div>;\n});\n\nRegistry.addTag(\"view\", ViewModel, HtxView);\n\nexport { HtxView, ViewModel };\n","/**\n * Convert JavaScript string in dot notation into an object reference\n * @param {Object} obj\n * @param {*} is\n * @param {*} value\n */\nfunction _index(obj, is, value) {\n  if (typeof is === \"string\") return _index(obj, is.split(\".\"), value);\n  else if (is.length === 1 && value !== undefined) return (obj[is[0]] = value);\n  else if (is.length === 0) return obj;\n  else return _index(obj[is[0]], is.slice(1), value);\n}\n\n/**\n *\n * @param {*} variable\n * @param {*} obj\n */\nfunction variableNotation(variable, obj) {\n  if (variable.charAt(0) === \"$\") {\n    const n = variable.substring(1);\n    return _index(obj, n);\n  } else {\n    return variable;\n  }\n}\n\n/**\n * A small templating engine for processing HTML with given data.\n *\n * @see TemplateEngine via MIT Licensed https://github.com/krasimir/absurd/\n *\n * @param {string} html\n * @param {Object} options\n * @returns {*}\n */\nfunction runTemplate(html, options) {\n  if (!options) options = {};\n\n  var re = /[$](.+)/g,\n    reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g,\n    code = \"with(obj) { var r=[];\\n\",\n    cursor = 0,\n    result,\n    match;\n\n  var add = function(line, js) {\n    js\n      ? (code += line.match(reExp) ? line + \"\\n\" : \"r.push(\" + line + \");\\n\")\n      : (code += line !== \"\" ? 'r.push(\"' + line.replace(/\"/g, '\\\\\"') + '\");\\n' : \"\");\n    return add;\n  };\n\n  while ((match = re.exec(html))) {\n    add(html.slice(cursor, match.index))(match[1], true);\n    cursor = match.index + match[0].length;\n  }\n\n  if (!html) return \"\";\n\n  add(html.substr(cursor, html.length - cursor));\n  code = (code + 'return r.join(\"\"); }').replace(/[\\r\\t\\n]/g, \" \");\n\n  try {\n    result = new Function(\"obj\", code).apply(options, [options]);\n  } catch (err) {\n    console.error(\"'\" + err.message + \"'\", \" in \\n\\nCode:\\n\", code, \"\\n\");\n  }\n\n  return result;\n}\n\nexport { variableNotation, runTemplate, _index };\n","import { types } from \"mobx-state-tree\";\n\nimport { runTemplate } from \"../../core/Template\";\n\nconst ProcessAttrsMixin = types.model().actions(self => ({\n  updateLocalValue(value) {\n    self._value = value;\n  },\n\n  updateValue(store) {\n    self._value = runTemplate(self.value, store.task.dataObj) || \"\";\n\n    if (store.task.auth && store.task.auth.enable && self.value.substr(1) === store.task.auth.to) {\n      let secureResource = self.getSecureResource(store, runTemplate(self.value, store.task.dataObj));\n\n      secureResource.then(response => {\n        self.updateLocalValue(response);\n      });\n    }\n  },\n}));\n\nexport default ProcessAttrsMixin;\n","import React from \"react\";\nimport { types } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport { Table } from \"antd\";\n\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Table tag, show object keys and values in a table\n * @example\n * <Table name=\"text-1\" value=\"$text\"></Table>\n * @name Table\n * @param {string} value\n */\nconst Model = types.model({\n  type: \"table\",\n  value: types.maybeNull(types.string),\n  _value: types.optional(types.string, \"\"),\n});\n\nconst TableModel = types.compose(\n  \"TableModel\",\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxTable = inject(\"store\")(\n  observer(({ store, item }) => {\n    let value = item._value;\n\n    if (!value) {\n      if (store.task) value = store.task.dataObj;\n    }\n\n    let dataSource = [];\n    let columns = [{ title: \"Type\", dataIndex: \"type\" }, { title: \"Value\", dataIndex: \"value\" }];\n\n    Object.keys(value).map(k => {\n      let val = value[k];\n\n      if (typeof val === \"object\") val = JSON.stringify(val);\n\n      dataSource.push({ type: k, value: val });\n    });\n\n    return <Table dataSource={dataSource} columns={columns} />;\n  }),\n);\n\nRegistry.addTag(\"table\", TableModel, HtxTable);\n\nexport { HtxTable, TableModel };\n","import React from \"react\";\nimport { types } from \"mobx-state-tree\";\nimport { observer } from \"mobx-react\";\nimport { Typography } from \"antd\";\n\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Header tag, show header\n * @example\n * <Header name=\"text-1\" value=\"$text\"></Header>\n * @name Header\n * @param {number} [size=4] Size of header\n * @param {string} value Text of header\n * @param {boolean} [underline=false] Underline of header\n */\nconst Model = types.model({\n  type: \"header\",\n  size: types.optional(types.number, 4),\n  _value: types.optional(types.string, \"\"),\n  value: types.optional(types.string, \"\"),\n  underline: types.optional(types.boolean, false),\n});\n\nconst HeaderModel = types.compose(\n  \"HeaderModel\",\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxHeader = observer(({ item }) => {\n  return (\n    <Typography.Title underline={item.underline} level={item.size} style={{ margin: \"10px 0\" }}>\n      {item._value}\n    </Typography.Title>\n  );\n});\n\nRegistry.addTag(\"header\", HeaderModel, HtxHeader);\n\nexport { HtxHeader, HeaderModel };\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport Registry from \"../../core/Registry\";\nimport { runTemplate } from \"../../core/Template\";\n\n/**\n * HyperText element. Render html inside\n * @example\n * <View>\n *  <HyperText value=\"<p>Hey</p>\"></HyperText>\n * <View>\n * @param {string} name\n * @param {string} value\n */\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  name: types.maybeNull(types.string),\n});\n\nfunction HyperTextActions(self) {\n  return {\n    fromStateJSON(obj) {\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      if (obj.value.text) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n    },\n  };\n}\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"HyperText\",\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => HyperTextActions(self));\n\nconst HyperTextModel = types.compose(\n  \"HyperTextModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxHyperTextView = inject(\"store\")(\n  observer(({ store, item }) => {\n    if (!store.task) return null;\n\n    return <div dangerouslySetInnerHTML={{ __html: runTemplate(item.value, store.task.dataObj) }} />;\n  }),\n);\n\nRegistry.addTag(\"hypertext\", HyperTextModel, HtxHyperTextView);\n\nexport { HtxHyperTextView, HyperTextModel };\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Tag } from \"antd\";\n\nimport styles from \"./Dialog.module.scss\";\n\nexport default class DialogView extends React.Component {\n  render() {\n    let selectedStyle = `${styles.block}`;\n    let hint;\n    let bgColor;\n    let date;\n\n    if (this.props.hint) {\n      hint = <Tag color=\"blue\">{this.props.hint}</Tag>;\n    }\n\n    if (this.props.bg) {\n      bgColor = this.props.bg;\n    }\n\n    if (this.props.selected) {\n      selectedStyle = `${selectedStyle} ${styles.block_selected}`;\n      hint = (\n        <div>\n          <Tag color=\"magenta\">Selected Message</Tag>\n        </div>\n      );\n\n      if (this.props.hint) {\n        hint = (\n          <div className={styles.tag}>\n            <Tag color=\"magenta\">{this.props.hint}</Tag>\n          </div>\n        );\n      }\n    }\n\n    if (this.props.date) {\n      date = <span className={styles.date}>{this.props.date}</span>;\n    }\n\n    return (\n      <div className={selectedStyle} style={{ background: bgColor, width: \"max-content\", maxWidth: \"100%\" }}>\n        <span className={styles.name}>{this.props.name}:&nbsp;</span>\n        <p className={styles.text}>{this.props.text}</p>\n        {date}\n        {hint}\n      </div>\n    );\n  }\n}\n\nDialogView.propTypes = {\n  name: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  date: PropTypes.string,\n  hint: PropTypes.string,\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { Divider, Empty } from \"antd\";\n\nimport { guidGenerator } from \"../../utils/unique\";\nimport Registry from \"../../core/Registry\";\nimport DialogView from \"../../components/Dialog/Dialog\";\nimport { stringToColor, convertToRGBA } from \"../../utils/colors\";\n\n/**\n * Dialog tag renders a dialog\n * @example\n * <View>\n *  <Dialog name=\"dialog\" value=\"$dialog\"></Dialog>\n * <View>\n * @param {string} name name of the element\n * @param {object} value value of the element\n */\nconst Replica = types.model({\n  name: types.string,\n  text: types.string,\n  selected: types.optional(types.boolean, false),\n  date: types.optional(types.string, \"\"),\n  hint: types.optional(types.string, \"\"),\n});\n\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  name: types.maybeNull(types.string),\n});\n\nfunction DialogActions(self) {\n  return {\n    fromStateJSON(obj) {\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      if (obj.value.text) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n    },\n  };\n}\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"Dialog\",\n    data: types.map(Replica),\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => DialogActions(self));\n\nconst DialogModel = types.compose(\n  \"DialogModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxDialogView = inject(\"store\")(\n  observer(({ store, item }) => {\n    if (!store.task || !store.task.dataObj) {\n      return <Empty />;\n    }\n\n    let result = [];\n    let name = item.value;\n\n    if (name.charAt(0) === \"$\") {\n      name = name.substr(1);\n    }\n\n    store.task.dataObj[name].forEach((item, ind) => {\n      let bgColor;\n\n      if (item.name) {\n        bgColor = convertToRGBA(stringToColor(item.name), 0.1);\n      }\n\n      result.push(\n        <DialogView\n          key={ind}\n          name={item.name}\n          hint={item.hint}\n          text={item.text}\n          selected={item.selected}\n          date={item.date}\n          id={item.id}\n          bg={bgColor}\n        />,\n      );\n    });\n\n    return (\n      <div>\n        <div\n          style={{\n            display: \"flex\",\n            flexFlow: \"column\",\n            maxHeight: \"500px\",\n            overflowY: \"scroll\",\n            paddingRight: \"10px\",\n            marginTop: \"10px\",\n          }}\n        >\n          {result}\n        </div>\n        <Divider dashed={true} />\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"dialog\", DialogModel, HtxDialogView);\n\nexport { DialogModel, HtxDialogView };\n","import React, { Fragment } from \"react\";\nimport { Button, Icon } from \"antd\";\n\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, true),\n  volume: types.optional(types.boolean, true),\n  speed: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"audio\",\n    _value: types.optional(types.string, \"\"),\n    playing: types.optional(types.boolean, false),\n    height: types.optional(types.number, 20),\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    wsCreated(ws) {\n      self._ws = ws;\n    },\n\n    /**\n     * Play and stop\n     */\n    handlePlay() {\n      self.playing = !self.playing;\n    },\n  }));\n\nconst AudioHOCModel = types.compose(\n  \"AudioHOCModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nexport { AudioHOCModel };\n","import React, { Fragment, Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Button, Icon } from \"antd\";\n\nconst AudioControls = observer(({ item, store }) => {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"1em\" }}>\n      <Button\n        type=\"primary\"\n        onClick={ev => {\n          item._ws.playPause();\n        }}\n      >\n        {item.playing && (\n          <Fragment>\n            <Icon type=\"pause-circle\" /> Pause\n          </Fragment>\n        )}\n        {!item.playing && (\n          <Fragment>\n            <Icon type=\"play-circle\" /> Play\n          </Fragment>\n        )}\n      </Button>\n    </div>\n  );\n});\n\nexport default observer(AudioControls);\n","import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport RegionsPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.regions.min.js\";\nimport TimelinePlugin from \"wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js\";\nimport CursorPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.cursor\";\nimport { Slider, InputNumber, Row, Col } from \"antd\";\n\nimport styles from \"./Waveform.module.scss\";\n\n/**\n * Use formatTimeCallback to style the notch labels as you wish, such\n * as with more detail as the number of pixels per second increases.\n *\n * Here we format as M:SS.frac, with M suppressed for times < 1 minute,\n * and frac having 0, 1, or 2 digits as the zoom increases.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override timeInterval, primaryLabelInterval and/or\n * secondaryLabelInterval so they all work together.\n *\n * @param: seconds\n * @param: pxPerSec\n */\nfunction formatTimeCallback(seconds, pxPerSec) {\n  seconds = Number(seconds);\n  var minutes = Math.floor(seconds / 60);\n  seconds = seconds % 60;\n\n  // fill up seconds with zeroes\n  var secondsStr = Math.round(seconds).toString();\n  if (pxPerSec >= 25 * 10) {\n    secondsStr = seconds.toFixed(2);\n  } else if (pxPerSec >= 25 * 1) {\n    secondsStr = seconds.toFixed(1);\n  }\n\n  if (minutes > 0) {\n    if (seconds < 10) {\n      secondsStr = \"0\" + secondsStr;\n    }\n    return `${minutes}:${secondsStr}`;\n  }\n  return secondsStr;\n}\n\n/**\n * Use timeInterval to set the period between notches, in seconds,\n * adding notches as the number of pixels per second increases.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param: pxPerSec\n */\nfunction timeInterval(pxPerSec) {\n  var retval = 1;\n  if (pxPerSec >= 25 * 100) {\n    retval = 0.01;\n  } else if (pxPerSec >= 25 * 40) {\n    retval = 0.025;\n  } else if (pxPerSec >= 25 * 10) {\n    retval = 0.1;\n  } else if (pxPerSec >= 25 * 4) {\n    retval = 0.25;\n  } else if (pxPerSec >= 25) {\n    retval = 1;\n  } else if (pxPerSec * 5 >= 25) {\n    retval = 5;\n  } else if (pxPerSec * 15 >= 25) {\n    retval = 15;\n  } else {\n    retval = Math.ceil(0.5 / pxPerSec) * 60;\n  }\n  return retval;\n}\n\n/**\n * Return the cadence of notches that get labels in the primary color.\n * EG, return 2 if every 2nd notch should be labeled,\n * return 10 if every 10th notch should be labeled, etc.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param pxPerSec\n */\nfunction primaryLabelInterval(pxPerSec) {\n  var retval = 1;\n  if (pxPerSec >= 25 * 100) {\n    retval = 10;\n  } else if (pxPerSec >= 25 * 40) {\n    retval = 4;\n  } else if (pxPerSec >= 25 * 10) {\n    retval = 10;\n  } else if (pxPerSec >= 25 * 4) {\n    retval = 4;\n  } else if (pxPerSec >= 25) {\n    retval = 1;\n  } else if (pxPerSec * 5 >= 25) {\n    retval = 5;\n  } else if (pxPerSec * 15 >= 25) {\n    retval = 15;\n  } else {\n    retval = Math.ceil(0.5 / pxPerSec) * 60;\n  }\n  return retval;\n}\n\n/**\n * Return the cadence of notches to get labels in the secondary color.\n * EG, return 2 if every 2nd notch should be labeled,\n * return 10 if every 10th notch should be labeled, etc.\n *\n * Secondary labels are drawn after primary labels, so if\n * you want to have labels every 10 seconds and another color labels\n * every 60 seconds, the 60 second labels should be the secondaries.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param pxPerSec\n */\nfunction secondaryLabelInterval(pxPerSec) {\n  // draw one every 10s as an example\n  return Math.floor(10 / timeInterval(pxPerSec));\n}\n\nexport default class Waveform extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      src: this.props.src,\n      pos: 0,\n      colors: {\n        waveColor: \"#97A0AF\",\n        progressColor: \"#52c41a\",\n      },\n      zoom: 20,\n      speed: 1,\n      volume: 1,\n    };\n  }\n\n  /**\n   * Handle to change zoom of wave\n   */\n  onChangeZoom = value => {\n    this.setState({\n      ...this.state,\n      zoom: value,\n    });\n\n    this.wavesurfer.zoom(value);\n  };\n\n  onChangeVolume = value => {\n    this.setState({\n      ...this.state,\n      volume: value,\n    });\n\n    this.wavesurfer.setVolume(value);\n  };\n\n  /**\n   * Handle to change speed of wave\n   */\n  onChangeSpeed = value => {\n    this.setState({\n      ...this.state,\n      speed: value,\n    });\n\n    this.wavesurfer.setPlaybackRate(value);\n  };\n\n  componentDidMount() {\n    this.$el = ReactDOM.findDOMNode(this);\n\n    this.$waveform = this.$el.querySelector(\"#wave\");\n\n    let wavesurferConfigure = {\n      container: this.$waveform,\n      waveColor: this.state.colors.waveColor,\n      height: this.props.height,\n      backend: \"MediaElement\",\n      progressColor: this.state.colors.progressColor,\n    };\n\n    if (this.props.regions) {\n      wavesurferConfigure = {\n        ...wavesurferConfigure,\n        plugins: [\n          RegionsPlugin.create({\n            dragSelection: {\n              slop: 5, // slop\n            },\n          }),\n          TimelinePlugin.create({\n            container: \"#timeline\", // the element in which to place the timeline, or a CSS selector to find it\n            formatTimeCallback: formatTimeCallback, // custom time format callback. (Function which receives number of seconds and returns formatted string)\n            timeInterval: timeInterval, // number of intervals that records consists of. Usually it is equal to the duration in minutes. (Integer or function which receives pxPerSec value and returns value)\n            primaryLabelInterval: primaryLabelInterval, // number of primary time labels. (Integer or function which receives pxPerSec value and reurns value)\n            secondaryLabelInterval: secondaryLabelInterval, // number of secondary time labels (Time labels between primary labels, integer or function which receives pxPerSec value and reurns value).\n            primaryColor: \"blue\", // the color of the modulo-ten notch lines (e.g. 10sec, 20sec). The default is '#000'.\n            secondaryColor: \"blue\", // the color of the non-modulo-ten notch lines. The default is '#c0c0c0'.\n            primaryFontColor: \"#000\", // the color of the non-modulo-ten time labels (e.g. 10sec, 20sec). The default is '#000'.\n            secondaryFontColor: \"#000\",\n          }),\n          CursorPlugin.create({\n            wrapper: this.$waveform,\n            showTime: true,\n            opacity: 1,\n          }),\n        ],\n      };\n    }\n\n    this.wavesurfer = WaveSurfer.create(wavesurferConfigure);\n\n    /**\n     * Load data\n     */\n    this.wavesurfer.load(this.props.src);\n\n    /**\n     * Speed of waveform\n     */\n    this.wavesurfer.setPlaybackRate(this.state.speed);\n\n    const self = this;\n\n    if (this.props.regions) {\n      /**\n       * Mouse enter on region\n       */\n      this.wavesurfer.on(\"region-mouseenter\", reg => {\n        reg._region.onMouseOver();\n      });\n\n      /**\n       * Mouse leave on region\n       */\n      this.wavesurfer.on(\"region-mouseleave\", reg => {\n        reg._region.onMouseLeave();\n      });\n\n      /**\n       * Add region to wave\n       */\n      this.wavesurfer.on(\"region-created\", reg => {\n        const region = self.props.addRegion(reg);\n        reg._region = region;\n        reg.color = region.selectedregionbg;\n\n        reg.on(\"click\", () => region.onClick(self.wavesurfer));\n        reg.on(\"update-end\", () => region.onUpdateEnd(self.wavesurfer));\n\n        reg.on(\"dblclick\", e => {\n          window.setTimeout(function() {\n            reg.play();\n          }, 0);\n        });\n\n        reg.on(\"out\", () => {});\n      });\n    }\n\n    /**\n     * Handler of slider\n     */\n    const slider = document.querySelector(\"#slider\");\n\n    if (slider) {\n      slider.oninput = function() {\n        self.wavesurfer.zoom(Number(this.value));\n      };\n    }\n\n    this.wavesurfer.on(\"ready\", () => {\n      self.props.onCreate(this.wavesurfer);\n    });\n\n    /**\n     * Pause trigger of audio\n     */\n    this.wavesurfer.on(\"pause\", self.props.handlePlay);\n\n    /**\n     * Play trigger of audio\n     */\n    this.wavesurfer.on(\"play\", self.props.handlePlay);\n\n    if (this.props.regions) {\n      this.props.onLoad(this.wavesurfer);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"wave\" className={styles.wave} />\n\n        <div id=\"timeline\" />\n\n        <Row className={this.props.volume || this.props.speed || this.props.zoom ? styles.menu : \"\"}>\n          {this.props.speed && (\n            <Col span={24}>\n              <Col span={12}>\n                Speed:{\" \"}\n                <InputNumber\n                  min={0.5}\n                  max={3}\n                  value={this.state.speed}\n                  onChange={value => {\n                    this.onChangeSpeed(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={0.5}\n                  max={3}\n                  step={0.1}\n                  value={typeof this.state.speed === \"number\" ? this.state.speed : 1}\n                  onChange={range => {\n                    this.onChangeSpeed(range);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n          {this.props.volume && (\n            <Col span={24}>\n              <Col span={12}>\n                Volume:{\" \"}\n                <InputNumber\n                  min={0}\n                  max={1}\n                  value={this.state.volume}\n                  step={0.1}\n                  onChange={value => {\n                    this.onChangeVolume(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={0}\n                  max={1}\n                  step={0.1}\n                  value={typeof this.state.volume === \"number\" ? this.state.volume : 1}\n                  onChange={value => {\n                    this.onChangeVolume(value);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n          {this.props.zoom && (\n            <Col span={24}>\n              <Col span={12}>\n                Zoom:{\" \"}\n                <InputNumber\n                  min={20}\n                  max={500}\n                  value={this.state.zoom}\n                  onChange={value => {\n                    this.onChangeZoom(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={20}\n                  step={10}\n                  max={500}\n                  value={typeof this.state.zoom === \"number\" ? this.state.zoom : 0}\n                  onChange={value => {\n                    this.onChangeZoom(value);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { Button, Icon } from \"antd\";\n\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { AudioHOCModel } from \"./AudioHOC\";\n\nimport AudioControls from \"./Audio/Controls\";\n\nimport Waveform from \"../../components/Waveform/Waveform\";\n\n/**\n * Audio tag plays a simple audio file\n * @example\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n * </View>\n * @example\n * <!-- Audio classification -->\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n *   <Choices name=\"ch\" toName=\"audio\">\n *     <Choice value=\"Positive\"></Choice>\n *     <Choice value=\"Negative\"></Choice>\n *   </Choices>\n * </View>\n * @example\n * <!-- Audio transcription -->\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n *   <TextArea name=\"ta\" toName=\"audio\"></TextArea>\n * </View>\n * @name Audio\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {string} hotkey hotkey used to play/pause audio\n */\n\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, false),\n  volume: types.optional(types.boolean, false),\n  speed: types.optional(types.boolean, false),\n});\n\nconst Model = AudioHOCModel.named(\"AudioModel\").actions(self => ({\n  fromStateJSON(obj, fromModel) {\n    if (obj.value.choices) {\n      self.completion.names.get(obj.from_name).fromStateJSON(obj);\n    }\n\n    if (obj.value.text) {\n      self.completion.names.get(obj.from_name).fromStateJSON(obj);\n    }\n  },\n\n  onLoad(ws) {\n    self._ws = ws;\n  },\n}));\n\nconst AudioModel = types.compose(\n  \"AudioModel\",\n  Model,\n  TagAttrs,\n);\n\nconst HtxAudioView = observer(({ store, item }) => {\n  if (!item._value) return null;\n\n  return (\n    <div>\n      <Waveform\n        src={item._value}\n        onCreate={item.wsCreated}\n        onLoad={item.onLoad}\n        handlePlay={item.handlePlay}\n        speed={item.speed}\n        zoom={item.zoom}\n        volume={item.volume}\n        regions={false}\n        height={item.height}\n      />\n\n      <AudioControls item={item} />\n    </div>\n  );\n});\n\nconst HtxAudio = inject(\"store\")(observer(HtxAudioView));\n\nRegistry.addTag(\"audio\", AudioModel, HtxAudio);\n\nexport { AudioModel, HtxAudio };\n","import { types } from \"mobx-state-tree\";\n\nconst RegionsMixin = types\n  .model({\n    selected: types.optional(types.boolean, false),\n    highlighted: types.optional(types.boolean, false),\n  })\n  .actions(self => ({\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n    },\n\n    unselectRegion() {\n      const completion = self.completion;\n\n      if (completion.relationMode) {\n        completion.stopRelationMode();\n      }\n\n      self.selected = false;\n      self.completion.setHighlightedNode(null);\n    },\n\n    onClickRegion() {\n      const completion = self.completion;\n\n      if (completion.relationMode) {\n        completion.addRelation(self);\n        completion.stopRelationMode();\n        completion.regionStore.unselectAll();\n      } else {\n        if (self.selected) {\n          self.unselectRegion();\n        } else {\n          completion.regionStore.unselectAll();\n          self.selectRegion();\n        }\n      }\n    },\n\n    /**\n     * Remove region\n     */\n    deleteRegion() {\n      self.unselectRegion();\n\n      self.completion.relationStore.deleteNodeRelation(self);\n\n      if (self.type === \"polygonregion\") {\n        self.destroyRegion();\n      }\n\n      self.completion.regionStore.deleteRegion(self);\n\n      self.completion.deleteRegion(self);\n    },\n\n    setHighlight(val) {\n      self.highlighted = val;\n    },\n\n    toggleHightlight() {\n      self.setHighlight(!self.highlighted);\n    },\n  }));\n\nexport default RegionsMixin;\n","import { types } from \"mobx-state-tree\";\n\n/**\n * Normalization\n * For normalize many labels to one value\n */\nconst NormalizationMixin = types\n  .model({\n    normInput: types.maybeNull(types.string),\n    normalization: types.maybeNull(types.string),\n  })\n  .actions(self => ({\n    /**\n     * Set normalization\n     * @param {*} val\n     */\n    setNormalization(val) {\n      self.normalization = val;\n    },\n\n    /**\n     * Delete normalization\n     */\n    deleteNormalization() {\n      self.setNormalization(\"\");\n    },\n\n    setNormInput(val) {\n      self.normInput = val;\n    },\n  }));\n\nexport default NormalizationMixin;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types } from \"mobx-state-tree\";\nimport { Tag } from \"antd\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Utils from \"../../utils\";\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Hint from \"../../components/Hint/Hint\";\n\n/**\n * Label tag represents a single label\n * @example\n * <View>\n *   <Labels name=\"type\" toName=\"txt-1\">\n *     <Label alias=\"B\" value=\"Brand\"></Label>\n *     <Label alias=\"P\" value=\"Product\"></Label>\n *   </Labels>\n *   <Text name=\"txt-1\" value=\"$text\"></Text>\n * </View>\n * @name Label\n * @param {string} value A value of the label\n * @param {boolean} selected If this label should be preselected\n * @param {string} alias Label alias\n * @param {string} hotkey Hotkey\n * @param {boolean} showalias Show alias inside label text\n * @param {string} aliasstyle Alias CSS style default=opacity: 0.6\n * @param {string} size Size of text in the label\n * @param {string} background The background color of active label\n * @param {string} selectedColor Color of text in an active label\n */\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  selected: types.optional(types.boolean, false),\n  alias: types.maybeNull(types.string),\n  hotkey: types.maybeNull(types.string),\n  showalias: types.optional(types.boolean, false),\n  aliasstyle: types.optional(types.string, \"opacity: 0.6\"),\n  size: types.optional(types.string, \"medium\"),\n  background: types.optional(types.string, \"#36B37E\"),\n  selectedcolor: types.optional(types.string, \"white\"),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"label\",\n    _value: types.optional(types.string, \"\"),\n  })\n  .actions(self => ({\n    /**\n     * Select label\n     */\n    toggleSelected() {\n      const selectedLabel = self.selected;\n\n      const labels = Types.getParentOfTypeString(self, [\n        \"LabelsModel\",\n        \"RectangleLabelsModel\",\n        \"PolygonLabelsModel\",\n        \"KeyPointLabelsModel\",\n      ]);\n\n      labels.finishCurrentObject();\n\n      /**\n       * Multiple\n       */\n      if (!labels.shouldBeUnselected) {\n        self.markSelected(!self.selected);\n      }\n\n      /**\n       * Single\n       */\n      if (labels.shouldBeUnselected) {\n        /**\n         * Current not selected\n         */\n        if (!selectedLabel) {\n          /**\n           * Unselect all labels\n           */\n          labels.unselectAll();\n          /**\n           * Select current label\n           */\n          self.markSelected(!self.selected);\n        } else {\n          /**\n           * Unselect all labels\n           */\n          labels.unselectAll();\n        }\n      }\n    },\n\n    /**\n     *\n     * @param {boolean} value\n     */\n    markSelected(value) {\n      self.selected = value;\n    },\n\n    onHotKey() {\n      return self.toggleSelected();\n    },\n  }));\n\nconst LabelModel = types.compose(\n  \"LabelModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxLabelView = inject(\"store\")(\n  observer(({ item, store }) => {\n    const labelStyle = {\n      backgroundColor: item.selected ? item.background : \"#e8e8e8\",\n      color: item.selected ? item.selectedcolor : \"#333333\",\n      cursor: \"pointer\",\n      margin: \"5px\",\n    };\n\n    return (\n      <Tag\n        onClick={ev => {\n          item.toggleSelected();\n          return false;\n        }}\n        style={labelStyle}\n        size={item.size}\n      >\n        {item._value}\n        {item.showalias === true && item.alias && (\n          <span style={Utils.styleToProp(item.aliasstyle)}>&nbsp;{item.alias}</span>\n        )}\n        {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n      </Tag>\n    );\n  }),\n);\n\nRegistry.addTag(\"label\", LabelModel, HtxLabelView);\n\nexport { HtxLabelView, LabelModel };\n","import { types } from \"mobx-state-tree\";\n\nconst SelectedModelMixin = types\n  .model()\n  .views(self => ({\n    get selectedLabels() {\n      return self.children.filter(c => c.selected === true);\n    },\n\n    get isSelected() {\n      return self.selectedLabels.length > 0;\n    },\n  }))\n  .actions(self => ({\n    findLabel(value) {\n      return self.children.find(c => c.alias === value || c.value === value);\n    },\n\n    unselectAll() {\n      self.children.map(c => c.markSelected(false));\n    },\n\n    getSelectedNames() {\n      return self.selectedLabels.map(c => (c.alias ? c.alias : c.value));\n    },\n\n    getSelectedString(joinstr) {\n      joinstr = joinstr || \" \";\n      return self.getSelectedNames().join(joinstr);\n    },\n  }));\n\nexport default SelectedModelMixin;\n","import { Modal } from \"antd\";\n\nconst wrapper = (_type, value, title) => {\n  let custom = {\n    type: \"\",\n    title: \"\",\n  };\n\n  switch (_type) {\n    case \"error\":\n      custom.type = Modal.error;\n      custom.title = \"Error\";\n      break;\n    case \"warning\":\n      custom.type = Modal.warning;\n      custom.title = \"Warning\";\n      break;\n    case \"success\":\n      custom.type = Modal.success;\n      custom.title = \"Success\";\n      break;\n    default:\n      custom.type = Modal.info;\n      custom.title = \"Info\";\n  }\n\n  custom.type({\n    title: title ? title : custom.title,\n    content: value,\n  });\n};\n\n/**\n * Success modal\n * @param {string} value\n * @param {string} title\n */\nconst error = (value, title) => {\n  wrapper(`error`, value, title);\n};\n\n/**\n * Warning modal\n * @param {string} value\n * @param {string} title\n */\nconst warning = (value, title) => {\n  wrapper(`warning`, value, title);\n};\n\n/**\n * Success modal\n * @param {string} value\n * @param {string} title\n */\nconst success = (value, title) => {\n  wrapper(`success`, value, title);\n};\n\n/**\n * Information modal\n * @param {string} value\n * @param {string} title\n */\nconst info = (value, title) => {\n  wrapper(`info`, value, title);\n};\n\nexport default { error, warning, success, info };\n","import { types, getParent } from \"mobx-state-tree\";\n\nimport InfoModal from \"../../components/Infomodal/Infomodal\";\n\n/**\n * Wrapper of Control item\n */\nconst LabelMixin = types.model(\"LabelMixin\").actions(self => ({\n  /**\n   * Get current color from Label settings\n   */\n  getSelectedColor() {\n    // return first selected label color\n    const sel = self.children.find(c => c.selected === true);\n    return sel && sel.background;\n  },\n\n  /**\n   * Close current polygon if user clicked on another Label\n   */\n  finishCurrentObject() {\n    getParent(self).find(obj => {\n      if (obj.activePolygon) {\n        obj.activePolygon.closePoly();\n      }\n    });\n  },\n\n  /**\n   * Usage check of selected controls before send completion to server\n   */\n  beforeSend() {\n    const names = self.getSelectedNames();\n\n    if (names && self.type === self._type) {\n      self.unselectAll();\n    }\n  },\n\n  fromStateJSON(obj, fromModel) {\n    self.unselectAll();\n\n    const objectType = obj.value[self._type];\n\n    if (!objectType) {\n      InfoModal.error(`Error with ${self._type}.`);\n      return;\n    }\n\n    if (obj.id) self.pid = obj.id;\n\n    objectType.forEach(obj => {\n      const findedObj = self.findLabel(obj);\n\n      if (!findedObj) {\n        InfoModal.error(`Error with ${self._type}. Not found: ` + objectType);\n        return;\n      }\n\n      findedObj.markSelected(true);\n    });\n  },\n}));\n\nexport default LabelMixin;\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { types } from \"mobx-state-tree\";\n\nimport Tree from \"../../core/Tree\";\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\n\nimport { LabelModel } from \"./Label\"; // eslint-disable-line no-unused-vars\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\nimport LabelMixin from \"../mixins/LabelMixin\";\n\n/**\n * Labels tag, create a group of labels\n * @example\n * <View>\n *   <Labels name=\"type\" toName=\"txt-1\">\n *     <Label alias=\"B\" value=\"Brand\"></Label>\n *     <Label alias=\"P\" value=\"Product\"></Label>\n *   </Labels>\n *   <Text name=\"txt-1\" value=\"$text\"></Text>\n * </View>\n * @name Labels\n * @param {string} name name of the element\n * @param {string} toName name of the element that you want to label\n * @param {single|multiple=} [choice=single] configure if you can select just one or multiple labels\n * @param {boolean} showInline show items in the same visual line\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  choice: types.optional(types.enumeration([\"single\", \"multiple\"]), \"single\"),\n\n  showinline: types.optional(types.boolean, true),\n  // TODO make enum\n  selectionstyle: types.maybeNull(types.optional(types.string, \"basic\", \"border\", \"bottom\")),\n});\n\n/**\n * @param {boolean} showinline\n * @param {identifier} id\n * @param {string} pid\n */\nconst ModelAttrs = types.model({\n  id: types.optional(types.identifier, guidGenerator),\n  pid: types.optional(types.string, guidGenerator),\n  type: \"labels\",\n  children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n});\n\nconst Model = LabelMixin.props({ _type: \"labels\" })\n  .views(self => ({\n    get shouldBeUnselected() {\n      return self.choice === \"single\";\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      const names = self.getSelectedNames();\n      if (names && names.length) {\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: self.name,\n          type: self.type,\n          value: {\n            labels: names,\n          },\n        };\n      }\n    },\n  }));\n\nconst LabelsModel = types.compose(\n  \"LabelsModel\",\n  ModelAttrs,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst HtxLabels = observer(({ item }) => {\n  const style = {\n    marginTop: \"1em\",\n    marginBottom: \"1em\",\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    flexFlow: \"wrap\",\n  };\n\n  if (!item.showinline) {\n    style[\"flexDirection\"] = \"column\";\n    style[\"alignItems\"] = \"flex-start\";\n    style[\"marginTop\"] = \"0\";\n  }\n\n  return <div style={style}>{Tree.renderChildren(item)}</div>;\n});\n\nRegistry.addTag(\"labels\", LabelsModel, HtxLabels);\n\nexport { HtxLabels, LabelsModel };\n","import React, { Component } from \"react\";\nimport { Rate, Icon } from \"antd\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\n\n/**\n * Rating adds rating selection\n *\n * @example\n * <View>\n *   <Text name=\"txt\" value=\"$text\"></Text>\n *   <Rating name=\"rating\" toName=\"txt\" maxRating=\"10\" icon=\"star\" size=\"medium\"></Rating>\n * </View>\n *\n * @name Rating\n * @param {string} name Name of the element\n * @param {string} toName Name of the element that you want to label\n * @param {number} [maxRating=5] Maximum rating value\n * @param {string} [size=medium] One of: small, medium, large\n * @param {string} [icon=start] One of: star, heart, fire, smile\n * @param {string} hotkey HotKey of Rating\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  maxRating: types.optional(types.number, 5),\n  icon: types.optional(types.string, \"star\"),\n  size: types.optional(types.string, \"medium\"),\n  defaultValue: types.optional(types.number, 0),\n\n  hotkey: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"rating\",\n    rating: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get isSelected() {\n      return self.rating > 0;\n    },\n  }))\n  .actions(self => ({\n    getSelectedString() {\n      return self.rating + \" star\";\n    },\n\n    getSelectedNames() {\n      return self.rating;\n    },\n\n    unselectAll() {\n      self.rating = 0;\n    },\n\n    handleRate(value) {\n      self.rating = value;\n    },\n\n    increaseValue() {\n      if (self.rating >= self.maxRating) {\n        self.rating = 0;\n      } else {\n        if (self.rating > 0) {\n          self.rating = self.rating + 1;\n        } else {\n          self.rating = 1;\n        }\n      }\n    },\n\n    onHotKey() {\n      return self.increaseValue();\n    },\n\n    toStateJSON() {\n      if (self.rating) {\n        const toname = self.toname || self.name;\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: toname,\n          type: self.type,\n          value: {\n            rating: self.rating,\n          },\n        };\n      }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      if (obj.id) self.pid = obj.id;\n\n      self.rating = obj.value.rating;\n    },\n  }));\n\nconst RatingModel = types.compose(\n  \"RatingModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxRating = inject(\"store\")(\n  observer(({ item, store }) => {\n    let iconSize;\n\n    if (item.size === \"small\") {\n      iconSize = 15;\n    } else if (item.size === \"medium\") {\n      iconSize = 25;\n    } else if (item.size === \"large\") {\n      iconSize = 40;\n    }\n\n    return (\n      <div>\n        <Rate\n          character={<Icon type={item.icon} style={{ fontSize: iconSize }} />}\n          value={item.rating}\n          count={Number(item.maxRating)}\n          defaultValue={item.defaultValue}\n          onChange={item.handleRate}\n        />\n        {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && (\n          <sup style={{ fontSize: \"9px\" }}>[{item.hotkey}]</sup>\n        )}\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"rating\", RatingModel, HtxRating);\n\nexport { HtxRating, RatingModel };\n","import { types, getParentOfType, destroy, getRoot } from \"mobx-state-tree\";\n\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\n\nimport { AudioPlusModel } from \"./AudioPlus\";\nimport Utils from \"../../utils\";\n\nconst Model = types\n  .model(\"AudioRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    start: types.number,\n    end: types.number,\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel))),\n    selectedregionbg: types.optional(types.string, \"rgba(0, 0, 0, 0.5)\"),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, AudioPlusModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    /**\n     * When you try to send completion\n     */\n    toStateJSON() {\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.pid,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"region\",\n          value: {\n            start: self.start,\n            end: self.end,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n\n    /**\n     * Select audio region\n     */\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n    },\n\n    /**\n     * Unselect audio region\n     */\n    unselectRegion() {\n      self.selected = false;\n      self.completion.setHighlightedNode(null);\n      if (self._ws_region.update) {\n        self._ws_region.update({ color: self.selectedregionbg });\n      }\n    },\n\n    setHighlight(val) {\n      self.highlighted = val;\n\n      if (val) {\n        self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n        self._ws_region.element.style.border = \"2px solid red\";\n      } else {\n        self._ws_region.update({ color: self.selectedregionbg });\n        self._ws_region.element.style.border = \"none\";\n      }\n    },\n\n    setNormalization(val) {\n      // console.log(val)\n    },\n\n    beforeDestroy() {\n      if (self._ws_region) self._ws_region.remove();\n    },\n\n    onClick(wavesurfer) {\n      if (!self.completion.relationMode) {\n        // Object.values(wavesurfer.regions.list).forEach(r => {\n        //   // r.update({ color: self.selectedregionbg });\n        // });\n\n        self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n      }\n\n      self.onClickRegion();\n    },\n\n    onMouseOver() {\n      if (self.completion.relationMode) {\n        self.setHighlight(true);\n        self._ws_region.element.style.cursor = \"crosshair\";\n      }\n    },\n\n    onMouseLeave() {\n      if (self.completion.relationMode) {\n        self.setHighlight(false);\n        self._ws_region.element.style.cursor = \"move\";\n      }\n    },\n\n    onUpdateEnd(wavesurfer) {\n      self.start = self._ws_region.start;\n      self.end = self._ws_region.end;\n    },\n  }));\n\nconst AudioRegionModel = types.compose(\n  \"AudioRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nexport { AudioRegionModel };\n","import React, { Fragment } from \"react\";\n\nimport { types, getRoot, getType } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Icon, Slider, Row, Col } from \"antd\";\n\nimport { cloneNode } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Waveform from \"../../components/Waveform/Waveform\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nimport Utils from \"../../utils\";\n\nimport { AudioRegionModel } from \"./AudioRegion\";\nimport AudioControls from \"./Audio/Controls\";\nimport styles from \"./AudioPlus/AudioPlus.module.scss\";\n\n/**\n * AudioPlus tag plays audio and shows its wave\n * @example\n * <View>\n *  <Labels name=\"lbl-1\" toName=\"audio-1\"><Label value=\"Hello\"></Label><Label value=\"World\"></Label></Labels>\n *  <Rating name=\"rate-1\" toName=\"audio-1\"></Rating>\n *  <AudioPlus name=\"audio-1\" value=\"$audio\"></AudioPlus>\n * </View>\n * @name AudioPlus\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {boolean=} [volume=true] show the volume slider (from 0 to 1)\n * @param {boolean} [speed=true] show the speed slider (from 0.5 to 3)\n * @param {boolean} [zoom=true] show the zoom slider\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, true),\n  volume: types.optional(types.boolean, true),\n  speed: types.optional(types.boolean, true),\n  regs: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model(\"AudioPlusModel\", {\n    id: types.identifier,\n    type: \"audio\",\n    _value: types.optional(types.string, \"\"),\n    playing: types.optional(types.boolean, false),\n    regions: types.array(AudioRegionModel),\n    height: types.optional(types.number, 128),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states\n        ? states.filter(s => s.isSelected && (getType(s).name === \"LabelsModel\" || getType(s).name === \"RatingModel\"))\n        : null;\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      return self.regions.map(r => r.toStateJSON());\n    },\n\n    /**\n     * Find region of audio\n     */\n    findRegion(start, end) {\n      let findedRegion = self.regions.find(r => r.start === start && r.end === end);\n      return findedRegion;\n    },\n\n    fromStateJSON(obj, fromModel) {\n      let r;\n      let m;\n\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n\n        return;\n      }\n\n      if (obj.value.labels) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      /**\n       *\n       */\n      const tree = {\n        pid: obj.id,\n        start: obj.value.start,\n        end: obj.value.end,\n        normalization: obj.normalization,\n      };\n\n      const region = self.findRegion(obj.value.start, obj.value.end);\n\n      if (fromModel) {\n        m = restoreNewsnapshot(fromModel);\n        // m.fromStateJSON(obj);\n\n        if (!region) {\n          tree.states = [m];\n          r = self.addRegion(tree);\n        } else {\n          region.states.push(m);\n        }\n      }\n\n      if (self._ws) {\n        self._ws.addRegion({\n          start: r.start,\n          end: r.end,\n        });\n      }\n\n      return r;\n    },\n\n    setRangeValue(val) {\n      self.rangeValue = val;\n    },\n\n    setPlaybackRate(val) {\n      self.playBackRate = val;\n    },\n\n    addRegion(ws_region) {\n      const states = self.activeStates();\n\n      const clonedStates = states\n        ? states.map(s => {\n            return cloneNode(s);\n          })\n        : null;\n\n      const find_r = self.findRegion(ws_region.start, ws_region.end);\n\n      if (self.findRegion(ws_region.start, ws_region.end)) {\n        find_r._ws_region = ws_region;\n        return find_r;\n      }\n\n      const bgColor =\n        states && states[0] ? Utils.Colors.convertToRGBA(states[0].getSelectedColor(), 0.3) : self.selectedregionbg;\n\n      const r = AudioRegionModel.create({\n        id: ws_region.id ? ws_region.id : guidGenerator(),\n        pid: ws_region.pid ? ws_region.pid : guidGenerator(),\n        start: ws_region.start,\n        end: ws_region.end,\n        regionbg: self.regionbg,\n        selectedregionbg: bgColor,\n        states: clonedStates,\n      });\n\n      r._ws_region = ws_region;\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      states && states.forEach(s => s.unselectAll());\n\n      return r;\n    },\n\n    /**\n     * Play and stop\n     */\n    handlePlay() {\n      self.playing = !self.playing;\n    },\n\n    onLoad(ws) {\n      self._ws = ws;\n\n      self.regions.forEach(obj => {\n        self._ws.addRegion({\n          start: obj.start,\n          end: obj.end,\n        });\n      });\n    },\n\n    wsCreated(ws) {\n      self._ws = ws;\n    },\n  }));\n\nconst AudioPlusModel = types.compose(\n  \"AudioPlusModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxAudioView = observer(({ store, item }) => {\n  if (!item._value) return null;\n\n  return (\n    <div>\n      <Waveform\n        src={item._value}\n        selectRegion={item.selectRegion}\n        handlePlay={item.handlePlay}\n        onCreate={item.wsCreated}\n        addRegion={item.addRegion}\n        onLoad={item.onLoad}\n        speed={item.speed}\n        zoom={item.zoom}\n        volume={item.volume}\n        regions={item.regs}\n        height={item.height}\n      />\n\n      <AudioControls item={item} />\n    </div>\n  );\n});\n\nconst HtxAudioPlus = inject(\"store\")(observer(HtxAudioView));\n\nRegistry.addTag(\"audioplus\", AudioPlusModel, HtxAudioPlus);\n\nexport { AudioRegionModel, AudioPlusModel, HtxAudioPlus };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { RectRegionModel } from \"../object/RectRegion\";\n\n/**\n * Rectangle\n * Rectangle is used to add rectangle (Bounding Box) to an image\n * @example\n * <View>\n *   <Rectangle name=\"rect-1\" toName=\"img-1\"></Rectangle>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name Rectangle\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of rectangle\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} [strokeColor=#f48a42] stroke color\n * @param {number=} [strokeWidth=1] width of the stroke\n * @param {boolean=} [canRotate=true] show or hide rotation handle\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.6\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokeWidth: types.optional(types.number, 1),\n  strokeColor: types.optional(types.string, \"#f48a42\"),\n\n  canrotate: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"rectangle\",\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }));\n\nconst RectangleModel = types.compose(\n  \"RectangleModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = () => {\n  return null;\n};\n\nRegistry.addTag(\"rectangle\", RectangleModel, HtxView);\n\nexport { HtxView, RectangleModel };\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\n\nimport { types } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { RectangleModel } from \"./Rectangle\";\nimport LabelMixin from \"../mixins/LabelMixin\";\n\n/**\n * RectangleLabels tag creates labeled rectangles\n * Used only for Image\n * @example\n * <View>\n *   <RectangleLabels name=\"labels\" toName=\"image\">\n *     <Label value=\"Person\"></Label>\n *     <Label value=\"Animal\"></Label>\n *   </RectangleLabels>\n *   <Image name=\"image\" value=\"$image\"></Image>\n * </View>\n * @name RectangleLabels\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of rectangle\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {boolean=} [canRotate=true] show or hide rotation handle\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n});\n\nconst ModelAttrs = types.model(\"RectangleLabelsModel\", {\n  id: types.optional(types.identifier, guidGenerator),\n  pid: types.optional(types.string, guidGenerator),\n  type: \"rectanglelabels\",\n  children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n});\n\nconst Model = LabelMixin.props({ _type: \"rectanglelabels\" }).views(self => ({\n  get shouldBeUnselected() {\n    return self.choice === \"single\";\n  },\n}));\n\nconst Composition = types.compose(\n  LabelsModel,\n  ModelAttrs,\n  RectangleModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst RectangleLabelsModel = types.compose(\n  \"RectangleLabelsModel\",\n  Composition,\n);\n\nconst HtxRectangleLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n});\n\nRegistry.addTag(\"rectanglelabels\", RectangleLabelsModel, HtxRectangleLabels);\n\nexport { HtxRectangleLabels, RectangleLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getParent, getRoot } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Rect, Text, Transformer } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RectangleLabelsModel } from \"../control/RectangleLabels\";\n\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\nimport Utils from \"../../utils\";\n\n/**\n * Rectangle object for Bounding Box\n *\n */\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"rectangleregion\",\n\n    x: types.number,\n    y: types.number,\n\n    relativeX: types.optional(types.number, 0),\n    relativeY: types.optional(types.number, 0),\n\n    relativeWidth: types.optional(types.number, 0),\n    relativeHeight: types.optional(types.number, 0),\n\n    _start_x: types.optional(types.number, 0),\n    _start_y: types.optional(types.number, 0),\n\n    width: types.number,\n    height: types.number,\n\n    scaleX: types.optional(types.number, 1),\n    scaleY: types.optional(types.number, 1),\n\n    rotation: types.optional(types.number, 0),\n\n    opacity: types.number,\n\n    fill: types.optional(types.boolean, true),\n    fillcolor: types.optional(types.string, \"blue\"),\n\n    strokeColor: types.optional(types.string, \"blue\"),\n    strokeWidth: types.optional(types.number, 1),\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, RectangleLabelsModel))),\n\n    wp: types.maybeNull(types.number),\n    hp: types.maybeNull(types.number),\n\n    sw: types.maybeNull(types.number),\n    sh: types.maybeNull(types.number),\n\n    coordstype: types.optional(types.enumeration([\"px\", \"perc\"]), \"px\"),\n\n    supportsTransform: true,\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    afterCreate() {\n      self._start_x = self.x;\n      self._start_y = self.y;\n\n      if (self.coordstype === \"perc\") {\n        self.relativeX = self.x;\n        self.relativeY = self.y;\n        self.relativeWidth = self.width;\n        self.relativeHeight = self.height;\n      }\n    },\n\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    coordsInside(x, y) {\n      // check if x and y are inside the rectangle\n      const rx = self.x;\n      const ry = self.y;\n      const rw = self.width * (self.scaleX || 1);\n      const rh = self.height * (self.scaleY || 1);\n\n      if (x > rx && x < rx + rw && y > ry && y < ry + rh) return true;\n\n      return false;\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    getCurrentCoordinates(x, y, width, height) {\n      // console.log(self.width * (self.scaleX || 1));\n    },\n\n    /**\n     * Boundg Box set position on canvas\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} rotation\n     */\n    setPosition(x, y, width, height, rotation) {\n      self.x = x;\n      self.y = y;\n      self.width = width;\n      self.height = height;\n\n      self.relativeX = (x / self.parent.stageWidth) * 100;\n      self.relativeY = (y / self.parent.stageHeight) * 100;\n\n      self.relativeWidth = (width / self.parent.stageWidth) * 100;\n      self.relativeHeight = (height / self.parent.stageHeight) * 100;\n\n      if (rotation < 0) {\n        self.rotation = (rotation % 360) + 360;\n      } else {\n        self.rotation = rotation % 360;\n      }\n    },\n\n    setScale(x, y) {\n      self.scaleX = x;\n      self.scaleY = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp, sw, sh) {\n      self.wp = wp;\n      self.hp = hp;\n\n      self.sw = sw;\n      self.sh = sh;\n\n      if (self.coordstype === \"px\") {\n        self.x = (sw * self.relativeX) / 100;\n        self.y = (sh * self.relativeY) / 100;\n        self.width = (sw * self.relativeWidth) / 100;\n        self.height = (sh * self.relativeHeight) / 100;\n      } else if (self.coordstype === \"perc\") {\n        self.x = (sw * self.x) / 100;\n        self.y = (sh * self.y) / 100;\n        self.width = (sw * self.width) / 100;\n        self.height = (sh * self.height) / 100;\n        self.coordstype = \"px\";\n      }\n    },\n\n    /**\n     * Format for sending to server\n     */\n    toStateJSON() {\n      const parent = self.parent;\n      let fromEl = parent.states()[0];\n\n      if (parent.states().length > 1) {\n        parent.states().forEach(state => {\n          if (state.type === \"rectanglelabels\") {\n            fromEl = state;\n          }\n        });\n      }\n\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: fromEl.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"rectangle\",\n          value: {\n            x: (self.x * 100) / self.parent.stageWidth,\n            y: (self.y * 100) / self.parent.stageHeight,\n            width: (self.width * (self.scaleX || 1) * 100) / self.parent.stageWidth, //  * (self.scaleX || 1)\n            height: (self.height * (self.scaleY || 1) * 100) / self.parent.stageHeight,\n            rotation: self.rotation,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst RectRegionModel = types.compose(\n  \"RectRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxRectangleView = ({ store, item }) => {\n  return (\n    <Fragment>\n      <Rect\n        x={item.x}\n        y={item.y}\n        width={item.width}\n        height={item.height}\n        fill={item.fill ? Utils.Colors.convertToRGBA(item.fillcolor, 0.4) : null}\n        stroke={item.strokeColor}\n        strokeWidth={item.strokeWidth}\n        strokeScaleEnabled={false}\n        shadowBlur={0}\n        scaleX={item.scaleX}\n        scaleY={item.scaleY}\n        opacity={item.opacity}\n        rotation={item.rotation}\n        name={item.id}\n        onTransformEnd={e => {\n          const t = e.target;\n\n          item.setPosition(\n            t.getAttr(\"x\"),\n            t.getAttr(\"y\"),\n            t.getAttr(\"width\"),\n            t.getAttr(\"height\"),\n            t.getAttr(\"rotation\"),\n          );\n          item.setScale(t.getAttr(\"scaleX\"), t.getAttr(\"scaleY\"));\n        }}\n        onDragEnd={e => {\n          const t = e.target;\n\n          item.setPosition(\n            t.getAttr(\"x\"),\n            t.getAttr(\"y\"),\n            t.getAttr(\"width\"),\n            t.getAttr(\"height\"),\n            t.getAttr(\"rotation\"),\n          );\n          item.setScale(t.getAttr(\"scaleX\"), t.getAttr(\"scaleY\"));\n        }}\n        dragBoundFunc={(pos, e) => {\n          let { x, y } = pos;\n\n          item.getCurrentCoordinates(x, y, item.width, 1);\n\n          let { stageHeight, stageWidth } = getParent(item, 2);\n\n          if (x <= 0) {\n            x = 0;\n          } else if (x >= stageWidth) {\n            x = stageWidth;\n          }\n\n          if (y < 0) {\n            y = 0;\n          } else if (y >= stageHeight) {\n            y = stageHeight;\n          }\n\n          return {\n            x: x,\n            y: y,\n          };\n        }}\n        onMouseOver={e => {\n          const stage = item.parent.stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(true);\n            stage.container().style.cursor = \"crosshair\";\n          } else {\n            stage.container().style.cursor = \"pointer\";\n          }\n        }}\n        onMouseOut={e => {\n          const stage = item.parent.stageRef;\n          stage.container().style.cursor = \"default\";\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(false);\n          }\n        }}\n        onClick={e => {\n          const stage = item.parent.stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            stage.container().style.cursor = \"default\";\n          }\n\n          item.setHighlight(false);\n          item.onClickRegion();\n        }}\n        draggable\n      />\n    </Fragment>\n  );\n};\n\nconst HtxRectangle = inject(\"store\")(observer(HtxRectangleView));\n\nRegistry.addTag(\"rectangleregion\", RectRegionModel, HtxRectangle);\n\nexport { RectRegionModel, HtxRectangle };\n","import React from \"react\";\n\nimport { observer } from \"mobx-react\";\nimport { types, getParent } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Rect, Circle } from \"react-konva\";\n\nconst PolygonPoint = types\n  .model({\n    init_x: types.optional(types.number, 0),\n    init_y: types.optional(types.number, 0),\n\n    x: types.number,\n    y: types.number,\n\n    index: types.number,\n\n    style: types.string,\n    size: types.string,\n    isMouseOverStartPoint: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    get parent() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    /**\n     * Triggered after create model\n     */\n    afterCreate() {\n      self.init_x = self.x;\n      self.init_y = self.y;\n    },\n\n    /**\n     * External function for Polygon Parent\n     * @param {number} x\n     * @param {number} y\n     */\n    movePoint(x, y) {\n      self.x = self.init_x + x;\n      self.y = self.init_y + y;\n    },\n\n    _movePoint(x, y) {\n      self.init_x = x;\n      self.init_y = y;\n\n      self.x = x;\n      self.y = y;\n    },\n\n    /**\n     * Close polygon\n     * @param {*} ev\n     */\n    closeStartPoint(ev) {\n      if (self.parent.mouseOverStartPoint) {\n        self.parent.closePoly();\n      }\n    },\n\n    handleMouseOverStartPoint(ev) {\n      const stage = self.parent.parent.stageRef;\n\n      stage.container().style.cursor = \"crosshair\";\n\n      /**\n       * Check if polygon > 2 points and closed point\n       */\n      if (self.parent.closed || self.parent.points.length < 3) return;\n\n      const startPoint = ev.target;\n\n      if (self.style === \"rectangle\") {\n        startPoint.setX(startPoint.x() - startPoint.width() / 2);\n        startPoint.setY(startPoint.y() - startPoint.height() / 2);\n      }\n\n      const scaleMap = {\n        small: 2,\n        medium: 3,\n        large: 4,\n      };\n\n      const scale = scaleMap[self.size];\n\n      startPoint.scale({ x: scale, y: scale });\n\n      self.parent.setMouseOverStartPoint(true);\n    },\n\n    handleMouseOutStartPoint(ev) {\n      const t = ev.target;\n\n      const stage = self.parent.parent.stageRef;\n      stage.container().style.cursor = \"default\";\n\n      if (self.style === \"rectangle\") {\n        t.setX(t.x() + t.width() / 2);\n        t.setY(t.y() + t.height() / 2);\n      }\n\n      t.scale({ x: 1, y: 1 });\n\n      self.parent.setMouseOverStartPoint(false);\n    },\n  }));\n\nconst PolygonPointView = observer(({ item, name }) => {\n  const sizes = {\n    small: 4,\n    medium: 8,\n    large: 12,\n  };\n\n  const stroke = {\n    small: 1,\n    medium: 2,\n    large: 3,\n  };\n\n  const w = sizes[item.size];\n\n  const startPointAttr =\n    item.index === 0\n      ? {\n          hitStrokeWidth: 12,\n          fill: item.parent.strokecolor ? item.parent.strokecolor : item.primary,\n          onMouseOver: item.handleMouseOverStartPoint,\n          onMouseOut: item.handleMouseOutStartPoint,\n          onClick: item.closeStartPoint,\n        }\n      : null;\n\n  const dragOpts = {\n    onDragMove: e => {\n      item._movePoint(e.target.attrs.x, e.target.attrs.y);\n    },\n\n    onMouseOver: e => {\n      const stage = item.parent.parent.stageRef;\n      stage.container().style.cursor = \"crosshair\";\n    },\n\n    onMouseOut: e => {\n      const stage = item.parent.parent.stageRef;\n      stage.container().style.cursor = \"default\";\n    },\n  };\n\n  if (item.style === \"circle\") {\n    return (\n      <Circle\n        key={name}\n        name={name}\n        x={item.x}\n        y={item.y}\n        radius={w}\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={stroke[item.size]}\n        dragOnTop={false}\n        onClick={ev => {\n          if (item.parent.mouseOverStartPoint) {\n            item.parent.closePoly();\n          }\n        }}\n        {...dragOpts}\n        {...startPointAttr}\n        draggable\n      />\n    );\n  } else {\n    return (\n      <Rect\n        name={name}\n        key={name}\n        x={item.x - w / 2}\n        y={item.y - w / 2}\n        width={w}\n        height={w}\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={stroke[item.size]}\n        dragOnTop={false}\n        {...dragOpts}\n        {...startPointAttr}\n        draggable\n      />\n    );\n  }\n});\n\nexport { PolygonPoint, PolygonPointView };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { PolygonRegionModel } from \"../object/PolygonRegion\";\n\n/**\n * Polygon tag\n * Polygon is used to add polygons to an image\n * @example\n * <View>\n *   <Polygon name=\"rect-1\" toName=\"img-1\" value=\"Add Rectangle\"></Polygon>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name Polygon\n * @param {string} name name of tag\n * @param {string} toname name of image to label\n * @param {number=} [opacity=0.6] opacity of polygon\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {small|medium|large=} [pointSize=medium] size of polygon handle points\n * @param {rectangle|circle=} [pointStyle=rectangle] style of points\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.6\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokewidth: types.optional(types.string, \"1\"),\n  strokecolor: types.optional(types.string, \"#f48a42\"),\n\n  pointsize: types.optional(types.string, \"medium\"),\n  pointstyle: types.optional(types.string, \"rectangle\"),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"polygon\",\n\n    // regions: types.array(RectRegionModel),\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states ? states.filter(c => c.isSelected === true) : null;\n    },\n  }))\n  .actions(self => ({}));\n\nconst PolygonModel = types.compose(\n  \"PolygonModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = inject(\"store\")(\n  observer(({ store, item }) => {\n    return null;\n  }),\n);\n\nRegistry.addTag(\"polygon\", PolygonModel, HtxView);\n\nexport { HtxView, PolygonModel };\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\n\nimport { types } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { PolygonModel } from \"./Polygon\";\nimport LabelMixin from \"../mixins/LabelMixin\";\n\n/**\n * PolygonLabels tag, create labeled polygons\n * @example\n * <View>\n *   <Image name=\"image\" value=\"$image\"></Image>\n *   <PolygonLabels name=\"lables\" toName=\"image\">\n *     <Label value=\"Car\"></Label>\n *     <Label value=\"Sign\"></Label>\n *   </PolygonLabels>\n * </View>\n * @name PolygonLabels\n * @param {string} name name of tag\n * @param {string} toname name of image to label\n * @param {number=} [opacity=0.6] opacity of polygon\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {small|medium|large=} [pointSize=medium] size of polygon handle points\n * @param {rectangle|circle=} [pointStyle=rectangle] style of points\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n});\n\nconst ModelAttrs = types.model(\"PolygonLabelsModel\", {\n  id: types.optional(types.identifier, guidGenerator),\n  pid: types.optional(types.string, guidGenerator),\n  type: \"polygonlabels\",\n  children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n});\n\nconst Model = LabelMixin.props({ _type: \"polygonlabels\" });\n\nconst Composition = types.compose(\n  LabelsModel,\n  ModelAttrs,\n  PolygonModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst PolygonLabelsModel = types.compose(\n  \"PolygonLabelsModel\",\n  Composition,\n);\n\nconst HtxPolygonLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n});\n\nRegistry.addTag(\"polygonlabels\", PolygonLabelsModel, HtxPolygonLabels);\n\nexport { HtxPolygonLabels, PolygonLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot, destroy, detach, getParent } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Group, Line } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport { PolygonPoint, PolygonPointView } from \"./PolygonPoint\";\n\nimport { PolygonLabelsModel } from \"../control/PolygonLabels\";\n\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nimport { green } from \"@ant-design/colors\";\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"polygonregion\",\n\n    opacity: types.number,\n    fillcolor: types.maybeNull(types.string),\n\n    strokewidth: types.number,\n    strokecolor: types.string,\n\n    pointsize: types.string,\n    pointstyle: types.string,\n\n    closed: types.optional(types.boolean, false),\n\n    points: types.array(PolygonPoint, []),\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, PolygonLabelsModel))),\n\n    mouseOverStartPoint: types.optional(types.boolean, false),\n\n    coordstype: types.optional(types.enumeration([\"px\", \"perc\"]), \"px\"),\n\n    fromName: types.maybeNull(types.string),\n\n    wp: types.maybeNull(types.number),\n    hp: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    /**\n     * Handler for mouse on start point of Polygon\n     * @param {boolean} val\n     */\n    setMouseOverStartPoint(value) {\n      self.mouseOverStartPoint = value;\n    },\n\n    handleMouseMove({ e, flattenedPoints }) {\n      const { offsetX: cursorX, offsetY: cursorY } = e.evt;\n      const point = getAnchorPoint({ flattenedPoints, cursorX, cursorY });\n\n      let x = point[0];\n      let y = point[1];\n\n      if (self.parent.zoomScale != 1) {\n        x = x * self.parent.zoomScale;\n        y = y * self.parent.zoomScale;\n      }\n\n      const group = e.currentTarget;\n      const layer = e.currentTarget.getLayer();\n\n      moveHoverAnchor({ point: [x, y], group, layer });\n    },\n\n    handleMouseLeave({ e }) {\n      removeHoverAnchor({ layer: e.currentTarget.getLayer() });\n    },\n\n    handleLineClick({ e, flattenedPoints, insertIdx }) {\n      e.cancelBubble = true;\n\n      if (!self.closed) return;\n\n      removeHoverAnchor({ layer: e.currentTarget.getLayer() });\n\n      const { offsetX: cursorX, offsetY: cursorY } = e.evt;\n      const point = getAnchorPoint({ flattenedPoints, cursorX, cursorY });\n\n      self.insertPoint(insertIdx, point[0], point[1]);\n    },\n\n    addPoint(x, y) {\n      if (self.closed) return;\n      self._addPoint(x, y);\n    },\n\n    insertPoint(insertIdx, x, y) {\n      const p = { x: x, y: y, size: self.pointsize, style: self.pointstyle, index: self.points.length };\n      self.points.splice(insertIdx, 0, p);\n    },\n\n    _addPoint(x, y) {\n      const index = self.points.length;\n      self.points.push({ x: x, y: y, size: self.pointsize, style: self.pointstyle, index: index });\n    },\n\n    closePoly() {\n      self.closed = true;\n      self.selectRegion();\n    },\n\n    canClose(x, y) {\n      if (self.points.length < 2) return false;\n\n      const p1 = self.points[0];\n      const p2 = { x: x, y: y };\n\n      var r = 50;\n      var dist_points = (p1[\"x\"] - p2[\"x\"]) * (p1[\"x\"] - p2[\"x\"]) + (p1[\"y\"] - p2[\"y\"]) * (p2[\"y\"] - p2[\"y\"]);\n\n      if (dist_points < r) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    destroyRegion() {\n      self.parent.setActivePolygon(null);\n      self.parent.deleteSelectedShape();\n      detach(self.points);\n      destroy(self.points);\n    },\n\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    setPosition(x, y, width, height, rotation) {\n      self.x = x;\n      self.y = y;\n      self.width = width;\n      self.height = height;\n\n      self.rotation = rotation;\n    },\n\n    setScale(x, y) {\n      self.scaleX = x;\n      self.scaleY = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp, sw, sh) {\n      self.wp = wp;\n      self.hp = hp;\n\n      if (!self.completion.sentUserGenerate && self.coordstype === \"perc\") {\n        self.points.map(p => {\n          const x = (sw * p.x) / 100;\n          const y = (sh * p.y) / 100;\n          self.coordstype = \"px\";\n          p._movePoint(x, y);\n        });\n      }\n    },\n\n    toStateJSON() {\n      const { naturalWidth, naturalHeight, stageWidth, stageHeight } = self.parent;\n\n      const perc_w = (stageWidth * 100) / naturalWidth;\n      const perc_h = (stageHeight * 100) / naturalHeight;\n\n      const perc_points = self.points.map(p => {\n        const orig_w = (p.x * 100) / perc_w;\n        const res_w = (orig_w * 100) / naturalWidth;\n\n        const orig_h = (p.y * 100) / perc_h;\n        const res_h = (orig_h * 100) / naturalHeight;\n\n        return [res_w, res_h];\n      });\n\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"polygon\",\n          value: {\n            points: perc_points,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst PolygonRegionModel = types.compose(\n  \"PolygonRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\n/**\n * Get coordinates of anchor point\n * @param {array} flattenedPoints\n * @param {number} cursorX coordinates of cursor X\n * @param {number} cursorY coordinates of cursor Y\n */\nfunction getAnchorPoint({ flattenedPoints, cursorX, cursorY }) {\n  const [point1X, point1Y, point2X, point2Y] = flattenedPoints;\n  const y =\n    ((point2X - point1X) * (point2X * point1Y - point1X * point2Y) +\n      (point2X - point1X) * (point2Y - point1Y) * cursorX +\n      (point2Y - point1Y) * (point2Y - point1Y) * cursorY) /\n    ((point2Y - point1Y) * (point2Y - point1Y) + (point2X - point1X) * (point2X - point1X));\n  const x =\n    cursorX -\n    ((point2Y - point1Y) *\n      (point2X * point1Y - point1X * point2Y + cursorX * (point2Y - point1Y) - cursorY * (point2X - point1X))) /\n      ((point2Y - point1Y) * (point2Y - point1Y) + (point2X - point1X) * (point2X - point1X));\n\n  return [x, y];\n}\n\nfunction getFlattenedPoints(points) {\n  const p = points.map(p => [p[\"x\"], p[\"y\"]]);\n  return p.reduce(function(flattenedPoints, point) {\n    return flattenedPoints.concat(point);\n  }, []);\n}\n\nfunction getHoverAnchor({ layer }) {\n  return layer.findOne(\".hoverAnchor\");\n}\n\n/**\n * Create new anchor for current polygon\n */\nfunction createHoverAnchor({ point, group, layer }) {\n  const hoverAnchor = new Konva.Circle({\n    name: \"hoverAnchor\",\n    x: point[0],\n    y: point[1],\n    stroke: green.primary,\n    fill: green[0],\n    strokeWidth: 2,\n    radius: 5,\n  });\n\n  group.add(hoverAnchor);\n  layer.draw();\n  return hoverAnchor;\n}\n\nfunction moveHoverAnchor({ point, group, layer }) {\n  const hoverAnchor = getHoverAnchor({ layer }) || createHoverAnchor({ point, group, layer });\n  hoverAnchor.to({ x: point[0], y: point[1], duration: 0 });\n}\n\nfunction removeHoverAnchor({ layer }) {\n  const hoverAnchor = getHoverAnchor({ layer });\n  if (!hoverAnchor) return;\n  hoverAnchor.destroy();\n  layer.draw();\n}\n\nconst HtxPolygonView = ({ store, item }) => {\n  /**\n   * Render line between 2 points\n   */\n  function renderLine({ points, idx1, idx2 }) {\n    const name = `border_${idx1}_${idx2}`;\n    const insertIdx = idx1 + 1; // idx1 + 1 or idx2\n    const flattenedPoints = getFlattenedPoints([points[idx1], points[idx2]]);\n    return (\n      <Group\n        key={name}\n        name={name}\n        onClick={e => item.handleLineClick({ e, flattenedPoints, insertIdx })}\n        onMouseMove={e => {\n          if (!item.closed) return;\n\n          item.handleMouseMove({ e, flattenedPoints });\n        }}\n        onMouseLeave={e => item.handleMouseLeave({ e })}\n      >\n        <Line\n          points={flattenedPoints}\n          stroke={item.strokecolor}\n          opacity={item.opacity}\n          lineJoin=\"bevel\"\n          strokeWidth={item.strokewidth}\n        />\n      </Group>\n    );\n  }\n\n  function renderLines(points) {\n    const name = \"borders\";\n    return (\n      <Group key={name} name={name}>\n        {points.map((p, idx) => {\n          const idx1 = idx;\n          const idx2 = idx === points.length - 1 ? 0 : idx + 1;\n          return renderLine({ points, idx1, idx2 });\n        })}\n      </Group>\n    );\n  }\n\n  function renderPoly(points) {\n    const name = \"poly\";\n    return (\n      <Group key={name} name={name}>\n        <Line\n          lineJoin=\"bevel\"\n          points={getFlattenedPoints(points)}\n          fill={item.strokecolor}\n          closed={true}\n          opacity={0.2}\n        />\n      </Group>\n    );\n  }\n\n  function renderCircle({ points, idx }) {\n    const name = `anchor_${points.length}_${idx}`;\n    const point = points[idx];\n\n    if (!item.closed || (item.closed && item.selected)) {\n      return <PolygonPointView item={point} name={name} key={name} />;\n    }\n  }\n\n  function renderCircles(points) {\n    const name = \"anchors\";\n    return (\n      <Group key={name} name={name}>\n        {points.map((p, idx) => renderCircle({ points, idx }))}\n      </Group>\n    );\n  }\n\n  return (\n    <Group\n      key={item.id ? item.id : guidGenerator(5)}\n      onDragStart={e => {\n        item.completion.setDragMode(true);\n      }}\n      dragBoundFunc={function(pos) {\n        let { x, y } = pos;\n        /* if (x < 0) x = 0; */\n        /* if (y < 0) y = 0; */\n        const r = item.parent.stageWidth - this.getAttr(\"width\");\n        const b = item.parent.stageHeight - this.getAttr(\"height\");\n\n        if (x > r) x = r;\n        if (y > b) y = b;\n\n        item.points.forEach(p => {\n          p.movePoint(x, y);\n        });\n\n        return { x: 0, y: 0 };\n      }}\n      onDragEnd={e => {\n        item.completion.setDragMode(false);\n\n        if (!item.closed) item.closePoly();\n\n        item.parent.setActivePolygon(null);\n\n        item.points.forEach(p => {\n          p.afterCreate();\n        });\n      }}\n      onMouseOver={e => {\n        const stage = item.parent.stageRef;\n\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(true);\n          stage.container().style.cursor = \"crosshair\";\n        } else {\n          stage.container().style.cursor = \"pointer\";\n        }\n      }}\n      onMouseOut={e => {\n        const stage = item.parent.stageRef;\n        stage.container().style.cursor = \"default\";\n\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(false);\n        }\n      }}\n      onClick={e => {\n        e.cancelBubble = true;\n\n        if (!item.closed) return;\n\n        const stage = item.parent.stageRef;\n\n        if (store.completionStore.selected.relationMode) {\n          stage.container().style.cursor = \"default\";\n        }\n\n        item.setHighlight(false);\n        item.onClickRegion();\n      }}\n      draggable\n    >\n      {item.mouseOverStartPoint}\n\n      {item.points ? renderPoly(item.points) : null}\n      {item.points ? renderLines(item.points) : null}\n      {item.points ? renderCircles(item.points) : null}\n    </Group>\n  );\n};\n\nconst HtxPolygon = inject(\"store\")(observer(HtxPolygonView));\n\nRegistry.addTag(\"polygonregion\", PolygonRegionModel, HtxPolygon);\n\nexport { PolygonRegionModel, HtxPolygon };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { KeyPointRegionModel } from \"../object/KeyPointRegion\";\n\n/**\n * KeyPoint tag\n * KeyPoint is used to add a keypoint to an image\n * @example\n * <View>\n *   <KeyPoint name=\"kp-1\" toName=\"img-1\"></KeyPoint>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name KeyPoint\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.9] opacity of keypoint\n * @param {string=} [fillColor=#8bad00] keypoint fill color\n * @param {number=} [strokeWidth=1] width of the stroke\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.9\"),\n  fillcolor: types.optional(types.string, \"#8bad00\"),\n\n  strokewidth: types.optional(types.string, \"1\"),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"keypoint\",\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    fromStateJSON(obj) {},\n  }));\n\nconst KeyPointModel = types.compose(\n  \"KeyPointModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = () => {\n  return null;\n};\n\nRegistry.addTag(\"keypoint\", KeyPointModel, HtxView);\n\nexport { HtxView, KeyPointModel };\n","import React, { Component } from \"react\";\n\nimport { observer } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { KeyPointModel } from \"./KeyPoint\";\n\n/**\n * KeyPointLabels tag\n * KeyPointLabels tag creates labeled keypoints\n * @example\n * <View>\n *   <KeyPointLabels name=\"kp-1\" toName=\"img-1\">\n *     <Label value=\"Face\"></Label>\n *     <Label value=\"Nose\"></Label>\n *   </KeyPointLabels>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name KeyPointLabels\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.9] opacity of keypoint\n * @param {string=} fillColor keypoint fill color, default is transparent\n * @param {number=} [strokeWidth=1] width of the stroke\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.9\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokewidth: types.optional(types.string, \"1\"),\n});\n\nconst Model = types\n  .model(\"KeyPointLabelesModel\", {\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n    type: \"keypointlabels\",\n    children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.keypointlabels) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.keypointlabels.forEach(l => {\n        const label = self.findLabel(l);\n\n        if (!label) throw new Error(\"No label \" + obj.value.label);\n\n        label.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(\n  LabelsModel,\n  KeyPointModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst KeyPointLabelsModel = types.compose(\n  \"KeyPointLabelsModel\",\n  Composition,\n);\n\nconst HtxKeyPointLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n});\n\nRegistry.addTag(\"keypointlabels\", KeyPointLabelsModel, HtxKeyPointLabels);\n\nexport { HtxKeyPointLabels, KeyPointLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Circle, Text } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { KeyPointLabelsModel } from \"../control/KeyPointLabels\";\n\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"keypointregion\",\n\n    x: types.number,\n    y: types.number,\n    width: types.number,\n\n    opacity: types.number,\n    fillcolor: types.maybeNull(types.string),\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, KeyPointLabelsModel))),\n\n    sw: types.maybeNull(types.number),\n    sh: types.maybeNull(types.number),\n\n    coordstype: types.optional(types.enumeration([\"px\", \"perc\"]), \"px\"),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    setPosition(x, y) {\n      self.x = x;\n      self.y = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp, sw, sh) {\n      // self.wp = wp;\n      // self.hp = hp;\n\n      self.sw = sw;\n      self.sh = sh;\n\n      if (self.coordstype == \"perc\") {\n        self.x = (sw * self.x) / 100;\n        self.y = (sh * self.y) / 100;\n        self.width = (sw * self.width) / 100;\n        self.coordstype = \"px\";\n      }\n    },\n\n    toStateJSON() {\n      const parent = self.parent;\n      const from = parent.states()[0];\n\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: from.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"keypoint\",\n          value: {\n            x: (self.x * 100) / self.parent.stageWidth,\n            y: (self.y * 100) / self.parent.stageHeight,\n            width: (self.width * 100) / self.parent.stageWidth, //  * (self.scaleX || 1)\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst KeyPointRegionModel = types.compose(\n  \"KeyPointRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxKeyPointView = ({ store, item }) => {\n  const self = this;\n  const { name, wwidth, wheight, onChangedPosition } = item;\n\n  const wp = item.wp || item.parent.stageWidth / item.parent.naturalWidth;\n  const hp = item.hp || item.parent.stageHeight / item.parent.naturalHeight;\n\n  const x = item.x;\n  const y = item.y;\n  const w = item.width;\n\n  const props = {};\n\n  props[\"opacity\"] = item.opacity;\n\n  if (item.fillcolor) {\n    props[\"fill\"] = item.fillcolor;\n  }\n\n  props[\"stroke\"] = item.strokecolor;\n  props[\"strokeWidth\"] = item.strokewidth;\n  props[\"strokeScaleEnabled\"] = false;\n  props[\"shadowBlur\"] = 0;\n\n  if (item.highlighted) {\n    props[\"stroke\"] = \"#ff0000\";\n  }\n\n  return (\n    <Fragment>\n      <Circle\n        x={x}\n        y={y}\n        radius={item.width}\n        name={item.id}\n        onDragEnd={e => {\n          const t = e.target;\n          item.setPosition(t.getAttr(\"x\"), t.getAttr(\"y\"));\n        }}\n        dragBoundFunc={function(pos) {\n          let { x, y } = pos;\n\n          if (x < 0) x = 0;\n          if (y < 0) y = 0;\n\n          return {\n            x: x,\n            y: y,\n          };\n        }}\n        onMouseOver={e => {\n          const stage = item.parent.stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(true);\n            stage.container().style.cursor = \"crosshair\";\n          } else {\n            stage.container().style.cursor = \"pointer\";\n          }\n        }}\n        onMouseOut={e => {\n          const stage = item.parent.stageRef;\n          stage.container().style.cursor = \"default\";\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(false);\n          }\n        }}\n        onClick={e => {\n          const stage = item.parent.stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            stage.container().style.cursor = \"default\";\n          }\n\n          item.setHighlight(false);\n          item.onClickRegion();\n        }}\n        {...props}\n        draggable\n      />\n    </Fragment>\n  );\n};\n\nconst HtxKeyPoint = inject(\"store\")(observer(HtxKeyPointView));\n\nRegistry.addTag(\"keypointregion\", KeyPointRegionModel, HtxKeyPoint);\n\nexport { KeyPointRegionModel, HtxKeyPoint };\n","import React, { Component } from \"react\";\nimport { Transformer } from \"react-konva\";\n\nexport default class TransformerComponent extends Component {\n  componentDidMount() {\n    this.checkNode();\n  }\n\n  componentDidUpdate() {\n    this.checkNode();\n  }\n\n  checkNode() {\n    // here we need to manually attach or detach Transformer node\n    const stage = this.transformer.getStage();\n    const { selectedShape } = this.props;\n\n    if (!selectedShape) {\n      this.transformer.detach();\n      this.transformer.getLayer().batchDraw();\n      return;\n    }\n\n    if (!selectedShape.supportsTransform) return;\n\n    const selectedNode = stage.findOne(\".\" + selectedShape.id);\n    // do nothing if selected node is already attached\n    if (selectedNode === this.transformer.node()) {\n      return;\n    }\n\n    if (selectedNode) {\n      // attach to another node\n      this.transformer.attachTo(selectedNode);\n    } else {\n      // remove transformer\n      this.transformer.detach();\n    }\n    this.transformer.getLayer().batchDraw();\n  }\n\n  render() {\n    return (\n      <Transformer\n        resizeEnabled={true}\n        keepRatio={false}\n        rotateEnabled={this.props.rotateEnabled}\n        boundBoxFunc={(oldBox, newBox) => {\n          newBox.width = Math.max(30, newBox.width);\n          newBox.height = Math.max(30, newBox.height);\n          return newBox;\n        }}\n        anchorSize={8}\n        ref={node => {\n          this.transformer = node;\n        }}\n      />\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport { Button, Divider, Icon, Slider } from \"antd\";\nimport { observer } from \"mobx-react\";\n\nimport styles from \"./ImageControls.module.scss\";\n\nexport default observer(\n  class ImageControls extends Component {\n    render() {\n      /**\n       * Control for brightness\n       */\n      let brightnessControl = (\n        <Fragment>\n          <Slider\n            defaultValue={100}\n            max={200}\n            min={0}\n            vertical\n            tipFormatter={null}\n            style={{ height: 50 }}\n            onChange={value => {\n              this.props.updateBrightness(value);\n            }}\n          />\n        </Fragment>\n      );\n      /**\n       * Control for zoom\n       */\n      let zoomControls = (\n        <Fragment>\n          <Button\n            shape=\"circle\"\n            icon=\"zoom-in\"\n            className={styles.button}\n            onClick={event => {\n              this.props.handleZoom(1.2);\n            }}\n          ></Button>\n          <Button\n            shape=\"circle\"\n            icon=\"zoom-out\"\n            className={styles.button}\n            onClick={() => {\n              this.props.handleZoom(0.8);\n            }}\n          ></Button>\n        </Fragment>\n      );\n      return (\n        <div className={styles.block}>\n          {this.props.item.brightness ? brightnessControl : null}\n          {this.props.item.zoom ? zoomControls : null}\n        </div>\n      );\n    }\n  },\n);\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Layer, Rect } from \"react-konva\";\n\n/**\n * Create grid for Image Canvas\n * @param {number} width\n * @param {number} height\n * @param {number} nodeSize\n */\nconst createGrid = (width, height, nodeSize) => {\n  return [...Array(width)]\n    .map((_, col) =>\n      [...Array(height)].map((_, row) => ({\n        col,\n        row,\n        x: col * nodeSize,\n        y: row * nodeSize,\n        fill: \"#fff\",\n      })),\n    )\n    .reduce((p, c) => [...p, ...c]);\n};\n\nexport default observer(\n  class ImageGrid extends Component {\n    render() {\n      const { item } = this.props;\n\n      const grid = createGrid(\n        Math.ceil(item.stageWidth / item.gridSize),\n        Math.ceil(item.stageHeight / item.gridSize),\n        item.gridSize,\n      );\n\n      return (\n        <Layer opacity={0.15} name=\"ruler\">\n          {Object.values(grid).map((n, i) => (\n            <Rect\n              key={i}\n              x={n.x}\n              y={n.y}\n              width={item.gridSize}\n              height={item.gridSize}\n              stroke={item.gridColor}\n              strokeWidth={1}\n            />\n          ))}\n        </Layer>\n      );\n    }\n  },\n);\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { getParent, getEnv } from \"mobx-state-tree\";\nimport { Stage, Layer, Rect, Group, Line } from \"react-konva\";\n\nimport Tree from \"../../core/Tree\";\nimport ImageTransformer from \"../ImageTransformer/ImageTransformer\";\nimport ImageControls from \"../ImageControls/ImageControls\";\nimport ImageGrid from \"../ImageGrid/ImageGrid\";\n\nexport default observer(\n  class ImageView extends Component {\n    constructor(props) {\n      super(props);\n\n      this.updateDimensions = this.updateDimensions.bind(this);\n    }\n    /**\n     * Handler of click on Image\n     */\n    handleOnClick = ev => {\n      const { item } = this.props;\n\n      return item.onImageClick(ev);\n    };\n\n    /**\n     * Handler of mouse up\n     */\n    handleMouseUp = e => {\n      const { item } = this.props;\n\n      item.freezeHistory();\n\n      if (item.mode === \"drawing\") {\n        /**\n         * Set mode of Image for \"view\"\n         */\n        item.setMode(\"viewing\");\n\n        /**\n         * Constants of min size of bounding box\n         */\n        const minSize = { width: 3, height: 3 };\n\n        /**\n         * Current shape\n         */\n        const currentShape = item.detachActiveShape();\n\n        /**\n         * Check for minimal size of boundng box\n         */\n        if (currentShape.width > minSize.width && currentShape.height > minSize.height) item.addShape(currentShape);\n      }\n    };\n\n    handleMouseMove = e => {\n      const { item } = this.props;\n      item.freezeHistory();\n      if (item.mode === \"drawing\") {\n        const x = (e.evt.offsetX - item.zoomingPositionX) / item.zoomScale;\n        const y = (e.evt.offsetY - item.zoomingPositionY) / item.zoomScale;\n\n        item.updateDraw({ x: x, y: y });\n      }\n\n      item.setPointerPosition({ x: e.evt.offsetX, y: e.evt.offsetY });\n    };\n\n    handleMouseOver = e => {\n      const { item } = this.props;\n\n      item.freezeHistory();\n    };\n\n    handleStageMouseDown = e => {\n      const { item } = this.props;\n      item.freezeHistory();\n\n      if (item.controlButtonType === \"PolygonLabelsModel\") {\n        return;\n      }\n\n      if (e.target === e.target.getStage() || (e.target.parent && e.target.parent.attrs.name === \"ruler\")) {\n        // draw rect\n\n        const x = (e.evt.offsetX - item.zoomingPositionX) / item.zoomScale;\n        const y = (e.evt.offsetY - item.zoomingPositionY) / item.zoomScale;\n\n        item.startDraw({ x: x, y: y });\n\n        return;\n      }\n\n      // clicked on transformer - do nothing\n      const clickedOnTransformer = e.target.getParent().className === \"Transformer\";\n      if (clickedOnTransformer) {\n        return;\n      }\n\n      return true;\n    };\n\n    /**\n     * Update brightness of Image\n     */\n    updateBrightness = range => {\n      const { item } = this.props;\n      item.freezeHistory();\n\n      item.setBrightnessGrade(range);\n    };\n\n    /**\n     * Handle to zoom\n     */\n    handleZoom = e => {\n      /**\n       * Disable if user doesn't use ctrl\n       */\n      if (e.evt && !e.evt.ctrlKey) {\n        return;\n      } else if (e.evt && e.evt.ctrlKey) {\n        /**\n         * Disable scrolling page\n         */\n        e.evt.preventDefault();\n      }\n\n      const { item } = this.props;\n      item.freezeHistory();\n\n      const stage = item.stageRef;\n      const scaleBy = parseFloat(item.zoomby);\n      const oldScale = stage.scaleX();\n\n      let mousePointTo;\n      let newScale;\n      let pos;\n      let newPos;\n\n      if (e.evt) {\n        mousePointTo = {\n          x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n          y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale,\n        };\n\n        newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n        newPos = {\n          x: -(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale,\n          y: -(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale,\n        };\n      } else {\n        pos = {\n          x: stage.width() / 2,\n          y: stage.height() / 2,\n        };\n\n        mousePointTo = {\n          x: pos.x / oldScale - stage.x() / oldScale,\n          y: pos.y / oldScale - stage.y() / oldScale,\n        };\n\n        newScale = Math.max(0.05, oldScale * e);\n\n        newPos = {\n          x: -(mousePointTo.x - pos.x / newScale) * newScale,\n          y: -(mousePointTo.y - pos.y / newScale) * newScale,\n        };\n      }\n\n      if (item.negativezoom !== true && newScale <= 1) {\n        item.setZoom(1, 0, 0);\n        stage.scale({ x: 1, y: 1 });\n        stage.position({ x: 0, y: 0 });\n        stage.batchDraw();\n        return;\n      }\n\n      stage.scale({ x: newScale, y: newScale });\n\n      item.setZoom(newScale, newPos.x, newPos.y);\n      stage.position(newPos);\n      stage.batchDraw();\n    };\n\n    renderRulers() {\n      const { item } = this.props;\n      const width = 1;\n      const color = \"white\";\n\n      return (\n        <Group\n          name=\"ruler\"\n          onClick={ev => {\n            ev.cancelBubble = false;\n          }}\n        >\n          <Line\n            x={0}\n            y={item.cursorPositionY}\n            points={[0, 0, item.stageWidth, 0]}\n            strokeWidth={width}\n            stroke={color}\n            tension={0}\n            dash={[4, 4]}\n            closed\n          />\n          <Line\n            x={item.cursorPositionX}\n            y={0}\n            points={[0, 0, 0, item.stageHeight]}\n            strokeWidth={width}\n            stroke={color}\n            tension={0}\n            dash={[1.5]}\n            closed\n          />\n        </Group>\n      );\n    }\n\n    updateDimensions() {\n      this.props.item.onResizeSize(this.container.offsetWidth, this.container.offsetHeight, true);\n    }\n\n    componentDidMount() {\n      window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n\n    render() {\n      const { item, store } = this.props;\n\n      // TODO fix me\n      if (!store.task) return null;\n\n      const divStyle = {\n        overflow: \"hidden\",\n        // width: item.stageWidth + \"px\",\n      };\n\n      const imgStyle = {\n        width: item.width,\n        maxWidth: item.maxwidth,\n        transformOrigin: \"left top\",\n        filter: `brightness(${item.brightnessGrade}%)`,\n      };\n\n      if (item.zoomScale !== 1) {\n        let { zoomingPositionX, zoomingPositionY } = item;\n        const translate = \"translate(\" + zoomingPositionX + \"px,\" + zoomingPositionY + \"px) \";\n        imgStyle[\"transform\"] = translate + \"scale(\" + item.resize + \", \" + item.resize + \")\";\n      }\n\n      if (item.hasStates && item._value.length > 0) {\n        return (\n          <div\n            style={{\n              position: \"relative\",\n              display: \"flex\",\n              alignItems: \"flex-start\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <div\n              ref={node => {\n                this.container = node;\n              }}\n              style={divStyle}\n            >\n              <img style={imgStyle} src={item._value} onLoad={item.updateIE} onClick={this.handleOnClick} alt=\"LS\" />\n            </div>\n            <Stage\n              ref={ref => {\n                item.setStageRef(ref);\n              }}\n              style={{ position: \"absolute\", top: 0, left: 0, brightness: \"150%\" }}\n              width={item.stageWidth}\n              height={item.stageHeight}\n              scaleX={item.scale}\n              scaleY={item.scale}\n              onDblClick={this.handleDblClick}\n              onClick={this.handleOnClick}\n              onMouseDown={this.handleStageMouseDown}\n              onMouseMove={this.handleMouseMove}\n              onMouseUp={this.handleMouseUp}\n              onWheel={item.zoom ? this.handleZoom : () => {}}\n            >\n              {item.grid && item.sizeUpdated && <ImageGrid item={item} />}\n              <Layer>\n                {item.shapes.map(shape => {\n                  return Tree.renderItem(shape);\n                })}\n                {item.activeShape && Tree.renderItem(item.activeShape)}\n\n                <ImageTransformer rotateEnabled={item.controlButton().canrotate} selectedShape={item.selectedShape} />\n              </Layer>\n            </Stage>\n            {item.zoom || item.brightness ? (\n              <ImageControls item={item} handleZoom={this.handleZoom} updateBrightness={this.updateBrightness} />\n            ) : null}\n          </div>\n        );\n      } else {\n        divStyle[\"marginTop\"] = \"1em\";\n        return (\n          <div style={divStyle}>\n            <img style={imgStyle} src={item._value} onLoad={item.updateIE} />\n          </div>\n        );\n      }\n    }\n  },\n);\n","import React, { Component } from \"react\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport {\n  detach,\n  types,\n  flow,\n  getParent,\n  getType,\n  getParentOfType,\n  destroy,\n  getRoot,\n  isValidReference,\n} from \"mobx-state-tree\";\n\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, cloneNode, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { RectRegionModel } from \"./RectRegion\";\nimport { PolygonRegionModel } from \"./PolygonRegion\";\nimport { KeyPointRegionModel } from \"./KeyPointRegion\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Infomodal from \"../../components/Infomodal/Infomodal\";\n\nimport ImageView from \"../../components/ImageView/ImageView\";\n\n/**\n * Image tag shows an image on the page\n * @example\n * <View>\n *   <Image value=\"$url\"></Image>\n * </View>\n * @example\n * <View>\n *   <Image value=\"https://imgflip.com/s/meme/Leonardo-Dicaprio-Cheers.jpg\" width=\"100%\" maxWidth=\"750px\"></Image>\n * </View>\n * @name Image\n * @param {string} name name of the element\n * @param {string} value value\n * @param {string=} [width=100%] image width\n * @param {string=} [maxWidth=750px] image maximum width\n * @param {boolean=} zoom enable zooming an image by the mouse wheel\n * @param {boolean=} negativeZoom enable zooming out an image\n * @param {float=} [zoomBy=1.1] scale factor\n * @param {boolean=} [grid=false] show grid\n * @param {number=} [gridSize=30] size of the grid\n * @param {string=} [gridColor=\"#EEEEF4\"] color of the grid, opacity is 0.15\n * @param {boolean=} showMousePos show mouse position coordinates under an image\n * @param {boolean} brightness brightness of the image\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  resize: types.maybeNull(types.number),\n  width: types.optional(types.string, \"100%\"),\n  maxwidth: types.optional(types.string, \"750px\"),\n\n  // rulers: types.optional(types.boolean, true),\n  grid: types.optional(types.boolean, false),\n  gridSize: types.optional(types.number, 30),\n  gridColor: types.optional(types.string, \"#EEEEF4\"),\n\n  zoom: types.optional(types.boolean, false),\n  negativezoom: types.optional(types.boolean, false),\n  zoomby: types.optional(types.string, \"1.1\"),\n\n  brightness: types.optional(types.boolean, false),\n\n  showmousepos: types.optional(types.boolean, false),\n});\n\nconst IMAGE_CONSTANTS = {\n  rectangleModel: \"RectangleModel\",\n  rectangleLabelsModel: \"RectangleLabelsModel\",\n  rectanglelabels: \"rectanglelabels\",\n  keypointlabels: \"keypointlabels\",\n  polygonlabels: \"polygonlabels\",\n};\n\n/**\n * Reverse coordinates if user drags left and up\n * @param {*} r1\n * @param {*} r2\n */\nfunction reverseCoordinates(r1, r2) {\n  let r1X = r1.x,\n    r1Y = r1.y,\n    r2X = r2.x,\n    r2Y = r2.y,\n    d;\n\n  if (r1X > r2X) {\n    d = Math.abs(r1X - r2X);\n    r1X = r2X;\n    r2X = r1X + d;\n  }\n\n  if (r1Y > r2Y) {\n    d = Math.abs(r1Y - r2Y);\n    r1Y = r2Y;\n    r2Y = r1Y + d;\n  }\n  /**\n   * Return the corrected rect\n   */\n  return { x1: r1X, y1: r1Y, x2: r2X, y2: r2Y };\n}\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"image\",\n    _value: types.optional(types.string, \"\"),\n\n    sizeUpdated: types.optional(types.boolean, false),\n\n    /**\n     * Natural sizes of Image\n     * Constants\n     */\n    naturalWidth: types.optional(types.integer, 1),\n    naturalHeight: types.optional(types.integer, 1),\n\n    /**\n     * Initial width and height of the image\n     */\n    initialWidth: types.optional(types.integer, 1),\n    initialHeight: types.optional(types.integer, 1),\n\n    stageWidth: types.optional(types.integer, 1),\n    stageHeight: types.optional(types.integer, 1),\n\n    /**\n     * Zoom Scale\n     */\n    zoomScale: types.optional(types.number, 1),\n\n    /**\n     * Coordinates of left top corner\n     * Default: { x: 0, y: 0 }\n     */\n    zoomingPositionX: types.maybeNull(types.number),\n    zoomingPositionY: types.maybeNull(types.number),\n\n    /**\n     * Brightness of Canvas\n     */\n    brightnessGrade: types.optional(types.number, 100),\n\n    /**\n     * Cursor coordinates\n     */\n    cursorPositionX: types.optional(types.number, 0),\n    cursorPositionY: types.optional(types.number, 0),\n\n    /**\n     * Mode\n     */\n    mode: types.optional(types.enumeration([\"drawing\", \"viewing\"]), \"viewing\"),\n\n    selectedShape: types.safeReference(types.union(RectRegionModel, PolygonRegionModel, KeyPointRegionModel)),\n    activePolygon: types.maybeNull(types.safeReference(PolygonRegionModel)),\n\n    activeShape: types.maybeNull(RectRegionModel),\n\n    shapes: types.array(types.union(RectRegionModel, PolygonRegionModel, KeyPointRegionModel), []),\n  })\n  .views(self => ({\n    /**\n     * @return {boolean}\n     */\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    /**\n     * @return {object}\n     */\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    /**\n     * @return {object}\n     */\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    controlButton() {\n      const names = self.states();\n\n      let returnedControl = names[0];\n\n      names.forEach(item => {\n        if (item.type === IMAGE_CONSTANTS.rectanglelabels) {\n          returnedControl = item;\n        }\n      });\n\n      return returnedControl;\n    },\n\n    get controlButtonType() {\n      const name = self.controlButton();\n      return getType(name).name;\n    },\n  }))\n  .actions(self => ({\n    freezeHistory() {\n      getParent(self, 3).history.freeze();\n    },\n    /**\n     * Request to HTTP Basic Auth\n     */\n    getSecureResource(store) {\n      const requestToResource = flow(function*() {\n        try {\n          const req = yield store.fetchAuth(self._value, {\n            username: store.task.auth.username,\n            password: store.task.auth.password,\n          });\n\n          return req;\n        } catch (err) {\n          console.log(err);\n        }\n      });\n\n      return requestToResource()\n        .then(response => {\n          return response.blob();\n        })\n        .then(data => {\n          return URL.createObjectURL(data);\n        });\n    },\n\n    /**\n     * Update brightnessGrade of Image\n     * @param {number} value\n     */\n    setBrightnessGrade(value) {\n      self.brightnessGrade = value;\n    },\n\n    /**\n     * Set pointer of X and Y\n     */\n    setPointerPosition({ x, y }) {\n      self.freezeHistory();\n      self.cursorPositionX = x;\n      self.cursorPositionY = y;\n    },\n\n    /**\n     * Set zoom\n     */\n    setZoom(scale, x, y) {\n      self.resize = scale;\n      self.zoomScale = scale;\n      self.zoomingPositionX = x;\n      self.zoomingPositionY = y;\n    },\n\n    /**\n     * Set mode of Image (drawing and viewing)\n     * @param {string} mode\n     */\n    setMode(mode) {\n      self.mode = mode;\n    },\n\n    updateIE(ev) {\n      const { width, height, naturalWidth, naturalHeight, userResize } = ev.target;\n\n      self.naturalWidth = naturalWidth;\n      self.naturalHeight = naturalHeight;\n      self.stageWidth = width;\n      self.stageHeight = height;\n      self.sizeUpdated = true;\n\n      self.shapes.forEach(shape => {\n        shape.updateImageSize(width / naturalWidth, height / naturalHeight, width, height, userResize);\n      });\n    },\n\n    setStageRef(ref) {\n      self.stageRef = ref;\n      self.initialWidth = ref && ref.attrs && ref.attrs.width ? ref.attrs.width : 1;\n      self.initialHeight = ref && ref.attrs && ref.attrs.height ? ref.attrs.height : 1;\n    },\n\n    /**\n     * Set active Polygon\n     */\n    setActivePolygon(poly) {\n      self.activePolygon = poly;\n    },\n\n    detachActivePolygon() {\n      return detach(self.activePolygon);\n    },\n\n    deleteActivePolygon() {\n      if (self.activePolygon) destroy(self.activePolygon);\n    },\n\n    deleteSelectedShape() {\n      if (self.selectedShape) destroy(self.selectedShape);\n    },\n\n    setSelected(shape) {\n      self.selectedShape = shape;\n    },\n\n    detachActiveShape(shape) {\n      return detach(self.activeShape);\n    },\n\n    addShape(shape) {\n      self.shapes.push(shape);\n      self.completion.addRegion(shape);\n      self.setSelected(shape.id);\n      shape.selectRegion();\n    },\n\n    removeShape(shape) {\n      destroy(shape);\n    },\n\n    startDraw({ x, y }) {\n      let rect;\n      let stroke = self.controlButton().strokecolor;\n\n      if (self.controlButtonType === IMAGE_CONSTANTS.rectangleModel) {\n        self.setMode(\"drawing\");\n        rect = self._addRect({ x: x, y: y, sh: 1, sw: 1, stroke: stroke, states: null, coordstype: \"px\", noadd: true });\n      } else if (self.controlButtonType === IMAGE_CONSTANTS.rectangleLabelsModel) {\n        self.lookupStates(null, (_, states) => {\n          if (states && states.length) {\n            stroke = states[0].getSelectedColor();\n          }\n\n          self.setMode(\"drawing\");\n          rect = self._addRect({\n            x: x,\n            y: y,\n            sh: 1,\n            sw: 1,\n            stroke: stroke,\n            states: states,\n            coordstype: \"px\",\n            noadd: true,\n          });\n        });\n      }\n\n      self.activeShape = rect;\n    },\n\n    updateDraw({ x, y }) {\n      const shape = self.activeShape;\n      self.freezeHistory();\n\n      const { x1, y1, x2, y2 } = reverseCoordinates({ x: shape._start_x, y: shape._start_y }, { x: x, y: y });\n\n      shape.setPosition(x1, y1, x2 - x1, y2 - y1, shape.rotation);\n    },\n\n    /**\n     * Lookup states\n     * @param {event} ev\n     * @param {function} fun\n     */\n    lookupStates(ev, fun) {\n      /**\n       * Array of states\n       */\n      const states = self.completion.toNames.get(self.name);\n      self.freezeHistory();\n\n      /**\n       * Find active states\n       */\n      const activeStates = states\n        ? states\n            .filter(c => c.isSelected)\n            .filter(\n              c =>\n                c.type === IMAGE_CONSTANTS.rectanglelabels ||\n                c.type === IMAGE_CONSTANTS.keypointlabels ||\n                c.type === IMAGE_CONSTANTS.polygonlabels,\n            )\n        : null;\n\n      const clonedStates = activeStates ? activeStates.map(s => cloneNode(s)) : null;\n\n      if (clonedStates.length !== 0) {\n        fun(ev, clonedStates);\n        activeStates && activeStates.forEach(s => s.type !== \"choices\" && s.unselectAll());\n      }\n    },\n\n    onImageClick(ev) {\n      const dispmap = {\n        PolygonModel: ev => self.addPolyEv(ev),\n        KeyPointModel: ev => self._addKeyPointEv(ev),\n\n        PolygonLabelsModel: ev => {\n          if (self.activePolygon && !self.activePolygon.closed) {\n            self.addPolyEv(ev);\n          } else {\n            self.completion.setLocalUpdate(true);\n            self.lookupStates(ev, self.addPolyEv);\n          }\n        },\n        KeyPointLabelsModel: ev => {\n          self.lookupStates(ev, self._addKeyPointEv);\n        },\n      };\n\n      if (dispmap[self.controlButtonType]) {\n        return dispmap[self.controlButtonType](ev);\n      }\n    },\n\n    _addKeyPointEv(ev, states) {\n      const x = (ev.evt.offsetX - self.zoomingPositionX) / self.zoomScale;\n      const y = (ev.evt.offsetY - self.zoomingPositionY) / self.zoomScale;\n\n      const c = self.controlButton();\n\n      let fillcolor = c.fillcolor;\n      if (states && states.length) {\n        fillcolor = states[0].getSelectedColor();\n      }\n\n      self._addKeyPoint(x, y, c.strokewidth, fillcolor, states);\n    },\n\n    _addKeyPoint(x, y, width, fillcolor, states, coordstype) {\n      const c = self.controlButton();\n      const kp = KeyPointRegionModel.create({\n        id: guidGenerator(),\n        x: x,\n        y: y,\n        width: parseFloat(width),\n        opacity: parseFloat(c.opacity),\n        fillcolor: fillcolor,\n        states: states,\n        coordstype: coordstype,\n      });\n\n      self.addShape(kp);\n    },\n\n    _addRectEv(ev, states) {\n      const iw = 200;\n      const ih = 200;\n\n      // based on image width and height we can place rect somewhere\n      // in the center\n      const sw = 100;\n      const sh = 100;\n      // const name = guidGenerator();\n\n      let stroke = self.controlButton().strokecolor;\n      // let stroke = self.editor.rectstrokecolor;\n      // const states = self.states;\n      // TODO you may need to filter this states, check Text.js\n      if (states && states.length) {\n        stroke = states[0].getSelectedColor();\n      }\n\n      const wp = self.stageWidth / self.naturalWidth;\n      const hp = self.stageHeight / self.naturalHeight;\n\n      const wx = ev.evt.offsetX;\n      const wy = ev.evt.offsetY;\n\n      return self._addRect({\n        x: Math.floor(wx - sw / 2),\n        y: Math.floor(wy - sh / 2),\n        sw: sw,\n        sh: sh,\n        stroke: stroke,\n        states: states,\n      });\n    },\n\n    _addRect({ x, y, sw, sh, stroke, states, coordstype, noadd, rotation }) {\n      const c = self.controlButton();\n\n      let localStates = states;\n\n      if (states && !states.length) {\n        localStates = [states];\n      }\n\n      const rect = RectRegionModel.create({\n        id: guidGenerator(),\n\n        x: x,\n        y: y,\n\n        width: sw,\n        height: sh,\n\n        opacity: parseFloat(c.opacity),\n        fillcolor: c.fillcolor ? c.fillcolor : stroke,\n\n        strokeWidth: c.strokeWidth,\n        strokeColor: stroke,\n\n        states: localStates,\n\n        rotation: rotation,\n\n        coordstype: coordstype,\n      });\n\n      if (noadd !== true) {\n        self.addShape(rect);\n      }\n\n      return rect;\n    },\n\n    addPolyEv(ev, states) {\n      self.freezeHistory();\n      const w = 10;\n      const isValid = isValidReference(() => self.activePolygon);\n\n      if (!isValid || (self.activePolygon && self.activePolygon.closed)) {\n        self.setActivePolygon(null);\n      }\n\n      if (self.completion.dragMode === false) {\n        const x = (ev.evt.offsetX - self.zoomingPositionX) / self.zoomScale;\n        const y = (ev.evt.offsetY - self.zoomingPositionY) / self.zoomScale;\n\n        let stroke = self.controlButton().strokecolor;\n\n        if (states && states.length) {\n          stroke = states[0].getSelectedColor();\n        }\n\n        self._addPoly({ x: x, y: y, width: w, stroke: stroke, states: states, coordstype: \"perc\", stateFlag: false });\n\n        const stage = self.stageRef;\n\n        stage.container().style.cursor = \"default\";\n      }\n    },\n\n    addPolygonObject({ x, y, width, stroke, states, coordstype, stateFlag }) {\n      self.freezeHistory();\n      let activePolygon = self.activePolygon;\n\n      return activePolygon;\n    },\n\n    /**\n     * Add new polygon object\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width Width of Polygon line\n     * @param {string} stroke Color of stroke\n     * @param {array} states\n     * @param {string} coordstype\n     * @param {boolean} stateFlag\n     * @param {string} id\n     */\n    _addPoly({ x, y, width, stroke, states, coordstype, stateFlag, id }) {\n      let newPolygon = self.activePolygon;\n      self.freezeHistory();\n\n      if (stateFlag || !self.activePolygon) {\n        const c = self.controlButton();\n        const polygonID = id ? id : guidGenerator();\n        const polygonOpacity = parseFloat(c.opacity);\n        const polygonStrokeWidth = parseInt(c.strokewidth);\n\n        newPolygon = PolygonRegionModel.create({\n          id: polygonID,\n          x: x,\n          y: y,\n          width: width,\n          height: width,\n\n          opacity: polygonOpacity,\n          fillcolor: c.fillcolor,\n\n          strokewidth: polygonStrokeWidth,\n          strokecolor: stroke,\n\n          pointsize: c.pointsize,\n          pointstyle: c.pointstyle,\n\n          states: states,\n\n          coordstype: coordstype,\n        });\n\n        self.setActivePolygon(newPolygon);\n\n        self.shapes.push(newPolygon);\n        self.completion.addRegion(newPolygon);\n      }\n\n      newPolygon.addPoint(x, y);\n\n      return newPolygon;\n    },\n\n    /**\n     * Resize of image canvas\n     * @param {*} width\n     * @param {*} height\n     */\n    onResizeSize(width, height, userResize) {\n      self.stageHeight = height;\n      self.stageWidth = width;\n      self.updateIE({\n        target: { width: width, height: height, naturalWidth: 1, naturalHeight: 1, userResize: userResize },\n      });\n    },\n\n    toStateJSON() {\n      let t = self.shapes.map(r => r.toStateJSON());\n      return t;\n    },\n\n    fromStateJSON(obj, fromModel) {\n      const params = [\"choices\", \"shape\", \"rectanglelabels\", \"polygonlabels\"];\n\n      /**\n       * Check correct controls for image object\n       */\n      params.forEach(item => {\n        if (!item in obj.value) {\n          Infomodal.error(\"Not valid control for Image\");\n          return;\n        }\n      });\n\n      /**\n       * Choices\n       */\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      /**\n       * Rectangle labels\n       */\n      if (obj.value.rectanglelabels) {\n        const states = restoreNewsnapshot(fromModel);\n\n        states.fromStateJSON(obj);\n\n        self._addRect({\n          x: obj.value.x,\n          y: obj.value.y,\n          sw: obj.value.width,\n          sh: obj.value.height,\n          stroke: states.getSelectedColor(),\n          states: [states],\n          coordstype: \"perc\",\n          rotation: obj.value.rotation,\n        });\n      }\n\n      if (obj.value.keypointlabels) {\n        const states = restoreNewsnapshot(fromModel);\n\n        states.fromStateJSON(obj);\n        self._addKeyPoint(obj.value.x, obj.value.y, obj.value.width, states.getSelectedColor(), [states], \"perc\");\n      }\n\n      if (obj.value.polygonlabels) {\n        const states = restoreNewsnapshot(fromModel);\n\n        states.fromStateJSON(obj);\n\n        const poly = self._addPoly({\n          id: obj.id,\n          x: obj.value.points[0][0],\n          y: obj.value.points[0][1],\n          width: 10,\n          stroke: states.getSelectedColor(),\n          states: [states],\n          coordstype: \"perc\",\n          stateFlag: true,\n        });\n\n        for (var i = 1; i < obj.value.points.length; i++) {\n          poly.addPoint(obj.value.points[i][0], obj.value.points[i][1]);\n        }\n\n        poly.closePoly();\n      }\n\n      /**\n       * Shapes\n       */\n      if (obj.value.shape) {\n        let modifySnap;\n        let shapeModel;\n\n        if (obj.from_name !== obj.to_name) {\n          modifySnap = restoreNewsnapshot(fromModel);\n          shapeModel = modifySnap.fromStateJSON(obj);\n          self.shapes.push(shapeModel);\n        }\n      }\n    },\n  }));\n\nconst ImageModel = types.compose(\n  \"ImageModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxImage = inject(\"store\")(observer(ImageView));\n\nRegistry.addTag(\"image\", ImageModel, HtxImage);\n\nexport { ImageModel, HtxImage };\n","/**\n * Class for text data with 4 params:\n * start -> int: the index of the character where the range start.\n * end -> int: the index of the character where the range stop.\n * text -> string: the highlighted text.\n * data -> object: extra data (the props of the highlight component)\n */\nexport default class Range {\n  constructor(start, end, text, data = {}) {\n    this.start = start;\n    this.end = end;\n    this.text = text;\n    this.data = data;\n  }\n}\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport default class TextNode extends Component {\n  render() {\n    return (\n      <span\n        data-position={this.props.position}\n        overlap={this.props.overlap}\n        key={this.props.keyNode ? this.props.keyNode : null}\n        style={this.props.style}\n      >\n        {this.props.children}\n      </span>\n    );\n  }\n}\n\nTextNode.propTypes = {\n  position: PropTypes.number,\n  overlap: PropTypes.string,\n  key: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport Utils from \"../../utils\";\nimport TextNode from \"../TextNode/TextNode\";\n\nconst HtxTextNodeView = ({ store, range, id, highlightStyle, style, charIndex, children, overlap }) => {\n  const getStyle = range => (range ? highlightStyle : style);\n  const getRangeKey = () => `${id}-${range.start}-${charIndex}`;\n  const getNormalKey = () => `${id}-${charIndex}`;\n  const getKey = range => (range ? getRangeKey() : getNormalKey());\n\n  let wrapper = (\n    <span data-position={charIndex} key={getKey(range)} style={getStyle(range)}>\n      {children}\n    </span>\n  );\n\n  if (overlap && overlap.length) {\n    let bg;\n\n    if (range.states) {\n      range.states.map(i => {\n        bg = Utils.Colors.convertToRGBA(i.getSelectedColor(), 0.3);\n      });\n    }\n\n    store.completionStore.selected.regionStore.regions.map(i => {\n      if (i.selected) {\n        overlap.map(overlapItem => {\n          if (overlapItem === i.id) {\n            bg = \"#ff4d4f\";\n          }\n        });\n      }\n\n      if (i.highlighted && overlap.includes(i.id)) {\n        bg = \"#ff4d4f\";\n      }\n    });\n\n    wrapper = overlap.reduceRight((value, key) => {\n      return (\n        <TextNode\n          style={{ background: bg, padding: \"2px 0\" }}\n          position={charIndex}\n          overlap={key}\n          keyNode={getKey(range)}\n        >\n          {value}\n        </TextNode>\n      );\n    }, children);\n  }\n\n  return wrapper;\n};\n\nconst HtxTextNode = inject(\"store\")(observer(HtxTextNodeView));\nexport { HtxTextNode };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { HtxTextNode } from \"./Node\";\n\n/**\n * Node for URL\n * @param {*} props\n */\nconst UrlNode = props => {\n  const style = { wordWrap: \"break-word\" };\n\n  return (\n    <HtxTextNode\n      id={props.id}\n      highlightStyle={Object.assign({}, style, props.highlightStyle)}\n      charIndex={props.charIndex}\n      range={props.range}\n      overlap={props.overlap}\n      style={style}\n    >\n      <a data-position={props.charIndex + props.url.length} href={props.url} target=\"blank\">\n        {props.url}\n      </a>\n    </HtxTextNode>\n  );\n};\n\nUrlNode.propTypes = {\n  highlightStyle: PropTypes.object,\n  id: PropTypes.string,\n  charIndex: PropTypes.number,\n  range: PropTypes.object,\n  url: PropTypes.string,\n};\n\nexport default UrlNode;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport { HtxTextNode } from \"./Node\";\n\n/**\n * Node for Emoji\n * @param {*} props\n */\nconst EmojiNode = props => {\n  return (\n    <HtxTextNode\n      id={props.id}\n      highlightStyle={props.highlightStyle}\n      charIndex={props.charIndex}\n      range={props.range}\n      overlap={props.overlap}\n    >\n      {`${props.text[props.charIndex]}${props.text[props.charIndex + 1]}`}\n    </HtxTextNode>\n  );\n};\n\nEmojiNode.propTypes = {\n  id: PropTypes.string.isRequired,\n  highlightStyle: PropTypes.object,\n  charIndex: PropTypes.number.isRequired,\n  range: PropTypes.oneOfType([PropTypes.number, PropTypes.object]),\n  overlap: PropTypes.array,\n  text: PropTypes.string.isRequired,\n};\n\nexport default EmojiNode;\n","import emojiRegex from \"emoji-regex\";\nimport React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport Utils from \"../../utils\";\nimport Range from \"./Range\";\nimport { HtxTextNode } from \"./Node\";\nimport UrlNode from \"./UrlNode\";\nimport EmojiNode from \"./EmojiNode\";\nimport styles from \"./TextHighlight.module.scss\";\n\nclass TextHighlight extends Component {\n  constructor() {\n    super();\n\n    this.dismissMouseUp = 0;\n  }\n\n  /**\n   * Return first ok element\n   */\n  getRange(charIndex) {\n    if (this.props.ranges && this.props.ranges.length) {\n      return this.props.ranges.find(range => charIndex >= range.start && charIndex <= range.end);\n    }\n  }\n\n  /**\n   * Function when the user mouse is over an highlighted text\n   */\n  onMouseOverHighlightedWord(range, visible) {\n    if (visible && this.props.onMouseOverHighlightedWord) {\n      this.props.onMouseOverHighlightedWord(range);\n    }\n  }\n\n  getLetterNode(charIndex, range) {\n    /**\n     * Current symbol\n     */\n    const char = this.props.text[charIndex];\n\n    let nl;\n\n    /**\n     * Line break\n     */\n    if (char && char.charCodeAt()) {\n      nl = char.charCodeAt(0) === 10;\n    }\n\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <HtxTextNode\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        charIndex={charIndex}\n        key={`${this.props.id}-${charIndex}`}\n        highlightStyle={this.props.highlightStyle}\n        // style={{padding: \"2px 0\", background: \"linear-gradient(180deg, #fdcd3b 60%, #ffed4b 60%, red 9%)\"}}\n      >\n        {nl ? <br /> : char}\n      </HtxTextNode>\n    );\n  }\n\n  getEmojiNode(charIndex, range) {\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <EmojiNode\n        text={this.props.text}\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        key={`${this.props.id}-emoji-${charIndex}`}\n        charIndex={charIndex}\n        highlightStyle={this.props.highlightStyle}\n      />\n    );\n  }\n\n  getUrlNode(charIndex, range, url) {\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <UrlNode\n        url={url}\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        key={`${this.props.id}-url-${charIndex}`}\n        charIndex={charIndex}\n        highlightStyle={this.props.highlightStyle}\n      />\n    );\n  }\n\n  mouseEvent() {\n    if (!this.props.enabled) {\n      return false;\n    }\n\n    let text = \"\";\n\n    if (window.getSelection) {\n      /**\n       * Get highlited text\n       * Tip: with helper elements (hints)\n       */\n      // text = window.getSelection().toString();\n\n      if (window.getSelection().type === \"None\") return;\n\n      /**\n       * Create clone range\n       */\n      let cloneCont = window\n        .getSelection()\n        .getRangeAt(0)\n        .cloneRange();\n\n      /**\n       * The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.\n       */\n      let selectionContents = cloneCont.cloneContents();\n      /**\n       * Create virtual div with text\n       */\n      let virtualDiv = document.createElement(\"div\");\n\n      virtualDiv.appendChild(selectionContents);\n\n      let elementsWithSup = virtualDiv.getElementsByTagName(\"sup\");\n\n      if (elementsWithSup.length > 0) {\n        for (let i = 0; i < elementsWithSup.length; i++) {\n          elementsWithSup[i].innerText = \"\";\n        }\n        text = virtualDiv.innerText;\n      } else {\n        text = virtualDiv.innerText;\n      }\n    } else if (document.selection && document.selection.type !== \"Control\") {\n      text = document.selection.createRange().text;\n    }\n\n    if (!text || !text.length) return false;\n\n    const range = window.getSelection().getRangeAt(0);\n\n    /**\n     * Check for hint\n     */\n    if (range.startContainer.parentNode.dataset.hint || range.endContainer.parentNode.dataset.hint) return;\n\n    /**\n     * Start position of selected item\n     */\n    let startContainerPosition = parseInt(range.startContainer.parentNode.dataset.position);\n    /**\n     * End position of selected item\n     */\n    let endContainerPosition = parseInt(range.endContainer.parentNode.dataset.position);\n\n    if (!range.startContainer.parentNode.dataset.position) {\n      startContainerPosition = parseInt(range.startContainer.dataset.position);\n    }\n\n    if (!range.endContainer.parentNode.dataset.position) {\n      endContainerPosition = parseInt(range.endContainer.dataset.position);\n    }\n\n    let startHL = startContainerPosition < endContainerPosition ? startContainerPosition : endContainerPosition;\n    let endHL = startContainerPosition < endContainerPosition ? endContainerPosition : startContainerPosition;\n\n    const rangeObj = new Range(startHL, endHL, text, {\n      ...this.props,\n      ranges: undefined,\n    });\n\n    this.props.onTextHighlighted(rangeObj);\n  }\n\n  /**\n   *\n   * @param {*} event\n   */\n  onMouseUp(event) {\n    this.mouseEvent.bind(this)();\n  }\n\n  onMouseDown(event) {\n    // console.log(event)\n  }\n\n  onMouseEnter(event) {\n    // console.log(event)\n  }\n\n  /**\n   * Double click on text\n   * @param {*} event\n   */\n  onDoubleClick(event) {\n    // WARN\n    // event.stopPropagation();\n    // this.doucleckicked = true;\n    // this.mouseEvent.bind(this)();\n  }\n\n  /**\n   * @param {object} letterGroup All marked sections of text\n   * @param {object} range Range of marked section\n   * @param {number} textCharIndex The last number of selection\n   * @param {function} onMouseOverHighlightedWord\n   */\n  rangeRenderer(letterGroup, range, textCharIndex, onMouseOverHighlightedWord) {\n    if (this.props.rangeRenderer) {\n      return this.props.rangeRenderer(letterGroup, range, textCharIndex, onMouseOverHighlightedWord);\n    }\n\n    return letterGroup;\n  }\n\n  getNode(i, range, text, url, isEmoji) {\n    if (url.length) {\n      return this.getUrlNode(i, range, url);\n    } else if (isEmoji) {\n      return this.getEmojiNode(i, range);\n    }\n\n    return this.getLetterNode(i, range);\n  }\n\n  getRanges() {\n    /**\n     * Text with nodes\n     */\n    const newText = [];\n\n    let lastRange;\n\n    /**\n     * For all the characters on the text\n     */\n    for (let textCharIndex = 0; textCharIndex < this.props.text.length; textCharIndex++) {\n      /**\n       * Get range text\n       */\n      const range = this.getRange(textCharIndex);\n\n      /**\n       * Check characters for URL\n       */\n      const url = Utils.Checkers.getUrl(textCharIndex, this.props.text);\n\n      /**\n       * Check characters for emoji\n       */\n      const isEmoji = emojiRegex().test(this.props.text[textCharIndex] + this.props.text[textCharIndex + 1]);\n\n      /**\n       * Get the current character node\n       */\n      const node = this.getNode(textCharIndex, range, this.props.text, url, isEmoji);\n\n      /**\n       * If the next node is an url one, we fast forward to the end of it\n       */\n      if (url.length) {\n        textCharIndex += url.length - 1;\n      } else if (isEmoji) {\n        /**\n         * Because an emoji is composed of 2 chars\n         */\n        textCharIndex++;\n      }\n\n      if (!range) {\n        newText.push(node);\n        continue;\n      }\n\n      /**\n       * If the char is in range\n       */\n      lastRange = range;\n\n      // console.log(this.props.text[lastRange.start], this.props.text[lastRange.end])\n\n      /**\n       * We put the first range node on the array\n       */\n      const letterGroup = [node];\n\n      /**\n       * For all the characters in the highlighted range\n       */\n      let rangeCharIndex = textCharIndex + 1;\n\n      // if (rangeCharIndex >= parseInt(range.start) && rangeCharIndex <= parseInt(range.end)) {\n      //   console.log(this.props.text[parseInt(range.end)])\n      // }\n      // console.log(textCharIndex, range.start, range.end)\n\n      for (; rangeCharIndex < parseInt(range.end) + 1; rangeCharIndex++) {\n        /**\n         * Emoji handler\n         */\n        const isEmoji = emojiRegex().test(`${this.props.text[rangeCharIndex]}${this.props.text[rangeCharIndex + 1]}`);\n\n        if (isEmoji) {\n          letterGroup.push(this.getEmojiNode(rangeCharIndex, range));\n          // Because an emoji is composed of 2 chars\n          rangeCharIndex++;\n        } else {\n          letterGroup.push(this.getLetterNode(rangeCharIndex, range));\n        }\n\n        textCharIndex = rangeCharIndex;\n      }\n\n      newText.push(this.rangeRenderer(letterGroup, range, textCharIndex, this.onMouseOverHighlightedWord.bind(this)));\n    }\n\n    if (lastRange) {\n      // Callback function\n      this.onMouseOverHighlightedWord(lastRange, true);\n    }\n\n    return newText;\n  }\n\n  render() {\n    const newText = this.getRanges();\n\n    return (\n      <div\n        className={styles.block}\n        style={this.props.style}\n        onMouseUp={this.onMouseUp.bind(this)}\n        onMouseDown={this.onMouseDown.bind(this)}\n        onMouseEnter={this.onMouseEnter.bind(this)}\n        onDoubleClick={this.onDoubleClick.bind(this)}\n      >\n        {newText}\n      </div>\n    );\n  }\n}\n\nexport default observer(TextHighlight);\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { TextModel } from \"./Text\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\nimport Hint from \"../../components/Hint/Hint\";\nimport Utils from \"../../utils\";\n\nimport styles from \"./TextRegion/TextRegion.module.scss\";\n\nconst Model = types\n  .model(\"TextRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"textrange\",\n    start: types.integer,\n    end: types.integer,\n    text: types.string,\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel))),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, TextModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    highlightStates() {},\n\n    /**\n     *\n     */\n    toStateJSON() {\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.pid,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"region\",\n          // text: parent.text,\n          value: {\n            start: self.start,\n            end: self.end,\n            text: self.text,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst TextRegionModel = types.compose(\n  \"TextRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\n/**\n * Region state hint\n * @param {*} props\n */\nconst RegionState = props => {\n  const localState = props.state;\n\n  /**\n   * Get name of label\n   */\n  const selectedString = localState.getSelectedString();\n  const selectedColor = Utils.Colors.convertToRGBA(localState.getSelectedColor(), 0.3);\n  let style = {\n    background: selectedColor,\n  };\n\n  if (props.style) style = { ...style, outline: props.style.outline };\n\n  return (\n    <Hint className={styles.state} style={style}>\n      <span data-hint={true}>&nbsp;[{selectedString}]</span>\n    </Hint>\n  );\n};\n\nconst HtxTextRegionView = ({ store, item, letterGroup, range, textCharIndex, onMouseOverHighlightedWord }) => {\n  /**\n   * Get color of label\n   */\n  let labelColor = \"rgba(0, 0, 255, 0.1)\";\n\n  if (range.states) {\n    labelColor = range.states.map(s => {\n      return s.getSelectedColor();\n    });\n  }\n\n  /**\n   * TODO\n   * Update function to all formats\n   */\n  if (labelColor.length !== 0) {\n    labelColor = Utils.Colors.convertToRGBA(labelColor[0], 0.3);\n  }\n\n  let markStyle = {\n    padding: \"2px 0px\",\n    position: \"relative\",\n    borderRadius: \"2px\",\n    cursor: store.completionStore.selected.relationMode ? \"crosshair\" : \"pointer\",\n  };\n\n  let regionStates = [];\n\n  if ((range.states && range.states.length) > 0) {\n    range.states.map(state => {\n      regionStates.push(\n        <RegionState\n          key={range.id}\n          state={state}\n          bg={labelColor}\n          hover={store.completionStore.selected.relationMode ? true : false}\n          selected={range.selected}\n          style={range.highlighted ? { outline: \"2px solid red\" } : null}\n        />,\n      );\n    });\n  }\n\n  /**\n   * Without label\n   */\n  if (!regionStates.length) {\n    markStyle = {\n      ...markStyle,\n      background: \"rgba(0, 0, 255, 0.1)\",\n    };\n  }\n\n  return (\n    <span\n      style={markStyle}\n      onClick={range.onClickRegion}\n      onMouseOver={() => {\n        if (store.completionStore.selected.relationMode) {\n          range.setHighlight(true);\n        }\n      }}\n      onMouseOut={() => {\n        if (store.completionStore.selected.relationMode) {\n          range.setHighlight(false);\n        }\n      }}\n    >\n      {letterGroup}\n      {regionStates}\n    </span>\n  );\n};\n\nconst HtxTextRegion = inject(\"store\")(observer(HtxTextRegionView));\n\nRegistry.addTag(\"textrange\", TextRegionModel, HtxTextRegion);\n\nexport { TextRegionModel, HtxTextRegion };\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getType, getRoot } from \"mobx-state-tree\";\n\nimport { cloneNode } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\nimport TextHighlight from \"../../components/TextHighlight/TextHighlight\";\nimport { runTemplate } from \"../../core/Template\";\nimport { TextRegionModel, HtxTextRegion } from \"./TextRegion\";\nimport InfoModal from \"../../components/Infomodal/Infomodal\";\n\n/**\n * Text tag shows a text that can be labeled\n * @example\n * <Text name=\"text-1\" value=\"$text\"></Text>\n * @name Text\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {boolean} selelectWithoutLabel controls if text can be selected without any labels selected\n */\nconst TagAttrs = types.model(\"TextModel\", {\n  name: types.maybeNull(types.string),\n  // text: types.maybeNull(types.optional(types.string, \"Please set \\\"value\\\" attribute of Text\")),\n  value: types.maybeNull(types.string),\n  selelectwithoutlabel: types.optional(types.boolean, false),\n\n  hidden: types.optional(types.enumeration([\"true\", \"false\"]), \"false\"),\n  /**\n   * If we allow selecting parts of words of we select whole word only\n   */\n  adjustselection: types.optional(types.boolean, true),\n  selectionenabled: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model(\"TextModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"text\",\n    regions: types.array(TextRegionModel),\n\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states\n        ? states.filter(s => s.isSelected && (getType(s).name === \"LabelsModel\" || getType(s).name === \"RatingModel\"))\n        : null;\n    },\n  }))\n  .actions(self => ({\n    remove() {\n      // if (self.generated) {\n      //     const m = Registry.getModelByTag('textarea');\n      //     const ta = getParentOfType(self, m);\n      //     ta.deleteText(self);\n      // }\n    },\n\n    findRegion(start, end) {\n      const immutableRange = self.regions.find(r => r.start === start && r.end === end);\n      return immutableRange;\n    },\n\n    updateValue(store) {\n      self._value = runTemplate(self.value, store.task.dataObj);\n    },\n\n    _addRegion(params) {\n      const r = TextRegionModel.create(params);\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      return r;\n    },\n\n    addRegion(range) {\n      const states = self.activeStates();\n      const clonedStates = states\n        ? states.map(s => {\n            return cloneNode(s);\n          })\n        : null;\n\n      /**\n       * Selelect without label\n       * Default: false\n       */\n      if (!self.selelectwithoutlabel && !clonedStates.length) return null;\n\n      const r = self._addRegion({\n        start: range.start,\n        end: range.end,\n        text: range.text,\n        states: clonedStates, // tl.cloneActiveStates()\n      });\n\n      states &&\n        states.forEach(s => {\n          return s.unselectAll();\n        });\n\n      return r;\n    },\n\n    /**\n     * Return JSON\n     */\n    toStateJSON() {\n      const objectsToReturn = self.regions.map(r => r.toStateJSON());\n      return objectsToReturn;\n    },\n\n    /**\n     *\n     * @param {*} obj\n     * @param {*} fromModel\n     */\n    fromStateJSON(obj, fromModel) {\n      let r;\n\n      if (fromModel.type === \"textarea\" || fromModel.type === \"choices\") {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n        return;\n      }\n\n      /**\n       * Check for correct position of region\n       */\n      if (obj.value.end < 0 || obj.value.start < 0 || (isNaN(obj.value.start) || isNaN(obj.value.end))) {\n        InfoModal.error(`Error with incorrect end or start of text: ${obj.value.text}.`);\n        return;\n      }\n\n      const tree = {\n        pid: obj.id,\n        start: obj.value.start,\n        end: obj.value.end,\n        text: obj.value.text,\n        normalization: obj.normalization,\n      };\n\n      if (obj.from_name === obj.to_name) {\n        r = self._addRegion(tree);\n      } else {\n        const region = self.findRegion(obj.value.start, obj.value.end);\n        const m = restoreNewsnapshot(fromModel);\n\n        // update state\n        m.fromStateJSON(obj);\n\n        if (!region) {\n          tree.states = [m];\n          r = self._addRegion(tree);\n        } else {\n          region.states.push(m);\n        }\n      }\n\n      return r;\n    },\n  }));\n\nconst TextModel = types.compose(\n  \"TextModel\",\n  TagAttrs,\n  Model,\n);\n\nclass HtxTextView extends Component {\n  renderRegion(letterGroup, range, textCharIndex, onMouseOverHighlightedWord) {\n    return (\n      <HtxTextRegion\n        key={range.id}\n        store={this.props.store}\n        item={this.props.item}\n        letterGroup={letterGroup}\n        range={range}\n        selected={range.selected}\n        textCharIndex={textCharIndex}\n        onMouseOverHighlightedWord={onMouseOverHighlightedWord}\n      />\n    );\n  }\n\n  render() {\n    const self = this;\n\n    const { item } = this.props;\n    const style = {};\n    if (item.hidden === \"true\") style[\"display\"] = \"none\";\n\n    return (\n      <div style={style}>\n        <TextHighlight\n          id={item.id}\n          key={item.id}\n          text={item._value}\n          enabled={item.selectionenabled}\n          ranges={item.regions}\n          adjustSelection={item.adjustselection}\n          rangeRenderer={self.renderRegion.bind(this)}\n          onTextHighlighted={range => {\n            item.addRegion(range);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst HtxText = inject(\"store\")(observer(HtxTextView));\n\nRegistry.addTag(\"text\", TextModel, HtxText);\n\nexport { TextModel, HtxText };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType } from \"mobx-state-tree\";\n\nimport { Checkbox, Radio, Form } from \"antd\";\n\nimport { ChoicesModel } from \"./Choices\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\n\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Hint from \"../../components/Hint/Hint\";\n\n/**\n * Choice tag represents a single choice\n *\n * @example\n * <View>\n *   <Choices name=\"gender\" toName=\"txt-1\" choice=\"single\">\n *     <Choice value=\"Male\"></Choice>\n *     <Choice value=\"Female\"></Choice>\n *   </Choices>\n *   <Text name=\"txt-1\" value=\"John went to see Marry\"></Text>\n * </View>\n * @name Choice\n * @param {string} value lLbel value\n * @param {boolean} selected If this label should be preselected\n * @param {string} hotkey HotKey\n */\nconst TagAttrs = types.model({\n  selected: types.optional(types.boolean, false),\n  alias: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  hotkey: types.maybeNull(types.string),\n  style: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    type: \"choice\",\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get typeOfChoice() {\n      const choice = getParentOfType(self, ChoicesModel).choice;\n\n      return choice;\n    },\n\n    get isCheckbox() {\n      const choice = getParentOfType(self, ChoicesModel).choice;\n      return choice === \"multiple\" || choice === \"single\";\n    },\n\n    get name() {\n      return getParentOfType(self, ChoicesModel).name;\n    },\n  }))\n  .actions(self => ({\n    toggleSelected() {\n      const choice = getParentOfType(self, ChoicesModel);\n\n      choice.shouldBeUnselected && choice.unselectAll();\n\n      self.markSelected(!self.selected);\n    },\n\n    markSelected(val) {\n      self.selected = val;\n    },\n\n    onHotKey() {\n      return self.toggleSelected();\n    },\n  }));\n\nconst ChoiceModel = types.compose(\"ChoiceModel\", TagAttrs, Model, ProcessAttrsMixin);\n\nconst HtxChoice = inject(\"store\")(\n  observer(({ item, store }) => {\n    let style = {};\n\n    if (item.style) style = Tree.cssConverter(item.style);\n\n    if (item.isCheckbox) {\n      const cStyle = Object.assign({ display: \"flex\", alignItems: \"center\", marginBottom: 0 }, style);\n\n      return (\n        <Form.Item style={cStyle}>\n          <Checkbox\n            name={item._value}\n            onChange={ev => {\n              item.toggleSelected();\n            }}\n            checked={item.selected}\n          >\n            {item._value}\n            {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && (\n              <Hint>[{item.hotkey}]</Hint>\n            )}\n          </Checkbox>\n        </Form.Item>\n      );\n    } else {\n      const label = (\n        <label>\n          {item._value}\n          {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n        </label>\n      );\n\n      return (\n        <div style={style}>\n          <Radio\n            value={item._value}\n            style={{ display: \"inline-block\", marginBottom: \"0.5em\" }}\n            checked={item.selected}\n            onChange={ev => {\n              item.toggleSelected();\n            }}\n          >\n            {label}\n          </Radio>\n        </div>\n      );\n    }\n  }),\n);\n\nRegistry.addTag(\"choice\", ChoiceModel, HtxChoice);\n\nexport { HtxChoice, ChoiceModel };\n","import React, { Component } from \"react\";\n\nimport { observer } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\nimport Types from \"../../core/Types\";\n\nimport { ChoiceModel } from \"./Choice\";\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { RectangleModel } from \"./Rectangle\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { Form, Checkbox } from \"antd\";\n\n/**\n * Choices tag, create a group of choices, radio, or checkboxes. Shall\n * be used for a single or multi-class classification.\n * @example\n * <View>\n *   <Choices name=\"gender\" toName=\"txt-1\" choice=\"single-radio\">\n *     <Choice alias=\"M\" value=\"Male\"></Choice>\n *     <Choice alias=\"F\" value=\"Female\"></Choice>\n *   </Choices>\n *   <Text name=\"txt-1\" value=\"John went to see Marry\"></Text>\n * </View>\n * @name Choices\n * @param {string} name of the group\n * @param {string} toName name of the elements that you want to label\n * @param {single|single-radio|multiple=} [choice=single] single or multi-class\n * @param {boolean} showInline show items in the same visual line\n */\nconst TagAttrs = types.model({\n  name: types.string,\n  toname: types.maybeNull(types.string),\n  showinline: types.optional(types.boolean, false),\n  choice: types.optional(types.enumeration([\"single\", \"single-radio\", \"multiple\"]), \"single\"),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"choices\",\n    children: Types.unionArray([\"choice\", \"choices\", \"labels\", \"label\"]),\n  })\n  .views(self => ({\n    get shouldBeUnselected() {\n      return self.choice === \"single\" || self.choice === \"single-radio\";\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      const names = self.getSelectedNames();\n\n      if (names && names.length) {\n        const toname = self.toname || self.name;\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: toname,\n          type: self.type,\n          value: {\n            choices: names,\n          },\n        };\n      }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.choices) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.choices.forEach(l => {\n        const choice = self.findLabel(l);\n\n        if (!choice) throw new Error(\"No label \" + l);\n\n        choice.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(LabelsModel, RectangleModel, TagAttrs, Model, SelectedModelMixin);\n\nconst ChoicesModel = types.compose(\"ChoicesModel\", Composition);\n\nconst HtxChoices = observer(({ item }) => {\n  return (\n    <div style={{ marginTop: \"1em\", marginBottom: \"1em\" }}>\n      {item.showinline ? (\n        <Form layout=\"horizontal\" style={{ display: \"flex\" }}>\n          {Tree.renderChildren(item)}\n        </Form>\n      ) : (\n        <Form layout=\"vertical\">{Tree.renderChildren(item)}</Form>\n      )}\n    </div>\n  );\n});\n\nRegistry.addTag(\"choices\", ChoicesModel, HtxChoices);\n\nexport { HtxChoices, ChoicesModel, TagAttrs };\n","import React from \"react\";\n\nimport Registry from \"../../core/Registry\";\nimport { types } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\nimport { SortableContainer, SortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport arrayMove from \"array-move\";\nimport { List } from \"antd\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { variableNotation } from \"../../core/Template\";\n\nconst ListItemModel = types\n  .model({\n    backgroundColor: types.optional(types.string, \"transparent\"),\n    value: types.maybeNull(types.string),\n    _value: types.maybeNull(types.string),\n    selected: types.optional(types.boolean, false),\n    idx: types.number,\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setBG(val) {\n      self.backgroundColor = val;\n    },\n\n    setIdx(idx) {\n      self.idx = idx;\n    },\n\n    setSelected(val) {\n      self.selected = val;\n    },\n  }));\n\n/**\n * List element, used for ranking results. Great choice for recomendation systems.\n * @example\n * <View>\n *  <HyperText value=\"$markup\"></HyperText>\n *  <List name=\"ranker\" value=\"$replies\" elementValue=\"$text\" elementTag=\"Text\" ranked=\"true\" sortedHighlightColor=\"#fcfff5\"></List>\n * </View>\n * @name List\n * @param {string} elementValue lookup key for child object\n * @param {Text|Image|Audio} elementTag element used to render children\n * @param {string} value list value\n * @param {string} name of group\n * @param {string=} sortedHighlightColor color\n * @param {string=} axis axis used for drag-n-drop\n * @param {string=} lockAxis lock axis\n */\nconst TagAttrs = types.model({\n  axis: types.optional(types.string, \"y\"),\n  lockaxis: types.maybeNull(types.string),\n\n  elementvalue: types.maybeNull(types.string),\n  elementtag: types.optional(types.string, \"Text\"),\n  // ranked: types.optional(types.string, \"true\"),\n  // sortable: types.optional(types.string, \"true\"),\n\n  sortedhighlightcolor: types.maybeNull(types.string),\n\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"list\",\n    update: types.optional(types.number, 1),\n\n    regions: types.array(ListItemModel),\n    // update: types.optional(types.boolean, false)\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setUpdate() {\n      self.update = self.update + 1;\n    },\n\n    addRegion(vals, idx) {\n      const reg = ListItemModel.create({\n        value: self.elementvalue,\n        idx: idx,\n        _value: variableNotation(self.elementvalue, vals[idx]),\n      });\n\n      self.regions.push(reg);\n    },\n\n    updateValue(store) {\n      const val = variableNotation(self.value, store.task.dataObj);\n\n      // in case we're in expert mode it will call updateValue\n      // on each new task loaded, therefore we need to remove\n      // previously loaded regions here\n      self.regions = [];\n      val.forEach((v, idx) => self.addRegion(val, idx));\n\n      val.forEach((v, idx) => {\n        v[\"_orig_idx\"] = idx;\n      });\n\n      self._value = val;\n      self.setUpdate();\n    },\n\n    moveItems({ oldIndex, newIndex }) {\n      if (oldIndex === newIndex) return;\n\n      if (self.sortedhighlightcolor) {\n        self.regions[oldIndex].setBG(self.sortedhighlightcolor);\n      }\n\n      self.regions[oldIndex].setSelected(true);\n\n      if (self._value) self._value = arrayMove(self._value, oldIndex, newIndex);\n\n      self.regions = arrayMove(self.regions, oldIndex, newIndex);\n      self.setUpdate();\n    },\n\n    toStateJSON() {\n      const map = {};\n\n      self._value.forEach((v, idx) => {\n        map[self.regions[idx].idx] = 1 / (1 + idx);\n      });\n\n      const ranked = Object.keys(map)\n        .sort((a, b) => a - b)\n        .map(function(v) {\n          return map[v];\n        });\n\n      const selected = [];\n      for (let i = 0; i < Object.keys(map).length; i++) {\n        selected[self.regions[i].idx] = self.regions[i].selected ? 1 : 0;\n      }\n\n      return {\n        from_name: self.name,\n        to_name: self.name,\n        value: {\n          weights: ranked,\n          selected: selected,\n        },\n      };\n    },\n\n    fromStateJSON(obj, fromModel) {\n      const ranked = [];\n      const regions = [];\n      const item_weight = {};\n\n      obj.value.weights.forEach((v, idx) => {\n        if (item_weight[v]) {\n          item_weight[v].push(idx);\n        } else {\n          item_weight[v] = [idx];\n        }\n      });\n\n      Object.keys(item_weight)\n        .sort((a, b) => b - a)\n        .forEach(v => {\n          const idxes = item_weight[v];\n          idxes.forEach(idx => {\n            regions.push(self.regions[idx]);\n            ranked.push(self._value[idx]);\n          });\n        });\n\n      regions.forEach((r, idx) => r.setIdx(idx));\n\n      self._value = ranked;\n      self.regions = regions;\n\n      // self.regions = ranked;\n      self.setUpdate();\n    },\n  }));\n\nconst ListModel = types.compose(\n  \"ListModel\",\n  TagAttrs,\n  Model,\n);\n\nconst DragHandle = sortableHandle(() => <div className=\"drag-handle\"></div>);\n\nfunction isMobileDevice() {\n  try {\n    return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf(\"IEMobile\") !== -1;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst SortableText = SortableElement(({ item, value }) => {\n  let classNames;\n  if (isMobileDevice) {\n    classNames = \"noselect\";\n  }\n\n  const map = {\n    text: v => <span className={classNames}>{v._value}</span>,\n    image: v => <img src={v._value} alt=\"image\" />,\n    audio: v => <audio src={v._value} />,\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"1em\",\n        userSelect: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        background: value.selected ? item.sortedhighlightcolor : \"transparent\",\n      }}\n      className={classNames}\n      onClick={ev => {\n        if (value.selected) {\n          value.setSelected(false);\n          item.setUpdate();\n        } else {\n          value.setSelected(true);\n          item.setUpdate();\n        }\n        ev.preventDefault();\n        return false;\n      }}\n    >\n      <DragHandle />\n      {map[item.elementtag.toLowerCase()](value)}\n    </div>\n  );\n});\n\nconst SortableList = SortableContainer(({ item, items }) => {\n  return (\n    <List celled>\n      {items.map((value, index) => (\n        <SortableText\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          color={value.backgroundColor}\n          item={item}\n          onClick={ev => {}}\n        />\n      ))}\n    </List>\n  );\n});\n\nconst HtxListView = observer(({ store, item }) => {\n  const props = {};\n  if (isMobileDevice()) {\n    props[\"pressDelay\"] = 100;\n  } else {\n    props[\"distance\"] = 7;\n  }\n\n  return (\n    <div>\n      <SortableList update={item.update} item={item} items={item.regions} onSortEnd={item.moveItems} {...props} />\n    </div>\n  );\n});\n\nconst HtxList = inject(\"store\")(observer(HtxListView));\n\nRegistry.addTag(\"list\", ListModel, HtxList);\n\nexport { ListModel, HtxList };\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Registry from \"../../core/Registry\";\nimport { types, getParentOfType, destroy, getRoot, getParent } from \"mobx-state-tree\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { SortableContainer, SortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport arrayMove from \"array-move\";\nimport { List } from \"antd\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\n\nconst RankerItemModel = types\n  .model({\n    backgroundColor: types.optional(types.string, \"transparent\"),\n    value: types.maybeNull(types.string),\n    _value: types.maybeNull(types.string),\n    selected: types.optional(types.boolean, false),\n    idx: types.number,\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setBG(val) {\n      self.backgroundColor = val;\n    },\n\n    setIdx(idx) {\n      self.idx = idx;\n    },\n\n    setSelected(val) {\n      self.selected = val;\n    },\n  }));\n\n/**\n * Ranker tag, used to ranking models\n * @example\n * <View>\n *   <Ranker name=\"ranker\" value=\"$items\"></Ranker>\n * </View>\n * @name Ranker\n * @param {string} name of group\n * @param {y|x=} [axis=y] axis direction\n * @param {string} sortedHighlightColor sorted color\n */\nconst TagAttrs = types.model({\n  axis: types.optional(types.string, \"y\"),\n  lockaxis: types.maybeNull(types.string),\n\n  // elementvalue: types.maybeNull(types.string),\n  elementtag: types.optional(types.string, \"Text\"),\n  ranked: types.optional(types.boolean, true),\n  sortable: types.optional(types.boolean, true),\n\n  sortedhighlightcolor: types.maybeNull(types.string),\n\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"ranker\",\n    update: types.optional(types.number, 1),\n\n    regions: types.array(RankerItemModel),\n    // update: types.optional(types.boolean, false)\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setUpdate() {\n      self.update = self.update + 1;\n    },\n\n    _addRegion(val, idx) {\n      const reg = RankerItemModel.create({\n        value: val,\n        idx: idx,\n        _value: val,\n      });\n\n      self.regions.push(reg);\n    },\n\n    moveItems({ oldIndex, newIndex }) {\n      if (oldIndex == newIndex) return;\n\n      if (self.sortedhighlightcolor) {\n        self.regions[oldIndex].setBG(self.sortedhighlightcolor);\n      }\n\n      self.regions[oldIndex].setSelected(true);\n\n      if (self._value) self._value = arrayMove(self._value, oldIndex, newIndex);\n\n      self.regions = arrayMove(self.regions, oldIndex, newIndex);\n      self.setUpdate();\n    },\n\n    toStateJSON() {\n      return {\n        from_name: self.name,\n        to_name: self.name,\n        value: {\n          // weights: ranked,\n          items: self.regions.map(r => r.value),\n          selected: self.regions.map(r => r.selected),\n        },\n      };\n    },\n\n    fromStateJSON(obj, fromModel) {\n      obj.value.items.forEach((v, idx) => {\n        self._addRegion(v, idx);\n      });\n\n      self.setUpdate();\n    },\n  }));\n\nconst RankerModel = types.compose(\n  \"RankerModel\",\n  TagAttrs,\n  Model,\n);\n\nconst DragHandle = sortableHandle(() => <div className=\"drag-handle\"></div>);\n\nfunction isMobileDevice() {\n  try {\n    return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf(\"IEMobile\") !== -1;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst SortableText = SortableElement(({ item, value }) => {\n  let classNames;\n  if (isMobileDevice) {\n    classNames = \"noselect\";\n  }\n\n  const map = {\n    text: v => <span className={classNames}>{v._value}</span>,\n    image: v => <img src={v._value} />,\n    audio: v => <audio src={v._value} />,\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"1em\",\n        userSelect: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        background: value.selected ? item.sortedhighlightcolor : \"transparent\",\n      }}\n      className={classNames}\n      onClick={ev => {\n        if (value.selected) {\n          value.setSelected(false);\n          item.setUpdate();\n        } else {\n          value.setSelected(true);\n          item.setUpdate();\n        }\n        ev.preventDefault();\n        return false;\n      }}\n    >\n      <DragHandle />\n      {map[item.elementtag.toLowerCase()](value)}\n    </div>\n  );\n});\n\nconst SortableList = SortableContainer(({ item, items }) => {\n  return (\n    <List celled>\n      {items.map((value, index) => (\n        <SortableText\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          color={value.backgroundColor}\n          item={item}\n          onClick={ev => {}}\n        />\n      ))}\n    </List>\n  );\n});\n\nconst HtxRankerView = observer(({ store, item }) => {\n  const props = {};\n  if (isMobileDevice()) {\n    props[\"pressDelay\"] = 100;\n  } else {\n    props[\"distance\"] = 7;\n  }\n\n  return (\n    <div>\n      <SortableList update={item.update} item={item} items={item.regions} onSortEnd={item.moveItems} {...props} />\n    </div>\n  );\n});\n\nconst HtxRanker = inject(\"store\")(observer(HtxRankerView));\n\nRegistry.addTag(\"ranker\", RankerModel, HtxRanker);\n\nexport { RankerModel, HtxRanker };\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParent } from \"mobx-state-tree\";\nimport { Tag } from \"antd\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Hint from \"../../components/Hint/Hint\";\n\n/**\n * Shortcut tag can be used to define a shortcut, which adds a predefined object\n * @example\n * <View>\n *   <TextArea name=\"txt-1\">\n *     <Shortcut alias=\"Silence\" value=\"<SILENCE>\" hotkey=\"ctrl+1\"></Shortcut>\n *   </TextArea>\n * </View>\n * @name Shortcut\n * @param {string} value A value of the shortcut\n * @param {string} alias Shortcut alias\n * @param {string} hotkey Hotkey\n */\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  alias: types.maybeNull(types.string),\n  hotkey: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"shortcut\",\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get hotkeyScope() {\n      const p = getParent(getParent(self));\n      return p.name;\n    },\n  }))\n  .actions(self => ({\n    onClick() {\n      const p = getParent(getParent(self));\n\n      if (p.onShortcut) p.onShortcut(self.value);\n    },\n\n    onHotKey() {\n      return self.onClick();\n    },\n  }));\n\nconst ShortcutModel = types.compose(\n  \"ShortcutModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxShortcutView = inject(\"store\")(\n  observer(({ item, store }) => {\n    const bg = {\n      backgroundColor: item.selected ? item.background : \"#e8e8e8\",\n      color: item.selected ? item.selectedcolor : \"#333333\",\n      cursor: \"pointer\",\n      margin: \"5px\",\n    };\n\n    return (\n      <Tag\n        onClick={ev => {\n          item.onClick();\n          return false;\n        }}\n        style={bg}\n      >\n        {item.alias ? item.alias : item._value}\n        {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n      </Tag>\n    );\n  }),\n);\n\nRegistry.addTag(\"shortcut\", ShortcutModel, HtxShortcutView);\n\nexport { HtxShortcutView, ShortcutModel };\n","import React, { createRef, Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Alert } from \"antd\";\n\nimport Types from \"../../core/Types\";\n\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\nimport { TextAreaModel } from \"../control/TextArea\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model(\"TextAreaRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"textarearegion\",\n\n    _value: types.string,\n    // states: types.array(types.union(LabelsModel, ChoicesModel)),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, TextAreaModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }));\n\nconst TextAreaRegionModel = types.compose(\n  \"TextAreaRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxTextAreaRegionView = ({ store, item }) => {\n  let markStyle = {\n    cursor: store.completionStore.selected.relationMode ? \"crosshair\" : \"pointer\",\n    display: \"block\",\n    marginBottom: \"0.5em\",\n  };\n\n  if (item.selected) {\n    markStyle = {\n      ...markStyle,\n      border: \"1px solid red\",\n    };\n  } else if (item.highlighted) {\n    markStyle = {\n      ...markStyle,\n      border: \"2px solid red\",\n    };\n  }\n\n  return (\n    <Alert\n      type=\"success\"\n      message={item._value}\n      style={markStyle}\n      onClick={item.onClickRegion}\n      onMouseOver={() => {\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(true);\n        }\n      }}\n      onMouseOut={() => {\n        /* range.setHighlight(false); */\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(false);\n        }\n      }}\n    />\n  );\n};\n\nconst HtxTextAreaRegion = inject(\"store\")(observer(HtxTextAreaRegionView));\n\nRegistry.addTag(\"textarearegion\", TextAreaRegionModel, HtxTextAreaRegion);\n\nexport { TextAreaRegionModel, HtxTextAreaRegion };\n","import React, { Component } from \"react\";\n\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, destroy, getEnv, flow, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport { Form, Input, Button } from \"antd\";\n\nimport { renderChildren } from \"../../core/Tree\";\nimport { guidGenerator } from \"../../core/Helpers\";\n\nimport { HtxTextAreaRegion, TextAreaRegionModel } from \"../object/TextAreaRegion\";\nimport { ShortcutModel } from \"../control/Shortcut\";\n\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nimport Tree from \"../../core/Tree\";\nimport Types from \"../../core/Types\";\n\nconst { TextArea } = Input;\n\n/**\n * TextArea tag shows the textarea for user input\n * @example\n * <View>\n *   <TextArea name=\"ta\"></TextArea>\n * </View>\n * @name TextArea\n * @param {string} name name of the element\n * @param {string} toName name of the element that you want to label if any\n * @param {string} value\n * @param {string=} label label text\n * @param {string=} placeholder placeholder text\n * @param {string=} maxSubmissions maximum number of submissions\n */\nconst TagAttrs = types.model({\n  allowSubmit: types.optional(types.boolean, true),\n  label: types.optional(types.string, \"\"),\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  rows: types.optional(types.string, \"1\"),\n  showsubmitbutton: types.optional(types.boolean, false),\n  placeholder: types.maybeNull(types.string),\n  maxsubmissions: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"textarea\",\n    regions: types.array(TextAreaRegionModel),\n\n    _value: types.optional(types.string, \"\"),\n    children: Types.unionArray([\"shortcut\"]),\n  })\n  .views(self => ({\n    get submissionsNum() {\n      return self.regions.length;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    get showSubmit() {\n      if (self.maxsubmissions) {\n        const num = parseInt(self.maxsubmissions);\n        return self.submissionsNum < num;\n      } else {\n        return true;\n      }\n    },\n  }))\n  .actions(self => ({\n    setValue(value) {\n      self._value = value;\n    },\n\n    addText(text, pid) {\n      const r = TextAreaRegionModel.create({\n        pid: pid,\n        _value: text,\n      });\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      return r;\n    },\n\n    beforeSend() {\n      if (self._value && self._value.length) {\n        self.addText(self._value);\n      }\n    },\n\n    deleteText(text) {\n      destroy(text);\n    },\n\n    onShortcut(value) {\n      self.setValue(self._value + value);\n    },\n\n    toStateJSON() {\n      const toname = self.toname || self.name;\n\n      return [\n        self.regions.map(r => {\n          return {\n            id: r.pid,\n            from_name: self.name,\n            to_name: toname,\n            type: self.type,\n            value: {\n              text: r._value,\n            },\n          };\n        }),\n      ];\n    },\n\n    fromStateJSON(obj, fromModel) {\n      return self.addText(obj.value.text, obj.id);\n    },\n  }));\n\nconst TextAreaModel = types.compose(\n  \"TextAreaModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxTextArea = observer(({ item }) => {\n  const rows = parseInt(item.rows);\n\n  const props = {\n    name: item.name,\n    value: item._value,\n    rows: item.rows,\n    className: \"is-search\",\n    label: item.label,\n    placeholder: item.placeholder,\n    onChange: ev => {\n      const { value } = ev.target;\n      item.setValue(value);\n    },\n  };\n\n  return (\n    <div>\n      {Tree.renderChildren(item)}\n\n      {item.showSubmit && (\n        <Form\n          onSubmit={ev => {\n            if (item.allowSubmit) {\n              item.addText(item._value);\n              item.setValue(\"\");\n            }\n\n            ev.preventDefault();\n            return false;\n          }}\n        >\n          <Form.Item>\n            {rows == 1 ? <Input {...props} /> : <TextArea {...props} />}\n            {(rows != 1 || item.showSubmitButton) && (\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Add\n                </Button>\n              </Form.Item>\n            )}\n          </Form.Item>\n        </Form>\n      )}\n\n      {item.regions.length > 0 && (\n        <div style={{ marginBottom: \"1em\" }}>\n          {item.regions.map(t => (\n            <HtxTextAreaRegion item={t} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n});\n\nRegistry.addTag(\"textarea\", TextAreaModel, HtxTextArea);\n\nexport { TextAreaModel, HtxTextArea };\n","/**\n * Libraries\n */\nimport React, { Component } from \"react\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, getSnapshot } from \"mobx-state-tree\";\nimport { Result, Spin } from \"antd\";\n\n/**\n * Core\n */\nimport Registry from \"../../core/Registry\";\nimport Requests from \"../../core/Requests\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Tree from \"../../core/Tree\";\n\n/**\n * Components\n */\nimport Completions from \"../Completions/Completions\";\nimport Predictions from \"../Predictions/Predictions\";\nimport Controls from \"../Controls/Controls\";\nimport Panel from \"../Panel/Panel\";\nimport Settings from \"../Settings/Settings\";\nimport Debug from \"../Debug\";\nimport SideColumn from \"../SideColumn/SideColumn\";\nimport Segment from \"../Segment/Segment\";\n\n/**\n * Visual\n */\nimport { ViewModel } from \"../../interfaces/visual/View\";\nimport { TableModel } from \"../../interfaces/visual/Table\";\nimport { HeaderModel } from \"../../interfaces/visual/Header\";\nimport { HyperTextModel } from \"../../interfaces/visual/HyperText\";\nimport { DialogModel } from \"../../interfaces/visual/Dialog\";\n\n/**\n * Object\n */\nimport { AudioModel } from \"../../interfaces/object/Audio\";\nimport { AudioPlusModel } from \"../../interfaces/object/AudioPlus\";\nimport { ImageModel } from \"../../interfaces/object/Image\";\nimport { TextModel } from \"../../interfaces/object/Text\";\n\n/**\n * Control\n */\nimport { RectangleModel } from \"../../interfaces/control/Rectangle\";\nimport { KeyPointModel } from \"../../interfaces/control/KeyPoint\";\nimport { KeyPointLabelsModel } from \"../../interfaces/control/KeyPointLabels\";\nimport { PolygonModel } from \"../../interfaces/control/Polygon\";\nimport { RectangleLabelsModel } from \"../../interfaces/control/RectangleLabels\";\nimport { PolygonLabelsModel } from \"../../interfaces/control/PolygonLabels\";\nimport { ChoicesModel } from \"../../interfaces/control/Choices\";\n\nimport { RatingModel } from \"../../interfaces/control/Rating\";\nimport { ListModel } from \"../../interfaces/control/List\";\nimport { RankerModel } from \"../../interfaces/control/Ranker\";\nimport { ShortcutModel } from \"../../interfaces/control/Shortcut\";\nimport { TextAreaModel } from \"../../interfaces/control/TextArea\";\n\n/**\n * Styles\n */\nimport styles from \"./App.module.scss\";\n\n/**\n * App\n */\nconst App = inject(\"store\")(\n  observer(\n    class App extends Component {\n      renderSuccess() {\n        return <Result status=\"success\" title=\"Done!\" />;\n      }\n\n      renderNoCompletion() {\n        return <Result status=\"success\" title=\"No more completions\" />;\n      }\n\n      renderNothingToLabel() {\n        return <Result status=\"success\" title=\"No more data available for labeling\" />;\n      }\n\n      renderLoader() {\n        return <Result icon={<Spin size=\"large\" />} />;\n      }\n\n      render() {\n        const self = this;\n        const { store } = self.props;\n        let root;\n\n        if (store.completionStore.currentCompletion) {\n          root = store.completionStore.currentCompletion.root;\n        } else if (store.completionStore.currentPrediction) {\n          root = store.completionStore.currentPrediction.root;\n        }\n\n        if (store.isLoading) return self.renderLoader();\n\n        if (store.noTask) return self.renderNothingToLabel();\n\n        if (store.labeledSuccess) return self.renderSuccess();\n\n        if (!store.completionStore.currentCompletion && !store.completionStore.currentPrediction) {\n          return self.renderNoCompletion();\n        }\n\n        return (\n          <div className={styles.editor}>\n            <Settings store={store} />\n            <Provider store={store}>\n              <div>\n                {store.hasInterface(\"panel\") && <Panel store={store} />}\n\n                {store.showingDescription && (\n                  <Segment>\n                    <div dangerouslySetInnerHTML={{ __html: store.description }} />\n                  </Segment>\n                )}\n\n                <div className={styles.common}>\n                  <Segment>\n                    {Tree.renderItem(root)}\n                    {store.hasInterface(\"controls\") && <Controls />}\n                  </Segment>\n\n                  <div className={styles.menu}>\n                    {store.hasInterface(\"completions:menu\") && <Completions store={store} />}\n\n                    {store.hasInterface(\"predictions:menu\") && <Predictions store={store} />}\n\n                    {store.hasInterface(\"side-column\") && <SideColumn store={store} />}\n                  </div>\n                </div>\n              </div>\n            </Provider>\n            {store.hasInterface(\"debug\") && <Debug store={store} />}\n          </div>\n        );\n      }\n    },\n  ),\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types, getParent } from \"mobx-state-tree\";\n\nimport Utilities from \"../utils\";\n/**\n * Model for HTTP Basic Authorization\n */\nconst AuthStore = types.model({\n  enable: types.optional(types.boolean, false),\n  username: types.string,\n  password: types.string,\n  to: types.string,\n});\n\n/**\n * Task Store\n */\nconst TaskStore = types\n  .model(\"Task\", {\n    id: types.maybeNull(types.number),\n    load: types.optional(types.boolean, false),\n    auth: types.maybeNull(AuthStore),\n    /**\n     * Data of task, may contain an object but in App Store will be transformed into string\n     * MST doesn't support processing of dynamic objects with unkown keys value\n     */\n    data: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get app() {\n      return getParent(self);\n    },\n\n    /**\n     * Return JSON with task data\n     * @returns {object}\n     */\n    get dataObj() {\n      if (Utilities.Checkers.isStringJSON(self.data)) {\n        return JSON.parse(self.data);\n      } else if (typeof self.data === \"object\") {\n        return self.data;\n      } else {\n        return null;\n      }\n    },\n  }));\n\nexport default TaskStore;\n","import { types, getParent } from \"mobx-state-tree\";\n\n/**\n * Project Store\n */\nconst ProjectStore = types\n  .model(\"Project\", {\n    /**\n     * Project ID\n     */\n    id: types.identifierNumber,\n  })\n  .views(self => ({\n    get app() {\n      return getParent(self);\n    },\n  }));\n\nexport default ProjectStore;\n","import { types } from \"mobx-state-tree\";\n\n/**\n * User store of Label Studio\n */\nconst UserStore = types.model(\"UserStore\", {\n  /**\n   * Personal key of user\n   */\n  pk: types.integer,\n  /**\n   * Name of user\n   */\n  firstName: types.string,\n  /**\n   * Last name of user\n   */\n  lastName: types.string,\n});\n\nexport default UserStore;\n","import keymaster from \"keymaster\";\n\nlet _hotkeys_map = {};\n\nkeymaster.filter = function(event) {\n  if (keymaster.getScope() === \"__none__\") return;\n\n  const tag = (event.target || event.srcElement).tagName;\n  const name = (event.target || event.srcElement).name;\n\n  keymaster.setScope(/^(INPUT|TEXTAREA|SELECT)$/.test(tag) ? name : \"__main__\");\n\n  return true;\n};\n\n/**\n * Add key\n * @param {*} key\n * @param {*} func\n */\nfunction addKey(key, func, scope) {\n  if (_hotkeys_map[key]) return;\n  if (!scope) scope = \"__main__\";\n\n  _hotkeys_map[key] = true;\n  keymaster(key, scope, func);\n}\n\n/**\n * Unbund all hotkeys\n */\nfunction unbindAll() {\n  for (let key of Object.keys(_hotkeys_map)) keymaster.unbind(key);\n\n  _hotkeys_map = {};\n}\n\n/**\n * Set scope of hotkeys\n * @param {*} scope\n */\nfunction setScope(scope) {\n  keymaster.setScope(scope);\n}\n\n/**\n * Create combination\n */\nfunction makeComb() {\n  let prefix = null;\n  let st = \"1234567890qwertasdfgzxcvbyuiophjklnm\";\n  let combs = st.split(\"\");\n\n  for (var i = 0; i <= combs.length; i++) {\n    let comb;\n    if (prefix) comb = prefix + \"+\" + combs[i];\n    else comb = combs[i];\n\n    if (!_hotkeys_map.hasOwnProperty(comb)) return comb;\n  }\n\n  return null;\n}\n\nexport default { addKey, unbindAll, makeComb, setScope };\n","import { types } from \"mobx-state-tree\";\n\nimport Hotkey from \"../core/Hotkey\";\n\n/**\n * Setting store of Label Studio\n */\nconst SettingsModel = types\n  .model(\"SettingsModel\", {\n    /**\n     * Hotkey\n     */\n    enableHotkeys: types.optional(types.boolean, true),\n    /**\n     * Hotkey panel\n     */\n    enablePanelHotkeys: types.optional(types.boolean, true),\n    /**\n     * Tooltips preview\n     */\n    enableTooltips: types.optional(types.boolean, true),\n  })\n  .actions(self => ({\n    toggleHotkeys() {\n      self.enableHotkeys = !self.enableHotkeys;\n      if (self.enableHotkeys) {\n        Hotkey.setScope(\"__main__\");\n      } else {\n        Hotkey.setScope(\"__none__\");\n      }\n    },\n\n    /**\n     * Function to off/on panel of hotkeys\n     */\n    togglePanelHotkeys() {\n      self.enablePanelHotkeys = !self.enablePanelHotkeys;\n    },\n\n    /**\n     * Function to off/on tooltips\n     */\n    toggleTooltips() {\n      self.enableTooltips = !self.enableTooltips;\n    },\n  }));\n\nexport default SettingsModel;\n","import { types, resolvePath, getEnv, onSnapshot, getSnapshot, applySnapshot } from \"mobx-state-tree\";\n\n/**\n * Time Traveller\n */\nconst TimeTraveller = types\n  .model(\"TimeTraveller\", {\n    history: types.array(types.frozen()),\n    undoIdx: -1,\n    targetPath: \"\",\n    skipNextUndoState: types.optional(types.boolean, false),\n\n    createdIdx: 1,\n\n    isFrozen: types.optional(types.boolean, false),\n    frozenIdx: -1,\n  })\n  .views(self => ({\n    get canUndo() {\n      // [TODO] since we initialize state a bit incorrectly we end up with 2 items in history\n      // before even any action takes place. To protect those items we keep them in history forever\n      return self.undoIdx > 1;\n    },\n    get canRedo() {\n      return self.undoIdx < self.history.length - 1;\n    },\n  }))\n  .actions(self => {\n    let targetStore;\n    let snapshotDisposer;\n\n    return {\n      freeze() {\n        self.isFrozen = true;\n        self.skipNextUndoState = true;\n        self.frozenIdx = self.undoIdx;\n      },\n\n      addUndoState(recorder) {\n        if (self.skipNextUndoState) {\n          /**\n           * Skip recording if this state was caused by undo / redo\n           */\n          self.skipNextUndoState = false;\n\n          return;\n        }\n\n        self.history.splice(self.undoIdx);\n        self.history.push(recorder);\n        self.undoIdx = self.history.length;\n      },\n\n      afterCreate() {\n        targetStore = self.targetPath ? resolvePath(self, self.targetPath) : getEnv(self).targetStore;\n\n        if (!targetStore)\n          throw new Error(\n            \"Failed to find target store for TimeTraveller. Please provide `targetPath`  property, or a `targetStore` in the environment\",\n          );\n        // TODO: check if targetStore doesn't contain self\n        // if (contains(targetStore, self)) throw new Error(\"TimeTraveller shouldn't be recording itself. Please specify a sibling as taret, not some parent\")\n        // start listening to changes\n        snapshotDisposer = onSnapshot(targetStore, snapshot => this.addUndoState(snapshot));\n        // record an initial state if no known\n        if (self.history.length === 0) {\n          self.addUndoState(getSnapshot(targetStore));\n        }\n\n        self.createdIdx = self.undoIdx;\n      },\n\n      beforeDestroy() {\n        snapshotDisposer();\n      },\n\n      undo() {\n        if (self.isFrozen && self.frozenIdx < self.undoIdx) return;\n\n        let newIdx = self.undoIdx - 1;\n\n        self.set(newIdx);\n      },\n\n      redo() {\n        let newIdx = self.undoIdx + 1;\n\n        self.set(newIdx);\n      },\n\n      set(idx) {\n        self.undoIdx = idx;\n        self.skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[idx]);\n      },\n\n      reset() {\n        self.set(self.createdIdx);\n      },\n    };\n  });\n\nexport default TimeTraveller;\n","import { types, getParent, getEnv, flow, destroy, getMembers } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nconst Relation = types\n  .model(\"Relation\", {\n    node1: types.reference(\n      types.union(\n        HtxObjectModel.TextRegionModel,\n        HtxObjectModel.RectRegionModel,\n        HtxObjectModel.PolygonRegionModel,\n        HtxObjectModel.AudioRegionModel,\n        HtxObjectModel.TextAreaRegionModel,\n        HtxObjectModel.KeyPointRegionModel,\n      ),\n    ),\n    node2: types.reference(\n      types.union(\n        HtxObjectModel.TextRegionModel,\n        HtxObjectModel.RectRegionModel,\n        HtxObjectModel.PolygonRegionModel,\n        HtxObjectModel.AudioRegionModel,\n        HtxObjectModel.TextAreaRegionModel,\n        HtxObjectModel.KeyPointRegionModel,\n      ),\n    ),\n  })\n  .actions(self => ({\n    toggleHighlight() {\n      if (self.node1 == self.node2) {\n        self.node1.toggleHightlight();\n      } else {\n        self.node1.toggleHightlight();\n        self.node2.toggleHightlight();\n      }\n    },\n  }));\n\nexport default types\n  .model(\"RelationStore\", {\n    relations: types.array(Relation),\n  })\n  .actions(self => ({\n    findRelations(node1, node2) {\n      if (!node2) {\n        return self.relations.filter(rl => {\n          return rl.node1.id == node1.id || rl.node2.id == node1.id;\n        });\n      }\n\n      return self.relations.filter(rl => {\n        return rl.node1.id == node1.id && rl.node2.id == node2.id;\n      });\n    },\n\n    nodesRelated(node1, node2) {\n      return self.findRelations(node1, node2).length > 0;\n    },\n\n    addRelation(node1, node2) {\n      if (self.nodesRelated(node1, node2)) return;\n\n      const rl = Relation.create({\n        node1: node1,\n        node2: node2,\n      });\n\n      // self.relations.unshift(rl);\n      self.relations.push(rl);\n\n      return rl;\n    },\n\n    deleteRelation(rl) {\n      destroy(rl);\n    },\n\n    deleteNodeRelation(node) {\n      // lookup $node and delete it's relation\n      const rl = self.findRelations(node);\n      rl.length && rl.forEach(self.deleteRelation);\n    },\n\n    serializeCompletion() {\n      return self.relations.map(r => {\n        return {\n          from_id: r.node1.pid,\n          to_id: r.node2.pid,\n          type: \"relation\",\n        };\n      });\n    },\n\n    deserializeRelation(node1, node2) {\n      self.addRelation(node1, node2);\n    },\n  }));\n","import { types, getParent, getEnv, flow, destroy, getMembers } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport { TextRegionModel } from \"../interfaces/object/TextRegion\";\nimport { RectRegionModel } from \"../interfaces/object/RectRegion\";\nimport { AudioRegionModel } from \"../interfaces/object/AudioRegion\";\n\nconst Normalization = types\n  .model(\"Normalization\", {\n    node1: types.union(\n      types.reference(TextRegionModel),\n      types.reference(RectRegionModel),\n      types.reference(AudioRegionModel),\n    ),\n    node2: types.union(\n      types.reference(TextRegionModel),\n      types.reference(RectRegionModel),\n      types.reference(AudioRegionModel),\n    ),\n  })\n  .actions(self => ({\n    toggleHighlight() {\n      if (self.node1 == self.node2) {\n        self.node1.toggleHightlight();\n      } else {\n        self.node1.toggleHightlight();\n        self.node2.toggleHightlight();\n      }\n    },\n  }));\n\nexport default types\n  .model(\"NormalizationStore\", {\n    normalizations: types.array(Normalization),\n  })\n  .actions(self => ({\n    findNormalization(node1, node2) {\n      if (!node2) {\n        return self.normalizations.find(rl => {\n          return rl.node1.id == node1.id || rl.node2.id == node1.id;\n        });\n      }\n\n      return self.normalizations.find(rl => {\n        return rl.node1.id == node1.id && rl.node2.id == node2.id;\n      });\n    },\n\n    addNormalization(node1, node2) {\n      if (self.findNormalization(node1, node2)) return;\n\n      const rl = Normalization.create({\n        node1: node1,\n        node2: node2,\n      });\n\n      self.normalizations.unshift(rl);\n\n      return rl;\n    },\n\n    deleteNormalization(rl) {\n      destroy(rl);\n    },\n\n    deleteNodeNormalization(node) {\n      // lookup $node and delete it's normalization\n      const rl = self.findNormalization(node);\n\n      if (rl) self.deleteNormalization(rl);\n    },\n  }));\n","import { types, getParent, destroy } from \"mobx-state-tree\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nexport default types\n  .model(\"RegionStore\", {\n    regions: types.array(\n      types.safeReference(\n        types.union(\n          HtxObjectModel.TextRegionModel,\n          HtxObjectModel.RectRegionModel,\n          HtxObjectModel.PolygonRegionModel,\n          HtxObjectModel.AudioRegionModel,\n          HtxObjectModel.TextAreaRegionModel,\n          HtxObjectModel.KeyPointRegionModel,\n        ),\n      ),\n    ),\n  })\n  .actions(self => ({\n    addRegion(region) {\n      self.regions.push(region);\n    },\n\n    findRegion(pid) {\n      return self.regions.find(r => r.pid === pid);\n    },\n\n    /**\n     * Delete region\n     * @param {obj} region\n     */\n    deleteRegion(region) {\n      const arr = self.regions;\n\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === region) {\n          arr.splice(i, 1);\n        }\n      }\n    },\n\n    unselectAll() {\n      self.regions.forEach(r => r.unselectRegion());\n      getParent(self).setHighlightedNode(null);\n    },\n\n    unhighlightAll() {\n      self.regions.forEach(r => r.setHighlight(false));\n    },\n  }));\n","import { types, getParent, getEnv, flow, destroy, detach } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport Registry from \"../core/Registry\";\nimport Tree from \"../core/Tree\";\nimport TimeTraveller from \"../core/TimeTraveller\";\nimport Hotkey from \"../core/Hotkey\";\n\nimport RelationStore from \"./RelationStore\";\nimport NormalizationStore from \"./NormalizationStore\";\nimport RegionStore from \"./RegionStore\";\nimport { RectangleModel } from \"../interfaces/control/Rectangle\";\nimport Utils from \"../utils\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nconst Completion = types\n  .model(\"Completion\", {\n    id: types.identifier,\n    pk: types.optional(types.string, guidGenerator(5)),\n    selected: types.optional(types.boolean, false),\n\n    createdDate: types.optional(types.string, Utils.UDate.currentISODate()),\n    createdAgo: types.maybeNull(types.string),\n    createdBy: types.optional(types.string, \"Admin\"),\n\n    loadedDate: types.optional(types.Date, new Date()),\n    leadTime: types.maybeNull(types.number),\n\n    userGenerate: types.optional(types.boolean, true),\n    update: types.optional(types.boolean, false),\n    sentUserGenerate: types.optional(types.boolean, false),\n    localUpdate: types.optional(types.boolean, false),\n\n    honeypot: types.optional(types.boolean, false),\n\n    root: Types.allModelsTypes(),\n    names: types.map(types.reference(Types.allModelsTypes())),\n    toNames: types.map(types.array(types.reference(Types.allModelsTypes()))),\n\n    history: types.optional(TimeTraveller, { targetPath: \"../root\" }),\n\n    dragMode: types.optional(types.boolean, false),\n\n    relationMode: types.optional(types.boolean, false),\n    relationStore: types.optional(RelationStore, {\n      relations: [],\n    }),\n\n    normalizationMode: types.optional(types.boolean, false),\n    normalizationStore: types.optional(NormalizationStore, {\n      normalizations: [],\n    }),\n\n    regionStore: types.optional(RegionStore, {\n      regions: [],\n    }),\n\n    highlightedNode: types.maybeNull(\n      types.union(\n        types.safeReference(HtxObjectModel.TextRegionModel),\n        types.safeReference(HtxObjectModel.RectRegionModel),\n        types.safeReference(HtxObjectModel.AudioRegionModel),\n        types.safeReference(HtxObjectModel.TextAreaRegionModel),\n        types.safeReference(HtxObjectModel.PolygonRegionModel),\n        types.safeReference(HtxObjectModel.KeyPointRegionModel),\n        types.safeReference(RectangleModel),\n      ),\n    ),\n  })\n  .views(self => ({\n    get store() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    reinitHistory() {\n      self.history = { targetPath: \"../root\" };\n    },\n    /**\n     * Send update to serve\n     * @param {*} state\n     */\n    _updateServerState(state) {\n      let appStore = getParent(self, 3);\n      let url = \"/api/tasks/\" + appStore.task.id + \"/completions/\" + self.pk + \"/\";\n\n      getEnv(self).patch(url, JSON.stringify(state));\n    },\n\n    setHoneypot() {\n      self.honeypot = true;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    sendUserGenerate() {\n      self.sentUserGenerate = true;\n    },\n\n    setLocalUpdate(value) {\n      self.localUpdate = value;\n    },\n\n    setDragMode(val) {\n      self.dragMode = val;\n    },\n\n    updatePersonalKey(value) {\n      self.pk = value;\n    },\n\n    setNormalizationMode(val) {\n      self.normalizationMode = val;\n    },\n\n    setHighlightedNode(node) {\n      self.highlightedNode = node;\n    },\n\n    startRelationMode(node1) {\n      self._relationObj = node1;\n      self.relationMode = true;\n    },\n\n    stopRelationMode() {\n      self._relationObj = null;\n      self.relationMode = false;\n\n      self.regionStore.unhighlightAll();\n    },\n\n    deleteAllRegions() {\n      self.regionStore.regions.forEach(r => r.deleteRegion());\n    },\n\n    addRegion(reg) {\n      self.regionStore.unselectAll();\n      self.regionStore.addRegion(reg);\n\n      if (self.relationMode) {\n        self.addRelation(reg);\n        self.stopRelationMode();\n      }\n    },\n\n    /**\n     * Add relation\n     * @param {*} reg\n     */\n    addRelation(reg) {\n      self.relationStore.addRelation(self._relationObj, reg);\n    },\n\n    addNormalization(normalization) {\n      self.normalizationStore.addNormalization();\n    },\n\n    /**\n     * Remove honeypot\n     */\n    removeHoneypot() {\n      self.honeypot = false;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    traverseTree(cb) {\n      let visitNode;\n\n      visitNode = function(node) {\n        cb(node);\n\n        if (node.children) {\n          node.children.forEach(chld => visitNode(chld));\n        }\n      };\n\n      visitNode(self.root);\n    },\n\n    /**\n     *\n     */\n    beforeSend() {\n      self.traverseTree(node => {\n        if (node && node.beforeSend) {\n          node.beforeSend();\n        }\n      });\n\n      self.stopRelationMode();\n      self.regionStore.unselectAll();\n    },\n\n    /**\n     * Delete region\n     * @param {*} region\n     */\n    deleteRegion(region) {\n      if (region.type === \"polygonregion\") {\n        detach(region);\n        return;\n      }\n\n      destroy(region);\n    },\n\n    afterCreate() {\n      //\n      if (self.userGenerate && !self.sentUserGenerate) {\n        self.loadedDate = new Date();\n      }\n\n      self.traverseTree(node => {\n        // create mapping from name to Model (by ref)\n        if (node && node.name && node.id) self.names.set(node.name, node.id);\n\n        if (node && node.toname && node.id) {\n          const val = self.toNames.get(node.toname);\n          if (val) {\n            val.push(node.id);\n          } else {\n            self.toNames.set(node.toname, [node.id]);\n          }\n        }\n      });\n\n      Hotkey.unbindAll();\n\n      // [TODO] we need to traverse this two times, fix\n      self.traverseTree(node => {\n        if (node && node.onHotKey && node.hotkey) {\n          Hotkey.addKey(node.hotkey, node.onHotKey, node.hotkeyScope);\n        }\n\n        /**\n         * Hotkey for controls\n         */\n        if (node && node.onHotKey && !node.hotkey) {\n          const comb = Hotkey.makeComb();\n\n          if (!comb) return;\n\n          node.hotkey = comb;\n          Hotkey.addKey(node.hotkey, node.onHotKey);\n        }\n      });\n\n      Hotkey.setScope(\"__main__\");\n    },\n\n    serializeCompletion() {\n      const arr = [];\n\n      self.traverseTree(node => {\n        if (node.toStateJSON) {\n          const val = node.toStateJSON();\n\n          if (val) arr.push(val);\n        }\n      });\n\n      const relations = self.relationStore.serializeCompletion();\n      if (relations) arr.push(relations);\n\n      const flatten = arr => {\n        return arr.reduce(function(flat, toFlatten) {\n          return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n        }, []);\n      };\n\n      return flatten(arr);\n    },\n\n    /**\n     * Deserialize completion of models\n     */\n    deserializeCompletion(json) {\n      let objCompletion = json;\n\n      if (typeof objCompletion !== \"object\") {\n        objCompletion = JSON.parse(objCompletion);\n      }\n\n      objCompletion.forEach(obj => {\n        if (obj[\"type\"] !== \"relation\") {\n          const names = obj.to_name.split(\",\");\n          names.forEach(name => {\n            const toModel = self.names.get(name);\n            if (!toModel) throw new Error(\"No model found for \" + obj.to_name);\n\n            const fromModel = self.names.get(obj.from_name);\n            if (!fromModel) throw new Error(\"No model found for \" + obj.from_name);\n\n            toModel.fromStateJSON(obj, fromModel);\n          });\n        } else {\n          self.relationStore.deserializeRelation(\n            self.regionStore.findRegion(obj.from_id),\n            self.regionStore.findRegion(obj.to_id),\n          );\n        }\n      });\n    },\n  }));\n\nexport default types\n  .model(\"CompletionStore\", {\n    completions: types.array(Completion),\n    selected: types.maybeNull(types.reference(Completion)),\n    predictions: types.array(Completion),\n    predictSelect: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    /**\n     * Get current completion\n     */\n    get currentCompletion() {\n      return self.selected && self.completions.find(c => c.id === self.selected.id);\n    },\n\n    get currentPrediction() {\n      return self.selected && self.predictions.find(c => c.id === self.selected.id);\n    },\n\n    /**\n     * Get parent\n     */\n    get store() {\n      return getParent(self);\n    },\n\n    /**\n     * Get only those that were saved\n     */\n    get savedCompletions() {\n      return self.completions.filter(c => c);\n    },\n  }))\n  .actions(self => {\n    function selectedPredict() {\n      self.predictSelect = true;\n    }\n\n    function unSelectedPredict() {\n      self.predictSelect = false;\n    }\n\n    /**\n     * Select completion\n     * @param {*} id\n     */\n    function selectCompletion(id) {\n      self.completions.map(c => (c.selected = false));\n      if (self.predictions) self.predictions.map(c => (c.selected = false));\n      const c = self.completions.find(c => c.id === id);\n\n      unSelectedPredict();\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    function selectPrediction(id) {\n      self.predictions.map(c => (c.selected = false));\n      self.completions.map(c => (c.selected = false));\n      const c = self.predictions.find(c => c.id === id);\n      selectedPredict();\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    /**\n     * Adding new completion\n     * @param {object} node\n     * @param {string} type\n     */\n    function addCompletion(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdCompletion = Completion.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && self.store.task.data && type === \"initial\") {\n        createdCompletion.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.completions.unshift(createdCompletion);\n\n      return createdCompletion;\n    }\n\n    function addPredictionItem(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdPrediction = Completion.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && type === \"initial\") {\n        createdPrediction.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.predictions.unshift(createdPrediction);\n\n      return createdPrediction;\n    }\n\n    /**\n     * Send request to server for delete completion\n     */\n    const _deleteCompletion = flow(function* _deleteCompletion(pk) {\n      try {\n        const json = yield getEnv(self).remove(\"/api/tasks/\" + self.store.task.id + \"/completions/\" + pk + \"/\");\n      } catch (err) {\n        console.error(\"Failed to skip task \", err);\n      }\n    });\n\n    /**\n     * Destroy completion\n     * @param {*} completion\n     */\n    function destroyCompletion(completion) {\n      /**\n       * MST destroy completion\n       */\n      destroy(completion);\n\n      self.selected = null;\n      /**\n       * Select other completion\n       */\n      if (self.completions.length > 0) {\n        self.selectCompletion(self.completions[0].id);\n      }\n    }\n\n    function deleteCompletion(completion) {\n      getEnv(self).deleteCompletion(completion);\n\n      if (getParent(self).apiCalls) {\n        _deleteCompletion(completion.pk);\n      }\n\n      destroyCompletion(completion);\n    }\n\n    /**\n     *\n     * @param {*} c\n     */\n    function addSavedCompletion(c) {\n      const completionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      let root = modelClass.create(completionModel);\n\n      const node = {\n        id: c.id || guidGenerator(5),\n        pk: c.id,\n        createdAgo: c.created_ago,\n        createdBy: c.created_username,\n        leadTime: c.lead_time,\n        honeypot: c.honeypot,\n        root: root,\n        userGenerate: false,\n      };\n\n      const completion = self.addCompletion(node, \"list\");\n\n      return completion;\n    }\n\n    function addPrediction(prediction) {\n      const predictionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(predictionModel.type);\n\n      let root = modelClass.create(predictionModel);\n\n      const node = {\n        id: prediction.id || guidGenerator(),\n        pk: prediction.id,\n        createdAgo: prediction.created_ago,\n        createdBy: prediction.model_version,\n        root: root,\n      };\n\n      const returnPredict = self.addPredictionItem(node, \"list\");\n\n      return returnPredict;\n    }\n\n    function generateCompletion(options) {\n      /**\n       * Convert config to model\n       */\n      const completionModel = Tree.treeToModel(self.store.config);\n\n      /**\n       * Get model by type of tag\n       */\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      /**\n       * Completion model init\n       */\n      let root = modelClass.create(completionModel);\n\n      let node = {\n        id: guidGenerator(5),\n        root: root,\n      };\n\n      if (options && options.userGenerate) {\n        node = {\n          ...node,\n          userGenerate: options.userGenerate,\n        };\n      }\n\n      /**\n       * Expert module for initial completion\n       */\n      if (self.store.expert) {\n        const { expert } = self.store;\n        node[\"createdBy\"] = `${expert.firstName} ${expert.lastName}`;\n      }\n\n      /**\n       *\n       */\n      let completion = self.addCompletion(node, \"initial\");\n\n      if (options && options.userGenerate) {\n        self.selectCompletion(node.id);\n      }\n\n      return completion;\n    }\n\n    /**\n     * Initial Completion\n     * @returns {object}\n     */\n    function addInitialCompletion() {\n      return self.generateCompletion();\n    }\n\n    function addUserCompletion() {\n      return self.generateCompletion({ userGenerate: true });\n    }\n\n    function addCompletionFromPrediction() {\n      const selectedData = self.selected.serializeCompletion();\n\n      const c = self.generateCompletion({ userGenerate: true });\n      c.deserializeCompletion(selectedData);\n\n      return c;\n    }\n\n    return {\n      selectCompletion,\n      selectPrediction,\n      addCompletion,\n      addCompletionFromPrediction,\n      deleteCompletion,\n      destroyCompletion,\n      addInitialCompletion,\n      addSavedCompletion,\n      addUserCompletion,\n      addPrediction,\n      addPredictionItem,\n      generateCompletion,\n    };\n  });\n","export const API_URL = {\n  MAIN: \"/api\",\n  TASKS: \"/tasks\",\n  COMPLETIONS: \"/completions\",\n  CANCEL: \"/cancel\",\n  PROJECTS: \"/projects\",\n  NEXT: \"/next\",\n  EXPERT_INSRUCTIONS: \"/expert_instruction\",\n};\n","import { types, getEnv, flow, getSnapshot } from \"mobx-state-tree\";\n\nimport Task from \"./TaskStore\";\nimport Project from \"./ProjectStore\";\nimport User from \"./UserStore\";\nimport Settings from \"./SettingsStore\";\nimport CompletionStore from \"./CompletionStore\";\nimport Hotkey from \"../core/Hotkey\";\nimport { API_URL } from \"../constants/Api\";\nimport Utils from \"../utils\";\n\nimport InfoModal from \"../components/Infomodal/Infomodal\";\n\nexport default types\n  .model(\"AppStore\", {\n    /**\n     * XML config\n     */\n    config: types.string,\n\n    /**\n     * Task with data, id and project\n     */\n    task: types.maybeNull(Task),\n\n    project: types.maybeNull(Project),\n\n    /**\n     * Interfaces for configure Label Studio\n     */\n    interfaces: types.array(types.string),\n    /**\n     * Flag fo labeling of tasks\n     */\n    explore: types.optional(types.boolean, false),\n\n    /**\n     * Completions Store\n     */\n    completionStore: types.optional(CompletionStore, {\n      completions: [],\n      predictions: [],\n    }),\n\n    /**\n     * Expert of Label Studio\n     */\n    expert: User,\n\n    /**\n     * Debug for development environment\n     */\n    debug: types.optional(types.boolean, true),\n\n    /**\n     * Settings of Label Studio\n     */\n    settings: types.optional(Settings, {}),\n\n    apiCalls: types.optional(types.boolean, true),\n\n    /**\n     * Flag for settings\n     */\n    showingSettings: types.optional(types.boolean, false),\n    /**\n     * Flag\n     * Description of task in Label Studio\n     */\n    showingDescription: types.optional(types.boolean, false),\n    /**\n     * Data of description flag\n     */\n    description: types.maybeNull(types.string),\n    /**\n     * Loading of Label Studio\n     */\n    isLoading: types.optional(types.boolean, false),\n    /**\n     * Flag for disable task in Label Studio\n     */\n    noTask: types.optional(types.boolean, false),\n    /**\n     * Finish of labeling\n     */\n    labeledSuccess: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    /**\n     * Get fetch request\n     */\n    get fetch() {\n      return getEnv(self).fetch;\n    },\n    get fetchAuth() {\n      return getEnv(self).fetchAuth;\n    },\n    /**\n     * Get alert\n     */\n    get alert() {\n      return getEnv(self).alert;\n    },\n    /**\n     * Get pot request\n     */\n    get post() {\n      return getEnv(self).post;\n    },\n  }))\n  .actions(self => {\n    /**\n     * Update settings display state\n     */\n    function toggleSettings() {\n      self.showingSettings = !self.showingSettings;\n    }\n\n    /**\n     * Update description display state\n     */\n    function toggleDescription() {\n      self.showingDescription = !self.showingDescription;\n    }\n\n    /**\n     * Function of loading\n     */\n    function markLoading(loading) {\n      self.isLoading = loading;\n    }\n\n    /**\n     * Check for interfaces\n     * @param {string} name\n     * @returns {string | undefined}\n     */\n    function hasInterface(name) {\n      return self.interfaces.find(i => name === i);\n    }\n\n    /**\n     * Function\n     */\n    const afterCreate = function() {\n      self.loadTask();\n\n      /**\n       * Hotkey for submit\n       */\n      Hotkey.addKey(\"ctrl+enter\", self.sendTask);\n\n      /**\n       * Hotkey for skip task\n       */\n      if (self.hasInterface(\"skip\")) Hotkey.addKey(\"ctrl+space\", self.skipTask);\n\n      /**\n       * Hotkey for update completion\n       */\n      if (self.hasInterface(\"update\")) Hotkey.addKey(\"alt+enter\", self.updateTask);\n\n      /**\n       * Hotkey for delete\n       */\n      Hotkey.addKey(\"ctrl+backspace\", function() {\n        const { selected } = self.completionStore;\n        selected.deleteAllRegions();\n      });\n\n      Hotkey.addKey(\"ctrl+z\", function() {\n        const { history } = self.completionStore.selected;\n        history && history.canUndo && history.undo();\n      });\n\n      Hotkey.addKey(\"escape\", function() {\n        const c = self.completionStore.selected;\n        if (c && c.relationMode) {\n          c.stopRelationMode();\n        }\n      });\n\n      Hotkey.addKey(\"backspace\", function() {\n        const c = self.completionStore.selected;\n        if (c && c.highlightedNode) {\n          c.highlightedNode.deleteRegion();\n        }\n      });\n    };\n\n    /**\n     * Load task from API\n     */\n    function loadTask() {\n      if (self.task && self.task.load && self.task.id) {\n        return loadTaskAPI(`${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}/`);\n      } else if (self.explore && self.project && self.project.id) {\n        return loadTaskAPI(`${API_URL.MAIN}${API_URL.PROJECTS}/${self.project.id}${API_URL.NEXT}`);\n      }\n    }\n\n    /**\n     *\n     * @param {*} taskObject\n     */\n    function addTask(taskObject) {\n      if (taskObject && !Utils.Checkers.isString(taskObject.data)) {\n        taskObject = {\n          ...taskObject,\n          [taskObject.data]: JSON.stringify(taskObject.data),\n        };\n      }\n      self.task = Task.create(taskObject);\n    }\n\n    /**\n     * Reset completion store\n     */\n    function resetState() {\n      self.completionStore = CompletionStore.create({ completions: [] });\n\n      const c = self.completionStore.addInitialCompletion();\n\n      self.completionStore.selectCompletion(c.id);\n    }\n\n    /**\n     * Load task from API\n     */\n    const loadTaskAPI = flow(function*(url) {\n      try {\n        const loadedTask = yield self.fetch(url);\n\n        if (loadedTask instanceof Response && loadedTask.status === 404) {\n          self.markLoading(false);\n          self.noTask = true;\n          return;\n        }\n\n        loadedTask.json().then(response => {\n          /**\n           * Convert received data to string for MST support\n           */\n          response.data = JSON.stringify(response.data);\n\n          /**\n           * Add new data from received task\n           */\n          self.addTask(response);\n\n          /**\n           * Completions\n           */\n          if (self.hasInterface(\"completions\") && response.completions) {\n            self.completionStore.destroyCompletion(self.completionStore.selected);\n\n            for (var i = 0; i < response.completions.length; i++) {\n              const completion = response.completions[i];\n\n              if (completion.was_cancelled === true) continue;\n\n              const comp = self.completionStore.addSavedCompletion(completion);\n              comp.traverseTree(node => node.updateValue && node.updateValue(self));\n              self.completionStore.selectCompletion(comp.id);\n              comp.deserializeCompletion(completion.result);\n              comp.reinitHistory();\n            }\n          } else {\n            if (self.completionStore.selected)\n              self.completionStore.selected.traverseTree(node => node.updateValue && node.updateValue(self));\n\n            // self.addGeneratedCompletion(r);\n          }\n\n          if (self.hasInterface(\"predictions\") && response.predictions) {\n            if (response.predictions && response.predictions.length) {\n              for (let i = 0; i < response.predictions.length; i++) {\n                const prediction = self.completionStore.addPrediction(response.predictions[i]);\n                prediction.traverseTree(node => node.updateValue && node.updateValue(self));\n                self.completionStore.selectPrediction(prediction.id);\n                prediction.deserializeCompletion(response.predictions[i].result);\n                prediction.reinitHistory();\n              }\n            }\n          }\n          /**\n           * Loader disabled\n           */\n          self.markLoading(false);\n        });\n      } catch (err) {\n        console.error(\"Failed to load next task \", err);\n      }\n    });\n\n    /**\n     * Skip current task\n     */\n    const skipTask = flow(function* skipTask() {\n      getEnv(self).skipTask();\n\n      if (self.apiCalls) {\n        self.markLoading(true);\n\n        try {\n          const json = yield self.post(\n            `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.CANCEL}`,\n            JSON.stringify({ data: JSON.stringify({ error: \"cancelled\" }) }),\n          );\n\n          self.resetState();\n\n          return loadTask();\n        } catch (err) {\n          console.error(\"Failed to skip task \", err);\n        }\n      } else {\n        InfoModal.warning(\"This mode without API calls.\");\n      }\n    });\n\n    /**\n     * Wrapper of completion send\n     * @param {string} requestType\n     */\n    const sendToServer = requestType => {\n      return flow(function*() {\n        const c = self.completionStore.selected;\n\n        c.beforeSend();\n\n        const savedCompletions = c.serializeCompletion();\n\n        /**\n         * Check for pending completions\n         */\n        if (self.hasInterface(\"check-empty\") && savedCompletions.length === 0) {\n          InfoModal.warning(\"You need to label at least something!\");\n          return;\n        }\n\n        /**\n         * Loading will be true\n         */\n        self.markLoading(true);\n\n        try {\n          const body = JSON.stringify({\n            lead_time: (new Date() - c.loadedDate) / 1000, // task execution time\n            result: savedCompletions, // array with completions\n          });\n\n          if (requestType === \"update_result\") {\n            getEnv(self).updateCompletion(JSON.parse(body));\n\n            if (self.apiCalls) {\n              yield getEnv(self).patch(\n                `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.COMPLETIONS}/${c.pk}/`,\n                body,\n              );\n            }\n          } else if (requestType === \"post_result\") {\n            getEnv(self).submitCompletion(JSON.parse(body));\n\n            if (self.apiCalls) {\n              const responseCompletion = yield self.post(\n                `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.COMPLETIONS}/`,\n                body,\n              );\n\n              const data = yield responseCompletion.json();\n              if (data && data.id) {\n                self.completionStore.selected.updatePersonalKey(data.id.toString());\n              }\n            }\n          }\n\n          if (hasInterface(\"load\")) {\n            self.resetState();\n            return loadTask();\n          } else {\n            self.markLoading(false);\n            self.completionStore.selected.sendUserGenerate();\n\n            if (self.explore && self.project.id) {\n              self.labeledSuccess = true;\n            }\n          }\n        } catch (err) {\n          console.error(\"Failed to send task \", err);\n        }\n      });\n    };\n\n    /**\n     * Update current completion\n     */\n    const updateTask = sendToServer(\"update_result\");\n\n    /**\n     * Send current completion\n     */\n    const sendTask = sendToServer(\"post_result\");\n\n    /**\n     * Function to initilaze completion store\n     */\n    function initializeStore({ completions, predictions }) {\n      /**\n       * Array of generated completions\n       */\n      let generatedCompletions = [];\n\n      if (predictions && predictions.length) {\n        for (let i = 0; i < predictions.length; i++) {\n          const pred = self.completionStore.addPrediction(predictions[i]);\n          pred.traverseTree(node => node.updateValue && node.updateValue(self));\n          self.completionStore.selectPrediction(pred.id);\n\n          pred.deserializeCompletion(predictions[i].result);\n          pred.reinitHistory();\n        }\n      }\n\n      /**\n       * Completions in initialize\n       */\n      if (completions && completions.length) {\n        for (let i = 0; i < completions.length; i++) {\n          const itemOfCompletion = completions[i];\n\n          /**\n           * If user skip task, we skip completion state\n           */\n          if (itemOfCompletion.was_cancelled === true) continue;\n\n          /**\n           * Add to array new completion\n           */\n          generatedCompletions.push(itemOfCompletion);\n        }\n      }\n\n      if (!completions || completions.length === 0) {\n        const c = self.completionStore.addInitialCompletion();\n        self.completionStore.selectCompletion(c.id);\n\n        if (generatedCompletions.length > 0) {\n          self.completionStore.destroyCompletion(self.completionStore.selected);\n\n          for (let iC = 0; iC < generatedCompletions.length; iC++) {\n            const comp = self.completionStore.addSavedCompletion(generatedCompletions[iC]);\n            comp.traverseTree(node => node.updateValue && node.updateValue(self));\n            self.completionStore.selectCompletion(comp.id);\n\n            comp.deserializeCompletion(generatedCompletions[iC].result);\n            comp.reinitHistory();\n          }\n        }\n      } else {\n        for (let iC = 0; iC < generatedCompletions.length; iC++) {\n          const comp = self.completionStore.addSavedCompletion(generatedCompletions[iC]);\n          comp.traverseTree(node => node.updateValue && node.updateValue(self));\n          self.completionStore.selectCompletion(comp.id);\n\n          comp.deserializeCompletion(generatedCompletions[iC].result);\n          comp.reinitHistory();\n        }\n      }\n    }\n\n    return {\n      afterCreate,\n      loadTask,\n      addTask,\n      hasInterface,\n      skipTask,\n      sendTask,\n      updateTask,\n      markLoading,\n      resetState,\n      toggleSettings,\n      toggleDescription,\n      initializeStore,\n    };\n  });\n","/**\n * Callback on submit completion\n */\nfunction submitCompletion() {}\n\n/**\n * Callback on update completion\n */\nfunction updateCompletion() {}\n\n/**\n * Callback on delete completion\n */\nfunction deleteCompletion() {}\n\n/**\n * Callback on skip task\n */\nfunction skipTask() {}\n\n/**\n * Callback on task load\n */\nfunction onTaskLoad() {}\n\n/**\n * Callback on Label Studio load\n */\nfunction onLabelStudioLoad() {}\n\nexport default { submitCompletion, updateCompletion, deleteCompletion, skipTask, onTaskLoad, onLabelStudioLoad };\n","import External from \"../core/External\";\nimport Requests from \"../core/Requests\";\n\nfunction getData(task) {\n  let mstTask = task;\n\n  if (mstTask && mstTask.data) {\n    mstTask = {\n      ...mstTask,\n      data: JSON.stringify(mstTask.data),\n    };\n  }\n\n  return mstTask;\n}\n\nfunction getState(task) {\n  const completions = task && task.completions ? task.completions : null;\n  const predictions = task && task.predictions ? task.predictions : null;\n\n  return {\n    completions: completions,\n    predictions: predictions,\n  };\n}\n\n/**\n * LS will render in this part\n */\nfunction rootElement(element) {\n  const el = document.createElement(\"div\");\n\n  let root = document.getElementById(element);\n\n  root.innerHTML = \"\";\n  root.appendChild(el);\n\n  return el;\n}\n\n/**\n * Function to configure application with callbacks\n * @param {object} params\n */\nfunction configureApplication(params) {\n  const options = {\n    fetch: Requests.fetcher,\n    patch: Requests.patch,\n    post: Requests.poster,\n    remove: Requests.remover,\n    submitCompletion: params.submitCompletion ? params.submitCompletion : External.submitCompletion,\n    updateCompletion: params.updateCompletion ? params.updateCompletion : External.updateCompletion,\n    deleteCompletion: params.deleteCompletion ? params.deleteCompletion : External.deleteCompletion,\n    skipTask: params.skipTask ? params.skipTask : External.skipTask,\n    onTaskLoad: params.onTaskLoad ? params.onTaskLoad : External.onTaskLoad,\n    onLabelStudioLoad: params.onLabelStudioLoad ? params.onLabelStudioLoad : External.onLabelStudioLoad,\n    alert: m => console.log(m), // Noop for demo: window.alert(m)\n  };\n\n  return options;\n}\n\nexport default { getData, getState, rootElement, configureApplication };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const Sentiment = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const AudioClassification = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const AudioRegions = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const DialogueAnalysis = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const ImageBbox = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const ImagePolygons = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const ImageKeyPoint = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const ImageMultilabel = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const NamedEntity = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const References = { config, tasks, completion };\n","import { Sentiment } from \"../examples/sentiment_analysis\";\nimport { AudioClassification } from \"../examples/audio_classification\";\nimport { AudioRegions } from \"../examples/audio_regions\";\nimport { DialogueAnalysis } from \"../examples/dialogue_analysis\";\nimport { ImageBbox } from \"../examples/image_bbox\";\nimport { ImagePolygons } from \"../examples/image_polygons\";\nimport { ImageKeyPoint } from \"../examples/image_keypoints\";\nimport { ImageMultilabel } from \"../examples/image_multilabel\";\nimport { NamedEntity } from \"../examples/named_entity\";\nimport { References } from \"../examples/references\";\nimport { TranscribeAudio } from \"../examples/transcribe_audio\";\n\nimport External from \"../core/External\";\nimport Requests from \"../core/Requests\";\n\n/**\n * Custom Data\n */\nconst data = Sentiment;\n\n/**\n * Get current config\n * @param {string} pathToConfig\n */\nasync function getConfig(pathToConfig) {\n  const response = await fetch(pathToConfig);\n  const config = await response.text();\n  return config;\n}\n\n/**\n * Get custom config\n */\nasync function getExample() {\n  let datatype = data;\n\n  let config = await getConfig(datatype.config);\n  let task = {\n    data: JSON.stringify(datatype.tasks[0].data),\n  };\n  let completion = datatype.completion.completions[0];\n  let predictions = datatype.tasks[0].predictions;\n\n  return { config, task, completion, predictions };\n}\n\n/**\n * Function to return App element\n */\nfunction rootElement(element) {\n  const el = document.createElement(\"div\");\n\n  let root = document.getElementById(element);\n\n  root.innerHTML = \"\";\n  root.appendChild(el);\n\n  root.style.margin = \"0 auto\";\n\n  return el;\n}\n\n/**\n * Function to configure application with callbacks\n * @param {object} params\n */\nfunction configureApplication(params) {\n  const options = {\n    fetch: Requests.fetcher,\n    fetchAuth: Requests.fetcherAuth,\n    patch: Requests.patch,\n    post: Requests.poster,\n    remove: Requests.remover,\n    submitCompletion: params.submitCompletion ? params.submitCompletion : External.submitCompletion,\n    updateCompletion: params.updateCompletion ? params.updateCompletion : External.updateCompletion,\n    deleteCompletion: params.deleteCompletion ? params.deleteCompletion : External.deleteCompletion,\n    skipTask: params.skipTask ? params.skipTask : External.skipTask,\n    onTaskLoad: params.onTaskLoad ? params.onTaskLoad : External.onTaskLoad,\n    onLabelStudioLoad: params.onLabelStudioLoad ? params.onLabelStudioLoad : External.onLabelStudioLoad,\n    alert: m => console.log(m), // Noop for demo: window.alert(m)\n  };\n\n  return options;\n}\n\nexport default { rootElement, getExample, configureApplication };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const TranscribeAudio = { config, tasks, completion };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\n\nimport \"./assets/styles/global.scss\";\n\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport AppStore from \"./stores/AppStore\";\n\nimport ProductionEnviroment from \"./env/production\";\nimport DevelopmentEnvironment from \"./env/development\";\n\nlet enviroment = DevelopmentEnvironment;\n\nif (process.env.NODE_ENV === \"production\") {\n  enviroment = ProductionEnviroment;\n\n  window.LabelStudio = (element, options) => {\n    let params = options;\n\n    if (params && params.task) {\n      params.task = enviroment.getData(params.task);\n    }\n\n    /**\n     * Configure Application\n     */\n    const app = AppStore.create(params, enviroment.configureApplication(params));\n\n    /**\n     * Initialize store\n     */\n    app.initializeStore(enviroment.getState(params.task));\n\n    ReactDOM.render(\n      <Provider store={app}>\n        <App />\n      </Provider>,\n      enviroment.rootElement(element),\n    );\n\n    window.Htx = app;\n    return app;\n  };\n} else {\n  enviroment = DevelopmentEnvironment;\n\n  window.LabelStudio = (element, options) => {\n    let params = options;\n\n    // this is a way to initialize one of the examples from the src/examples section\n    if (!options.config) {\n      enviroment.getExample().then(result => {\n        params = {\n          ...params,\n          ...result,\n        };\n\n        let app = AppStore.create(params, enviroment.configureApplication(params));\n\n        app.initializeStore({ completions: [params.completion], predictions: params.predictions });\n\n        ReactDOM.render(\n          <Provider store={app}>\n            <App />\n          </Provider>,\n          enviroment.rootElement(element),\n        );\n      });\n    } else {\n      // this is static initialization from the index.html file\n      params = {\n        ...params,\n        task: {\n          ...params.task,\n          data: JSON.stringify(params.task.data),\n        },\n      };\n\n      let app = AppStore.create(params, enviroment.configureApplication(params));\n\n      app.initializeStore({ completions: params.task.completions, predictions: params.task.predictions });\n\n      ReactDOM.render(\n        <Provider store={app}>\n          <App />\n        </Provider>,\n        enviroment.rootElement(element),\n      );\n    }\n  };\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Entity_block__1QbUr\",\"button\":\"Entity_button__37MSe\",\"labels\":\"Entity_labels__IcpQJ\",\"tag\":\"Entity_tag__1smAB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"skip\":\"Controls_skip__D420T\",\"task\":\"Controls_task__11tAS\",\"container\":\"Controls_container__3pJ1G\",\"block\":\"Controls_block__Odbge\",\"wrapper\":\"Controls_wrapper__3W5zw\",\"rewrite\":\"Controls_rewrite__2sjm1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Dialog_block__2BpMV\",\"block_selected\":\"Dialog_block_selected__3J4Kr\",\"name\":\"Dialog_name__1DVah\",\"tag\":\"Dialog_tag__35rOG\",\"date\":\"Dialog_date__n9AfT\"};"],"sourceRoot":""}