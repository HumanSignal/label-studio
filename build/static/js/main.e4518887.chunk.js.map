{"version":3,"sources":["components/Node/Node.module.scss","components/Panel/Panel.module.scss","components/Relations/Relations.module.scss","components/App/App.module.scss","components/Hint/Hint.module.scss","components/Waveform/Waveform.module.scss","components/Segment/Segment.module.scss","components/Entities/Entities.module.scss","components/TextHighlight/TextHighlight.module.scss","interfaces/object/TextRegion/TextRegion.module.scss","examples/sentiment_analysis/config.xml","examples/audio_classification/config.xml","examples/audio_regions/config.xml","examples/chatbot_analysis/config.xml","examples/image_bbox/config.xml","examples/image_polygons/config.xml","examples/image_keypoints/config.xml","examples/image_multilabel/config.xml","examples/named_entity/config.xml","examples/references/config.xml","examples/transcribe_audio/config.xml","interfaces/object/AudioPlus/AudioPlus.module.scss","core/Registry.js","core/Requests.js","utils/unique.js","core/Helpers.js","core/Tree.js","utils/utilities.js","utils/colors.js","utils/date.js","utils/index.js","utils/debounce.js","utils/styles.js","components/Completions/Completions.js","components/Predictions/Predictions.js","components/Hint/Hint.js","components/Controls/Controls.js","components/Segment/Segment.js","components/Panel/Panel.js","components/Settings/Settings.js","components/Debug.js","components/Node/Node.js","components/Relations/Relations.js","components/Entities/Entities.js","components/Entity/Entity.js","components/SideColumn/SideColumn.js","core/Types.js","interfaces/visual/View.js","core/Template.js","interfaces/mixins/ProcessAttrs.js","interfaces/visual/Table.js","interfaces/visual/Header.js","interfaces/visual/HyperText.js","components/Dialog/Dialog.js","interfaces/visual/Dialog.js","interfaces/object/AudioHOC.js","interfaces/object/Audio/Controls.js","components/Waveform/Waveform.js","interfaces/object/Audio.js","interfaces/mixins/Regions.js","interfaces/mixins/Normalization.js","interfaces/control/Label.js","interfaces/mixins/SelectedModel.js","components/Infomodal/Infomodal.js","interfaces/mixins/LabelMixin.js","interfaces/control/Labels.js","interfaces/control/Rating.js","interfaces/object/AudioRegion.js","interfaces/object/AudioPlus.js","interfaces/control/Rectangle.js","interfaces/control/RectangleLabels.js","interfaces/object/RectRegion.js","interfaces/object/PolygonPoint.js","interfaces/control/Polygon.js","interfaces/control/PolygonLabels.js","interfaces/object/PolygonRegion.js","interfaces/control/KeyPoint.js","interfaces/control/KeyPointLabels.js","interfaces/object/KeyPointRegion.js","interfaces/object/Image.js","components/TextHighlight/Range.js","components/TextNode/TextNode.js","components/TextHighlight/Node.js","components/TextHighlight/UrlNode.js","components/TextHighlight/EmojiNode.js","components/TextHighlight/TextHighlight.js","interfaces/object/TextRegion.js","interfaces/object/Text.js","interfaces/control/Choice.js","interfaces/control/Choices.js","interfaces/object/TextAreaRegion.js","interfaces/control/TextArea.js","interfaces/control/List.js","interfaces/control/Ranker.js","components/App/App.js","serviceWorker.js","stores/TaskStore.js","stores/UserStore.js","core/Hotkey.js","stores/SettingsStore.js","core/TimeTraveller.js","stores/RelationStore.js","stores/NormalizationStore.js","stores/RegionStore.js","stores/CompletionStore.js","stores/PredictionStore.js","constants/Api.js","stores/AppStore.js","env/production.js","examples/sentiment_analysis/index.js","examples/audio_classification/index.js","examples/audio_regions/index.js","examples/chatbot_analysis/index.js","examples/image_bbox/index.js","examples/image_polygons/index.js","examples/image_keypoints/index.js","examples/image_multilabel/index.js","examples/named_entity/index.js","examples/references/index.js","env/development.js","examples/transcribe_audio/index.js","index.js","components/Completions/Completions.module.scss","components/Entity/Entity.module.scss","components/Controls/Controls.module.scss","components/Dialog/Dialog.module.scss"],"names":["module","exports","node","container","block","block__controls","section","section__blocks","delete","editor","menu","content","common","main","progress","wave","item","state","__webpack_require__","p","play","Registry","_Registry","Object","classCallCheck","this","tags","models","views","views_models","tag","model","view","push","name","values","modelName","Error","keys","join","wrapperRequest","url","method","headers","body","window","fetch","credentials","then","response","res","status","json","Requests","fetcher","Accept","poster","Content-Type","remover","patch","guidGenerator","lgth","uniqueID","nanoid","cloneNode","snapshot","getSnapshot","getType","create","objectSpread","id","restoreNewsnapshot","fromModel","renderItem","el","View","getViewByModel","react_default","a","createElement","key","Tree","cloneReactTree","items","attrs","clone","children","React","Children","forEach","child","props","moreProps","cloneElement","renderChildren","length","map","treeToModel","html","buildData","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","attr","value","err","return","attrsToProps","nodeName","JSON","parse","htmlSelfClosingTags","split","newData","i","edsplit","editSelfClosingTags","replace","document","parse5","parseFragment","root","childNodes","addNode","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","chld","findInterface","tree","fn","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","findParentOfType","obj","classes","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","c","getParentOfType","filterChildrenOfType","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","cssConverter","style","firstIndexOfColon","result","attributes","indexOf","substring","x","toUpperCase","isString","String","isStringEmpty","isStringJSON","e","getUrl","text","stringToTest","slice","match","exec","toTimeString","ms","Date","toUTCString","colorNames","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hexToRGBA","hex","opacity","r","g","b","parseInt","concat","colorToRGBA","alpha","toLowerCase","convertToRGBA","charAt","stringToColor","str","hash","charCodeAt","color","toString","substr","rgbaChangeAlpha","rgba","msToHMS","seconds","hours","Math","floor","prettyDate","time","test","date","diff","getTime","day_diff","isNaN","ceil","currentISODate","tzOffest","getTimezoneOffset","now","toISOString","utils","Checkers","Colors","UDate","debounce","func","wait","immediate","timeout","context","args","arguments","callNow","clearTimeout","setTimeout","apply","styleToProp","styles","filter","trim","reduce","styleObj","defineProperty","Completion","observer","_ref","completionID","store","badge","es_badge","userGenerate","sentUserGenerate","pk","List","Item","className","selected","completion","completion_selected","onClick","ev","completionStore","selectCompletion","Content","Header","as","marginBottom","Description","createdAgo","Utils","createdDate","createdBy","buttons","tooltip","placement","title","es_button","type","preventDefault","deleteCompletion","honeypot","removeHoneypot","ghost","setHoneypot","Completions","addUserCompletion","icon","savedCompletions","card","bodyStyle","padding","paddingTop","divided","relaxed","Component","Prediction","selectPrediction","Predictions","predictions","predict","Hint","localClass","data-copy","copy","inject","taskInformation","skipButton","updateButton","submitButton","skip","update","submit","_store$completionStor","_store$settings","settings","enableHotkeys","enableTooltips","task","Hint_Hint","predictSelect","explore","hasInterface","skipTask","sendTask","updateTask","wrapper","Segment","history","canUndo","undo","canRedo","redo","reset","setPrelabeling","display","resetPrelabeling","showingDescription","closeDescription","openDescription","toggleSettings","modal","visible","showingSettings","footer","onCancel","tabs","defaultActiveKey","TabPane","tab","es_checkbox","defaultChecked","onChange","toggleHotkeys","toggleTooltips","DebugComponent","_this2","self","Button","basic","setState","stringify","toJSON","serializeCompletion","deserializeCompletion","addInitialCompletion","project","resetState","addTask","addGeneratedCompletion","markLoading","traverseTree","updateValue","Form","TextArea","target","Node","click","getRoot","regionStore","unselectAll","selectRegion","href","start","toFixed","end","_value","w","width","scaleX","y","height","scaleY","NodeMinimal","_ref2","react","Relation","rl","isValidReference","node1","node2","onMouseOver","toggleHighlight","onMouseOut","Node_NodeMinimal","deleteRelation","relations","relationStore","Relations_Relation","Entities","regions","paddingLeft","deleteAllRegions","region","toggleHightlight","RenderStates","_render","s","element","pid","labels","getSelectedNames","bgColor","findLabel","background","getSelectedString","states","highlightedNode","normalization","cursor","deleteNormalization","Entity_RenderStates","button","startRelationMode","setNormalizationMode","unselectRegion","deleteRegion","normalizationMode","marginTop","onSubmit","setNormalization","normInput","Input","setNormInput","placeholder","Entity","Relations","oneOf","arr","types","union","dispatcher","sn","find","val","getModelByTag","Types","unionArray","maybeNull","array","allModelsTypes","modelsArr","results","isType","nt","getParentOfTypeString","parent","getParent","Array","isArray","_loop","v","_ret","TagAttrs","optional","string","backgroundcolor","margin","Model","identifier","ViewModel","compose","HtxView","marginRight","addTag","variableNotation","variable","_index","is","runTemplate","options","re","reExp","code","add","line","js","index","Function","console","error","message","ProcessAttrsMixin","actions","dataObj","size","TableModel","HtxTable","Table","celled","collapsing","Body","k","Row","Cell","Subheader","number","underline","boolean","HeaderModel","HtxHeader","typography","Title","level","fromStateJSON","choices","names","get","from_name","HyperTextActions","HyperTextModel","HtxHyperTextView","dangerouslySetInnerHTML","__html","DialogView","hint","selectedStyle","bg","block_selected","maxWidth","Replica","DialogActions","DialogModel","HtxDialogView","empty","ind","Dialog_DialogView","flexFlow","maxHeight","overflowY","paddingRight","divider","dashed","zoom","volume","speed","playing","wsCreated","ws","_ws","handlePlay","AudioHOCModel","AudioControls","justifyContent","playPause","formatTimeCallback","pxPerSec","Number","minutes","secondsStr","round","timeInterval","primaryLabelInterval","secondaryLabelInterval","Waveform","_this","possibleConstructorReturn","getPrototypeOf","call","onChangeZoom","wavesurfer","onChangeVolume","setVolume","onChangeSpeed","setPlaybackRate","src","pos","colors","waveColor","progressColor","$el","ReactDOM","findDOMNode","$waveform","querySelector","wavesurferConfigure","backend","plugins","RegionsPlugin","dragSelection","slop","TimelinePlugin","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","CursorPlugin","showTime","WaveSurfer","load","on","reg","_region","onMouseLeave","addRegion","selectedregionbg","onUpdateEnd","slider","oninput","onCreate","onLoad","_this3","row","es_col","span","input_number","min","max","es_slider","step","range","named","AudioModel","HtxAudioView","Waveform_Waveform","Audio_Controls","HtxAudio","RegionsMixin","highlighted","setHighlightedNode","relationMode","stopRelationMode","onClickRegion","addRelation","deleteNodeRelation","setHighlight","NormalizationMixin","alias","hotkey","showalias","aliasstyle","selectedcolor","toggleSelected","sel","shouldBeUnselected","markSelected","onHotKey","LabelModel","HtxLabelView","backgroundColor","SelectedModelMixin","selectedLabels","isSelected","joinstr","_type","custom","Modal","warning","success","info","Infomodal","LabelMixin","getSelectedColor","beforeSend","objectType","findedObj","InfoModal","toname","choice","enumeration","selectionstyle","ModelAttrs","showinline","toStateJSON","to_name","LabelsModel","HtxLabels","alignItems","maxrating","rating","handleRate","increaseValue","RatingModel","HtxRating","Rating","defaultRating","maxRating","onRate","clearable","fontSize","AudioPlusModel","buildTree","source","_ws_region","border","beforeDestroy","remove","AudioRegionModel","regs","hasStates","toNames","activeStates","findRegion","m","setRangeValue","rangeValue","playBackRate","ws_region","clonedStates","find_r","regionbg","HtxAudioPlus","fillcolor","strokewidth","strokecolor","canrotate","RectangleModel","Composition","RectangleLabelsModel","HtxRectangleLabels","_start_x","_start_y","rotation","fill","wp","hp","sw","sh","coordstype","supportsTransform","ImageModel","afterCreate","setSelected","coordsInside","rx","ry","rw","rh","setPosition","setScale","addState","setFill","updateImageSize","fromEl","stageWidth","stageHeight","RectRegionModel","HtxRectangle","ReactKonva","stroke","strokeWidth","strokeScaleEnabled","shadowBlur","onTransformEnd","t","getAttr","onDragEnd","dragBoundFunc","stage","_stageRef","draggable","PolygonPoint","init_x","init_y","movePoint","_movePoint","closeStartPoint","mouseOverStartPoint","closePoly","handleMouseOverStartPoint","closed","points","setX","setY","scale","small","medium","large","setMouseOverStartPoint","handleMouseOutStartPoint","PolygonPointView","startPointAttr","hitStrokeWidth","dragOpts","onDragStart","onDragMove","assign","radius","dragOnTop","pointsize","pointstyle","PolygonModel","polygonlabels","l","label","PolygonLabelsModel","HtxPolygonLabels","fromName","isCW","linePoints","flatten","flat","toFlatten","findPolyOutline","left","acc","loc","right","top","bottom","inside","vs","j","xi","yi","xj","yj","readOnlyError","handleMouseMove","flattenedPoints","_e$evt","evt","point","getAnchorPoint","offsetX","offsetY","zoomScale","_ref8","group","layer","getHoverAnchor","_ref7","hoverAnchor","Konva","Circle","draw","createHoverAnchor","to","duration","moveHoverAnchor","currentTarget","getLayer","handleMouseLeave","removeHoverAnchor","handleLineClick","_ref3","insertIdx","cancelBubble","_e$evt2","insertPoint","addPoint","_addPoint","splice","canClose","p1","p2","_self$parent","naturalWidth","naturalHeight","perc_w","perc_h","perc_points","PolygonRegionModel","_ref4","_flattenedPoints","slicedToArray","x1","y1","x2","y2","getFlattenedPoints","_ref6","findOne","_ref9","destroy","HtxPolygon","_ref10","setDragMode","setActivePolygon","lineJoin","idx","idx1","idx2","_ref11","onMouseMove","renderLine","renderLines","_ref12","renderCircle","renderCircles","KeyPointModel","keypointlabels","KeyPointLabelsModel","HtxKeyPointLabels","from","KeyPointRegionModel","HtxKeyPoint","wwidth","wheight","onChangedPosition","resize","maxwidth","grid","gridSize","gridColor","negativezoom","zoomby","showmousepos","sizeUpdated","integer","zoomPosX","zoomPosY","cursorPositionX","cursorPositionY","mode","posStartX","posStartY","posNowX","posNowY","selectedShape","safeReference","activePolygon","activeShape","shapes","controlButton","controlButtonType","poly","setPointerPosition","setZoom","setMode","updateIE","_ev$target","_setStageRef","ref","_deleteSelectedShape","shape","detachActiveShape","detach","_addShape","startDraw","rect","_addRect","lookupStates","_","updateDraw","_reverseCoords","r1","r2","d","r1x","r1y","r2x","r2y","abs","reverseCoords","fun","onImageClick","dispmap","_addPolyEv","_addKeyPointEv","_addKeyPoint","kp","parseFloat","_addRectEv","wx","wy","noadd","localStates","dragMode","_addPoly","onResizeSize","shapeModel","rectanglelabels","TransformerComponent","checkNode","transformer","getStage","batchDraw","selectedNode","attachTo","resizeEnabled","rotateEnabled","anchorSize","HtxImageView","handleDblClick","handleOnClick","handleMouseUp","handleMouseOver","handleStageMouseDown","handleZoom","scaleBy","oldScale","mousePointTo","getPointerPosition","newScale","deltaY","position","newPos","nodeSize","toConsumableArray","col","n","_this$props","tension","dash","addEventListener","updateDimensions","bind","_this$props2","divStyle","overflow","imgStyle","transformOrigin","translate","onDblClick","onMouseDown","onMouseUp","onWheel","renderGrid","Image_TransformerComponent","HtxImage","Range","TextNode","data-position","overlap","keyNode","HtxTextNode","highlightStyle","charIndex","getRangeKey","getKey","getStyle","overlapItem","includes","reduceRight","TextNode_TextNode","UrlNode","wordWrap","EmojiNode","TextHighlight","dismissMouseUp","ranges","onMouseOverHighlightedWord","nl","char","arrOverlap","TextHighlight_EmojiNode","TextHighlight_UrlNode","enabled","getSelection","selectionContents","getRangeAt","cloneRange","cloneContents","virtualDiv","appendChild","elementsWithSup","getElementsByTagName","innerText","selection","createRange","startContainer","parentNode","dataset","endContainer","startContainerPosition","endContainerPosition","rangeObj","onTextHighlighted","event","mouseEvent","letterGroup","textCharIndex","rangeRenderer","isEmoji","getUrlNode","getEmojiNode","getLetterNode","lastRange","newText","getRange","emojiRegex","getNode","rangeCharIndex","getRanges","onMouseEnter","onDoubleClick","TextModel","highlightStates","TextRegionModel","RegionState","localState","selectedString","outline","data-hint","HtxTextRegion","labelColor","markStyle","borderRadius","regionStates","TextRegion_RegionState","hover","selelectwithoutlabel","hidden","adjustselection","selectionenabled","_addRegion","params","HtxTextView","components_TextHighlight_TextHighlight","adjustSelection","renderRegion","HtxText","isCheckbox","ChoicesModel","ChoiceModel","HtxChoice","cStyle","Checkbox","checked","Radio","HtxChoices","Group","inline","flexWrap","grouped","TextAreaModel","TextAreaRegionModel","HtxTextAreaRegion","Message","allowSubmit","maxsubmissions","submissionsNum","showSubmit","num","setValue","addText","deleteText","HtxTextArea","ListItemModel","setBG","setIdx","axis","lockaxis","elementvalue","elementtag","sortedhighlightcolor","setUpdate","vals","moveItems","oldIndex","newIndex","arrayMove","ranked","sort","weights","item_weight","ListModel","DragHandle","sortableHandle","isMobileDevice","orientation","navigator","userAgent","SortableText","SortableElement","classNames","image","alt","audio","userSelect","SortableList","SortableContainer","HtxListView","onSortEnd","HtxList","RankerItemModel","sortable","RankerModel","Ranker_DragHandle","Ranker_SortableText","HtxRankerView","Ranker_SortableList","HtxRanker","App","_Component","inherits","createClass","es_result","spin","currentCompletion","currentPrediction","isLoading","renderLoader","noTask","renderNothingToLabel","labeledSuccess","renderSuccess","Settings","index_module","Panel","Segment_Segment","description","Controls","components_Completions_Completions","components_Predictions_Predictions","SideColumn","Debug","renderNoCompletion","Boolean","location","hostname","TaskStore","identifierNumber","app","Utilities","UserStore","firstName","lastName","_hotkeys_map","Hotkey","addKey","keymaster","unbindAll","_i","_Object$keys","unbind","makeComb","combs","comb","hasOwnProperty","setScope","scope","SettingsModel","enablePanelHotkeys","togglePanelHotkeys","TimeTraveller","frozen","undoIdx","targetPath","createdIdx","isFrozen","frozenIdx","targetStore","snapshotDisposer","skipNextUndoState","freeze","addUndoState","ss","resolvePath","getEnv","onSnapshot","applySnapshot","set","reference","HtxObjectModel","findRelations","nodesRelated","from_id","to_id","deserializeRelation","Normalization","normalizations","findNormalization","addNormalization","unshift","deleteNodeNormalization","unhighlightAll","RelationStore","normalizationStore","NormalizationStore","RegionStore","reinitHistory","_updateServerState","sendUserGenerate","updatePersonalKey","_relationObj","cb","visitNode","objCompletion","toModel","completions","_deleteCompletion","flow","regenerator_default","mark","wrap","_context","prev","sent","t0","stop","destroyCompletion","addCompletion","createdCompletion","completionModel","config","expert","addSavedCompletion","created_ago","created_username","addPrediction","prediction","predictionModel","model_version","addPredictionItem","createdPrediction","unselectPrediction","deserializePrediction","API_URL","savedPredictions","unselectCompletion","log","addInitialPrediction","destroyPrediction","MAIN","TASKS","COMPLETIONS","CANCEL","PROJECTS","NEXT","EXPERT_INSRUCTIONS","Task","taskID","interfaces","CompletionStore","projectID","User","debug","alert","post","setDescription","loadTask","loadTaskAPI","_callee","_context2","Response","abrupt","was_cancelled","comp","pred","_context3","sendToServer","requestType","_callee2","responseCompletion","_context4","taskObject","loading","initializeStore","generatedCompletions","itemOfCompletion","iC","production","getData","taskData","editorAppConfig","expertData","debugEditor","editorInterfaces","preRender","getState","rootElement","getElementById","innerHTML","Sentiment","tasks","dataType","developmentEnv","viewCompletion","search","resp","templateDynamicData","resultCompletions","resultPredictions","enviroment","ProductionEnviroment","AppStore","Htx","render","components_App_App","serviceWorker","ready","registration","unregister","rewrite"],"mappings":"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","file":"static/js/main.e4518887.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"node\":\"Node_node__31C16\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Panel_container__1UbGz\",\"block\":\"Panel_block__35uxJ\",\"block__controls\":\"Panel_block__controls__386dF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Relations_block__3ojdZ\",\"section\":\"Relations_section__3MAqx\",\"section__blocks\":\"Relations_section__blocks__26CLV\",\"delete\":\"Relations_delete__3qe_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"App_editor__ZA0wp\",\"menu\":\"App_menu__3cWjU\",\"content\":\"App_content__F7bhJ\",\"common\":\"App_common__2vqlZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Hint_main__2bVzl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"Waveform_progress__3BwkI\",\"wave\":\"Waveform_wave__3tQFG\",\"menu\":\"Waveform_menu__ToCwx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Segment_block__1srue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Entities_item__215D0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"TextHighlight_block__2-3wy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"state\":\"TextRegion_state__1J2X6\"};","module.exports = __webpack_public_path__ + \"static/media/config.5bb63d8f.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.c5233796.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.3c2fe907.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.0e2a1e7f.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.2a6054fe.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.be40f192.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.f4626f44.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.db6ac10b.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.bb22cd0c.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.836adaf9.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.1890026d.xml\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"play\":\"AudioPlus_play__3_Ds7\"};","/**\n * Class for register View\n */\nclass _Registry {\n  constructor() {\n    this.tags = [];\n    this.models = {};\n    this.views = {};\n    this.views_models = {};\n  }\n\n  addTag(tag, model, view) {\n    this.tags.push(tag);\n    this.models[tag] = model;\n    this.views[tag] = view;\n    this.views_models[model.name] = view;\n  }\n\n  modelsArr() {\n    return Object.values(this.models);\n  }\n\n  getViewByModel(modelName) {\n    const view = this.views_models[modelName];\n\n    if (!view) throw new Error(\"No view for model: \" + modelName);\n\n    return view;\n  }\n\n  getViewByTag(tag) {\n    return this.views[tag];\n  }\n\n  /**\n   * Get model\n   * @param {*} tag\n   */\n  getModelByTag(tag) {\n    const model = this.models[tag];\n\n    if (!model) {\n      const models = Object.keys(this.models);\n      throw new Error(\"No model registered for tag: \" + tag + \"\\nAvailable models:\\n\\t\" + models.join(\"\\n\\t\"));\n    }\n\n    return model;\n  }\n}\n\nconst Registry = new _Registry();\n\nexport default Registry;\n","const handleResponse = res => {\n  if (res.status !== 200 || res.status !== 201) {\n    return res;\n  } else {\n    return res.json();\n  }\n};\n\nconst wrapperRequest = (url, method, headers, body) => {\n  return window\n    .fetch(url, {\n      method: method,\n      headers: headers,\n      credentials: \"include\",\n      body: body,\n    })\n    .then(response => handleResponse(response));\n};\n\nconst fetcher = url => {\n  return wrapperRequest(url, \"GET\", { Accept: \"application/json\" });\n};\n\nconst poster = (url, body) => {\n  return wrapperRequest(url, \"POST\", { Accept: \"application/json\", \"Content-Type\": \"application/json\" }, body);\n};\n\nconst patch = (url, body) => {\n  return wrapperRequest(\n    url,\n    \"PATCH\",\n    {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body,\n  );\n};\n\nconst remover = (url, body) => {\n  return wrapperRequest(\n    url,\n    \"DELETE\",\n    {\n      \"Content-Type\": \"application/json\",\n    },\n    body,\n  );\n};\n\nexport default { fetcher, poster, remover, patch };\n","import nanoid from \"nanoid\";\n\n/**\n * Unique hash generator\n * @param {number} lgth\n */\nexport function guidGenerator(lgth) {\n  let uniqueID = nanoid(10);\n\n  if (lgth) {\n    uniqueID = nanoid(lgth);\n  }\n\n  return uniqueID;\n}\n","import { getType, getSnapshot } from \"mobx-state-tree\";\nimport { guidGenerator } from \"../utils/unique\";\n\n/**\n * TODO: refactor\n */\nexport { guidGenerator };\n\n/**\n * Helper function to detect HTX Component\n * @param {any} component\n * @param {string} name\n * @returns {boolean}\n */\nexport function isHtx(component, name) {\n  return typeof component.type === \"function\" && component.type.name === \"Htx\" + name;\n}\n\n/**\n * Clone node with new ID\n * @param {*} node\n */\nexport function cloneNode(node) {\n  const snapshot = getSnapshot(node);\n  const snapshotRandomId = getType(node).create({\n    ...snapshot,\n    id: guidGenerator(),\n  });\n  return snapshotRandomId;\n}\n\n/**\n *\n * @param {*} fromModel\n */\nexport function restoreNewsnapshot(fromModel) {\n  const snapshot = getSnapshot(fromModel);\n\n  /**\n   * Need to modify ID\n   */\n  const modifySnapshot = getType(fromModel).create({\n    ...snapshot,\n    id: guidGenerator(),\n  });\n\n  /**\n   * Update state\n   */\n  return modifySnapshot;\n}\n","import React from \"react\";\nimport { getType, getParentOfType } from \"mobx-state-tree\";\nimport parse5 from \"parse5\";\n\nimport Registry from \"./Registry\";\nimport { guidGenerator } from \"./Helpers\";\n\n/**\n * Clone React Tree\n * @param {*} items\n * @param {*} attrs\n */\nfunction cloneReactTree(items, attrs) {\n  let clone = null;\n  clone = function(children) {\n    const res = [];\n\n    React.Children.forEach(children, function(child) {\n      let el;\n\n      if (child.props) {\n        let moreProps = {};\n\n        if (typeof attrs === \"function\") {\n          moreProps = attrs(child);\n        } else if (typeof attrs === \"object\") {\n          moreProps = attrs;\n        }\n\n        el = React.cloneElement(child, moreProps, clone(child.props.children));\n      } else {\n        el = child;\n      }\n\n      res.push(el);\n    });\n\n    return res;\n  };\n\n  return clone(items);\n}\n\n/**\n * Function to convert CSS string to object\n * @param {string} style\n * @returns {object}\n */\nfunction cssConverter(style) {\n  let result = {},\n    attributes = style.split(\";\"),\n    firstIndexOfColon,\n    i,\n    key,\n    value;\n\n  for (i = 0; i < attributes.length; i++) {\n    firstIndexOfColon = attributes[i].indexOf(\":\");\n    key = attributes[i].substring(0, firstIndexOfColon);\n    value = attributes[i].substring(firstIndexOfColon + 1);\n\n    key = key.replace(/ /g, \"\");\n    if (key.length < 1) {\n      continue;\n    }\n\n    if (value[0] === \" \") {\n      value = value.substring(1);\n    }\n\n    if (value[value.length - 1] === \" \") {\n      value = value.substring(0, value.length - 1);\n    }\n\n    var ukey = key.replace(/(-.)/g, x => x[1].toUpperCase());\n\n    result[ukey] = value;\n  }\n\n  return result;\n}\n\n/**\n *\n * @param {*} attrs\n */\nfunction attrsToProps(attrs) {\n  const props = {};\n\n  if (!attrs) return props;\n\n  for (let attr of attrs) {\n    props[attr.name] = attr.value;\n  }\n\n  // if (props[\"style\"]) {\n  //     props[\"style\"] = cssConverter(props[\"style\"]);\n  // }\n\n  return props;\n}\n\n/**\n *\n * @param {*} html\n */\nfunction treeToModel(html) {\n  /**\n   * Remove all line breaks from a string\n   * @param {string}\n   * @returns {string}\n   */\n  function removeAllBreaks(data) {\n    return data.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n  }\n\n  /**\n   * Edit all self closing tags from XML View\n   * TODO: Fix bug: if the value of <Choice /> or another tag contains \"/>\" function return error\n   * @param {string} data\n   * @returns {string}\n   */\n  function editSelfClosingTags(data) {\n    let split = data.split(\"/>\");\n    let newData = \"\";\n\n    for (let i = 0; i < split.length - 1; i++) {\n      let edsplit = split[i].split(\"<\");\n      newData += split[i] + \"></\" + edsplit[edsplit.length - 1].split(\" \")[0] + \">\";\n    }\n\n    return newData + split[split.length - 1];\n  }\n\n  /**\n   * Generate new node\n   * @param {object} node\n   */\n  function addNode(node) {\n    if (!node) return null;\n\n    const res = [];\n\n    for (let chld of node.childNodes) {\n      if (chld.nodeName !== \"#text\") {\n        const data = buildData(chld);\n        const children = addNode(chld);\n\n        if (children) {\n          if (typeof children === \"string\") data[\"value\"] = children;\n          else data.children = children;\n        }\n\n        res.push(data);\n      }\n    }\n\n    return res.length === 0 ? null : res;\n  }\n\n  /**\n   * Generate obj with main data\n   */\n  function buildData(node) {\n    const data = attrsToProps(node.attrs);\n\n    /**\n     * Generation id of node\n     */\n    data[\"id\"] = guidGenerator();\n\n    /**\n     * Build type name\n     */\n    data[\"type\"] = node.nodeName;\n\n    /**\n     * Convert node of Tree to boolean value\n     * Input: XML Configuration\n     * Output: Node Tree\n     * Exception: attr \"value\"\n     */\n    Object.keys(data).forEach(function(item) {\n      if (item !== \"value\" && (this[item] === \"true\" || this[item] === \"false\")) {\n        data[item] = JSON.parse(this[item]);\n      }\n    }, data);\n\n    /**\n     * Convert to image type\n     */\n    if (data[\"type\"] === \"img\") data[\"type\"] = \"image\";\n\n    return data;\n  }\n\n  const htmlWithotBreaks = removeAllBreaks(html);\n  const htmlSelfClosingTags = editSelfClosingTags(htmlWithotBreaks);\n  const document = parse5.parseFragment(htmlSelfClosingTags);\n  const root = buildData(document.childNodes[0]);\n  root.children = addNode(document.childNodes[0]);\n  return root;\n}\n\n/**\n * Render items of tree\n * @param {*} el\n */\nfunction renderItem(el) {\n  const View = Registry.getViewByModel(getType(el).name);\n\n  if (!View) {\n    throw new Error(\"No view for model:\" + getType(el).name);\n  }\n\n  return <View key={guidGenerator()} item={el} />;\n}\n\n/**\n *\n * @param {*} item\n */\nfunction renderChildren(item) {\n  if (item && item.children && item.children.length) {\n    return item.children.map(el => {\n      return renderItem(el);\n    });\n  } else {\n    return null;\n  }\n}\n\n/**\n *\n * @param {*} name\n * @param {*} tree\n */\nfunction findInterface(name, tree) {\n  let fn;\n  fn = function(node) {\n    if (getType(node).name === name) return node;\n\n    if (node.children) {\n      for (let chld of node.children) {\n        const res = fn(chld);\n        if (res) return res;\n      }\n    }\n  };\n\n  return fn(tree);\n}\n\n/**\n *\n * @param {*} obj\n * @param {*} classes\n */\nfunction findParentOfType(obj, classes) {\n  for (let c of classes) {\n    try {\n      const p = getParentOfType(obj, c);\n      if (p) return p;\n    } catch (err) {}\n  }\n\n  return null;\n}\n\n/**\n *\n * @param {*} obj\n * @param {*} classes\n */\nfunction filterChildrenOfType(obj, classes) {\n  const res = [];\n\n  let fn;\n  fn = function(node) {\n    for (let c of classes) {\n      if (getType(node).name === c) res.push(node);\n    }\n\n    if (node.children) {\n      for (let chld of node.children) {\n        fn(chld);\n      }\n    }\n  };\n\n  fn(obj);\n\n  return res;\n}\n\nexport default {\n  cloneReactTree,\n  renderItem,\n  renderChildren,\n  treeToModel,\n  findInterface,\n  findParentOfType,\n  filterChildrenOfType,\n  cssConverter,\n};\n","/**\n * Internal helper to check if parameter is a string\n * @param {*} value\n * @returns {boolean}\n */\nexport const isString = value => {\n  return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Internal helper to check if string is empty\n * @param {*} value\n * @returns {boolean}\n */\nexport const isStringEmpty = value => {\n  if (!isString(value)) {\n    return false;\n  }\n\n  return value.length === 0;\n};\n\n/**\n * Internal helper to check if string is JSON\n * @param {string} value\n * @returns {boolean}\n */\nexport const isStringJSON = value => {\n  if (isString(value)) {\n    try {\n      JSON.parse(value);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Check if text is url\n * @param {*} i\n * @param {*} text\n */\nexport function getUrl(i, text) {\n  const stringToTest = text.slice(i);\n  const myRegexp = /^(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/g;\n  const match = myRegexp.exec(stringToTest);\n\n  return match && match.length ? match[1] : \"\";\n}\n\n/**\n * Convert MS to Time String\n * Example: 2000 -> 00:00:02\n * @param {number} ms\n * @returns {string}\n */\nexport function toTimeString(ms) {\n  if (typeof ms === \"number\") {\n    return new Date(ms).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/)[0];\n  }\n}\n","let colorNames = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgrey: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370d8\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#d87093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\",\n};\n\n/**\n * Convert HEX to RGBA\n * @param {string} hex 3 digits + # or 6 digits + #\n * @param {number?} opacity From 0 to 1\n */\nexport function hexToRGBA(hex, opacity) {\n  let r = 0,\n    g = 0,\n    b = 0;\n\n  let a = 0.3;\n\n  if (opacity && typeof parseInt(opacity) === \"number\") {\n    a = opacity;\n  }\n\n  /**\n   * If HEX = 3\n   */\n  if (hex && hex.length === 4) {\n    r = \"0x\" + hex[1] + hex[1];\n    g = \"0x\" + hex[2] + hex[2];\n    b = \"0x\" + hex[3] + hex[3];\n\n    /**\n     * If HEX = 6\n     */\n  } else if (hex && hex.length === 7) {\n    r = \"0x\" + hex[1] + hex[2];\n    g = \"0x\" + hex[3] + hex[4];\n    b = \"0x\" + hex[5] + hex[6];\n  }\n\n  const result = `rgba(${+r}, ${+g}, ${+b}, ${a})`;\n\n  return result;\n}\n\n/**\n * Color to RGBA\n * @param {*} value\n */\nexport function colorToRGBA(value, alpha) {\n  if (typeof value === \"string\" && typeof colorNames[value.toLowerCase()] !== undefined) {\n    const hexColor = colorNames[value.toLowerCase()];\n    return hexToRGBA(hexColor, alpha);\n  }\n\n  return value;\n}\n\n/**\n * Convert color to RGB(A)\n * @param {*} value\n * @param {number} alpha\n */\nexport function convertToRGBA(value, alpha) {\n  if (value.charAt(0) === \"#\") {\n    return hexToRGBA(value, alpha);\n  } else {\n    return colorToRGBA(value, alpha);\n  }\n}\n\n/**\n * Convert string to HEX color\n * @param {string} str\n */\nexport function stringToColor(str) {\n  let hash = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = \"#\";\n\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xff;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\n/**\n * Change alpha channel of RGBA\n * @param {string} rgba\n * @param {number} alpha from 0 to 1\n */\nexport function rgbaChangeAlpha(rgba, alpha) {\n  return rgba.replace(/[\\d\\.]+\\)$/g, `${alpha})`);\n}\n","function checkISO(value) {\n  let regExpISO = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/;\n\n  return regExpISO.test(value);\n}\n\n/**\n * Helper function to convert ms -> HHMMSS\n * @param {number} ms\n * @returns {string}\n */\nexport function msToHMS(ms) {\n  // 1- Convert to seconds:\n  var seconds = ms / 1000;\n  // 2- Extract hours:\n  var hours = parseInt(seconds / 3600); // 3,600 seconds in 1 hour\n  seconds = seconds % 3600; // seconds remaining after extracting hours\n  // 3- Extract minutes:\n  var minutes = parseInt(seconds / 60); // 60 seconds in 1 minute\n  // 4- Keep only seconds not extracted to minutes:\n  seconds = Math.floor(seconds); // % 60;\n\n  return hours + \":\" + minutes + \":\" + seconds;\n}\n\n/**\n * Helper function to pretty date\n */\nexport function prettyDate(time) {\n  if (typeof time !== \"string\" && !checkISO(time)) return;\n\n  let date = new Date((time || \"\").replace(/-/g, \"/\").replace(/[TZ]/g, \" \")),\n    diff = (new Date().getTime() - date.getTime()) / 1000,\n    day_diff = Math.floor(diff / 86400);\n\n  if (isNaN(day_diff) || day_diff < 0) return;\n\n  return (\n    (day_diff === 0 &&\n      ((diff < 60 && \"just now\") ||\n        (diff < 120 && \"1 minute ago\") ||\n        (diff < 3600 && Math.floor(diff / 60) + \" minutes ago\") ||\n        (diff < 7200 && \"1 hour ago\") ||\n        (diff < 86400 && Math.floor(diff / 3600) + \" hours ago\"))) ||\n    (day_diff === 1 && \"Yesterday\") ||\n    (day_diff < 7 && day_diff + \" days ago\") ||\n    (day_diff < 31 && Math.ceil(day_diff / 7) + \" weeks ago\") ||\n    day_diff + \" days ago\"\n  );\n}\n\n/**\n * Helper function to get current timezone\n */\nexport function currentISODate() {\n  let tzOffest = new Date().getTimezoneOffset() * 60000;\n  let localISOTime = new Date(Date.now() - tzOffest).toISOString().slice(0, -1);\n\n  return localISOTime;\n}\n","import * as Checkers from \"./utilities\";\nimport * as Colors from \"./colors\";\nimport * as UDate from \"./date\";\nimport { guidGenerator } from \"./unique\";\nimport { debounce } from \"./debounce\";\nimport { styleToProp } from \"./styles\";\n\nexport default { Checkers, Colors, UDate, guidGenerator, debounce, styleToProp };\n","/**\n * Returns a function, that, as long as it continues to be invoked,\n * will not be triggered. The function will be called after it\n * stops being called for N milliseconds. If `immediate` is passed,\n * trigger the function on the leading edge, instead of the trailing.\n *\n * @param {function} func\n * @param {number} wait\n * @param {boolean} immediate\n */\nexport function debounce(func, wait, immediate) {\n  let timeout;\n\n  return function() {\n    const context = this,\n      args = arguments;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n","/**\n * Parses a string of inline styles into a JavaScript object with casing for React\n *\n * @see TemplateEngine via MIT Licensed https://github.com/NervJS/taro/blob/master/packages/taro-components-rn/src/utils/index.ts\n *\n * @param {string} styles\n * @returns {Object}\n */\nexport function styleToProp(styles) {\n  if (!styles) return null;\n  return styles\n    .split(\";\")\n    .filter(style => style.split(\":\")[0] && style.split(\":\")[1])\n    .map(style => [\n      style\n        .split(\":\")[0]\n        .trim()\n        .replace(/-./g, c => c.substr(1).toUpperCase()),\n      style\n        .split(\":\")\n        .slice(1)\n        .join(\":\")\n        .trim(),\n    ])\n    .reduce(\n      (styleObj, style) => ({\n        ...styleObj,\n        [style[0]]: style[1],\n      }),\n      {},\n    );\n}\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { List } from \"semantic-ui-react\";\nimport { Card, Button, Icon, Tooltip, Badge } from \"antd\";\n\nimport Utils from \"../../utils\";\nimport styles from \"./Completions.module.scss\";\n\nconst Completion = observer(({ item, store }) => {\n  let removeHoney = () => (\n    <Button\n      type=\"primary\"\n      onClick={ev => {\n        ev.preventDefault();\n        item.removeHoneypot();\n      }}\n    >\n      Ground Truth\n    </Button>\n  );\n\n  let setHoney = () => (\n    <Button\n      type=\"primary\"\n      ghost={true}\n      onClick={ev => {\n        ev.preventDefault();\n        item.setHoneypot();\n      }}\n    >\n      Ground Truth\n    </Button>\n  );\n\n  /**\n   * Default badge for saved completions\n   */\n  let badge = <Badge status=\"default\" />;\n\n  /**\n   *\n   */\n  let completionID;\n\n  /**\n   * Title of card\n   */\n  if (item.userGenerate && !item.sentUserGenerate) {\n    completionID = \"New Completion\";\n  } else {\n    if (item.pk) {\n      completionID = `ID ${item.pk}`;\n    } else if (item.id) {\n      completionID = `ID ${item.id}`;\n    }\n  }\n\n  /**\n   * Badge for processing of user generate completion\n   */\n  if (item.userGenerate) {\n    badge = <Badge status=\"processing\" />;\n  }\n\n  /**\n   * Badge for complete of user generate completion\n   */\n  if (item.userGenerate && item.sentUserGenerate) {\n    badge = <Badge status=\"success\" />;\n  }\n\n  return (\n    <List.Item\n      className={item.selected ? `${styles.completion} ${styles.completion_selected}` : styles.completion}\n      onClick={ev => {\n        !item.selected && store.completionStore.selectCompletion(item.id);\n      }}\n    >\n      <List.Content>\n        <List.Header as=\"a\" style={{ marginBottom: \"1em\" }}>\n          {badge}\n          {completionID}\n        </List.Header>\n\n        <List.Description as=\"a\">\n          Created\n          <i>{item.createdAgo ? ` ${item.createdAgo} ago` : ` ${Utils.UDate.prettyDate(item.createdDate)}`}</i>\n          {item.createdBy ? ` by ${item.createdBy}` : null}\n        </List.Description>\n\n        {item.selected && (\n          <div className={styles.buttons}>\n            <Tooltip placement=\"topLeft\" title=\"Delete selected completion\">\n              <Button\n                type=\"danger\"\n                onClick={ev => {\n                  ev.preventDefault();\n                  item.store.deleteCompletion(item);\n                }}\n              >\n                Delete\n              </Button>\n            </Tooltip>\n\n            {item.honeypot ? removeHoney() : setHoney()}\n          </div>\n        )}\n      </List.Content>\n    </List.Item>\n  );\n});\n\nclass Completions extends Component {\n  render() {\n    const { store } = this.props;\n\n    let content = [];\n    let title = (\n      <div className={styles.title}>\n        <h3>Completions</h3>\n        <Tooltip placement=\"topLeft\" title=\"Add new completion\">\n          <Button\n            onClick={ev => {\n              ev.preventDefault();\n              store.completionStore.addUserCompletion();\n            }}\n          >\n            <Icon type=\"plus\" />\n          </Button>\n        </Tooltip>\n      </div>\n    );\n\n    store.completionStore.savedCompletions.forEach(c => {\n      if (c) {\n        content.push(<Completion key={c.pk} item={c} store={store} />);\n      }\n    });\n\n    return (\n      <Card title={title} bodyStyle={{ padding: \"0\", paddingTop: \"1px\" }}>\n        <List divided relaxed>\n          {store.completionStore.savedCompletions ? content : <p>No completions submitted yet</p>}\n        </List>\n      </Card>\n    );\n  }\n}\n\nexport default observer(Completions);\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Card } from \"antd\";\nimport { List } from \"semantic-ui-react\";\nimport Utils from \"../../utils\";\nimport styles from \"../Completions/Completions.module.scss\";\n\nconst Prediction = observer(({ item, store }) => {\n  return (\n    <List.Item\n      className={item.selected ? `${styles.completion} ${styles.completion_selected}` : styles.completion}\n      onClick={ev => {\n        !item.selected && store.completionStore.selectPrediction(item.id);\n      }}\n    >\n      <List.Content>\n        <List.Header as=\"a\" style={{ marginBottom: \"1em\" }}>\n          {item.createdBy ? `Model (v. ${item.createdBy})` : null}\n        </List.Header>\n        <List.Description as=\"a\" style={{ marginBottom: \"1em\" }}>\n          Created\n          <i>{item.createdAgo ? ` ${item.createdAgo} ago` : ` ${Utils.UDate.prettyDate(item.createdDate)}`}</i>\n        </List.Description>\n      </List.Content>\n    </List.Item>\n  );\n});\n\nclass Predictions extends Component {\n  render() {\n    const { store } = this.props;\n\n    let content = [];\n\n    store.completionStore.predictions &&\n      store.completionStore.predictions.map(predict => {\n        if (predict) {\n          content.push(<Prediction key={predict.pk} item={predict} store={store} />);\n        }\n      });\n\n    return (\n      <Card title=\"Predictions\" bodyStyle={{ padding: \"0\" }}>\n        <List>\n          {store.completionStore.predictions && store.completionStore.predictions.length ? (\n            content\n          ) : (\n            <List.Item>\n              <List.Description>\n                <div style={{ padding: \"1em 24px\" }}>No predictions</div>\n              </List.Description>\n            </List.Item>\n          )}\n        </List>\n      </Card>\n    );\n  }\n}\n\nexport default observer(Predictions);\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport styles from \"./Hint.module.scss\";\n\n/**\n * Hint Component\n * @param {object} style\n * @param {ant} children\n */\nexport default class Hint extends Component {\n  render() {\n    let style;\n    let localClass = `${styles.main}`;\n\n    if (this.props.style) style = this.props.style;\n\n    if (this.props.className) {\n      localClass = `${styles.main} ${this.props.className}`;\n    }\n\n    return (\n      <sup data-copy={this.props.copy} className={localClass} style={style}>\n        {this.props.children}\n      </sup>\n    );\n  }\n}\n\nHint.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  copy: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object]),\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button } from \"antd\";\n\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Controls.module.scss\";\n\nexport default inject(\"store\")(\n  observer(({ store }) => {\n    /**\n     * Buttons of Controls\n     */\n    let buttons = {\n      skip: \"\",\n      update: \"\",\n      submit: \"\",\n    };\n\n    const { userGenerate, update, sentUserGenerate } = store.completionStore.selected;\n    const { enableHotkeys, enableTooltips } = store.settings;\n\n    /**\n     * Task information\n     */\n    let taskInformation;\n    if (store.task) {\n      taskInformation = <h4 className={styles.task}>Task ID: {store.task.id}</h4>;\n    }\n\n    /**\n     * Hotkeys\n     */\n    if (enableHotkeys && enableTooltips) {\n      buttons.submit = <Hint> [ Ctrl+Enter ]</Hint>;\n      buttons.skip = <Hint> [ Ctrl+Space ]</Hint>;\n      buttons.update = <Hint> [ Alt+Enter] </Hint>;\n    }\n\n    let skipButton;\n    let updateButton;\n    let submitButton;\n\n    /**\n     * Check for Predict Menu\n     */\n    if (!store.completionStore.predictSelect || store.explore) {\n      if (store.hasInterface(\"skip\")) {\n        skipButton = (\n          <Button type=\"ghost\" onClick={store.skipTask} className={styles.skip}>\n            Skip {buttons.skip}\n          </Button>\n        );\n      }\n\n      if ((userGenerate && !sentUserGenerate) || (store.explore && !userGenerate && store.hasInterface(\"submit\"))) {\n        submitButton = (\n          <Button type=\"primary\" icon=\"check\" onClick={store.sendTask} className={styles.submit}>\n            Submit {buttons.submit}\n          </Button>\n        );\n      }\n\n      if ((userGenerate && sentUserGenerate) || (!userGenerate && store.hasInterface(\"update\"))) {\n        updateButton = (\n          <Button type=\"primary\" icon=\"rollback\" onClick={store.updateTask}>\n            Update {buttons.update}\n          </Button>\n        );\n      }\n    }\n\n    let content = (\n      <div className={styles.block}>\n        <div className={styles.wrapper}>\n          <div className={styles.container}>\n            {skipButton}\n            {updateButton}\n            {submitButton}\n          </div>\n          {taskInformation}\n        </div>\n      </div>\n    );\n\n    return (!store.completionStore.predictSelect || store.explore) && content;\n  }),\n);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport styles from \"./Segment.module.scss\";\n\n/**\n * Segment Component\n */\nexport default class Segment extends React.Component {\n  render() {\n    return <div className={styles.block}>{this.props.children}</div>;\n  }\n}\n\nSegment.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Icon } from \"antd\";\n\nimport styles from \"./Panel.module.scss\";\nimport Hint from \"../Hint/Hint\";\nimport Segment from \"../Segment/Segment\";\n\n/**\n * Panel component with buttons:\n * Undo\n * Redo\n * Reset\n * Show Instructions\n * Settings\n */\nexport default observer(({ store }) => {\n  const { history } = store.completionStore.selected;\n\n  return (\n    <div className={styles.container}>\n      <div className={`${styles.block} ${styles.block__controls}`}>\n        <Button\n          type=\"ghost\"\n          icon=\"undo\"\n          onClick={ev => {\n            history && history.canUndo && history.undo();\n            ev.preventDefault();\n          }}\n        >\n          Undo\n          {store.settings.enableHotkeys && store.settings.enableTooltips && <Hint>[ Ctrl+z ]</Hint>}\n        </Button>\n        <Button\n          type=\"ghost\"\n          icon=\"redo\"\n          onClick={ev => {\n            history && history.canRedo && history.redo();\n            ev.preventDefault();\n          }}\n        >\n          Redo\n        </Button>\n        <Button\n          type=\"ghost\"\n          icon=\"rest\"\n          onClick={ev => {\n            history && history.reset();\n          }}\n        >\n          Reset\n        </Button>\n        {store.setPrelabeling && (\n          <Button\n            style={{ display: \"none\" }}\n            onClick={ev => {\n              store.resetPrelabeling();\n            }}\n          >\n            {\" \"}\n            Reset Prelabeling\n          </Button>\n        )}\n      </div>\n\n      <div className={styles.block}>\n        {store.showingDescription && (\n          <Button\n            type=\"primary\"\n            onClick={ev => {\n              store.closeDescription();\n            }}\n          >\n            Hide Instructions\n          </Button>\n        )}\n        {!store.showingDescription && (\n          <Button\n            type=\"primary\"\n            onClick={ev => {\n              store.openDescription();\n            }}\n          >\n            Show Instructions\n          </Button>\n        )}\n\n        <Button\n          type=\"dashed\"\n          icon=\"setting\"\n          onClick={ev => {\n            store.toggleSettings();\n            ev.preventDefault();\n            return false;\n          }}\n        />\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Modal, Checkbox, Tabs } from \"antd\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(({ store }) => {\n  return (\n    <Modal\n      visible={store.showingSettings}\n      title=\"Settings\"\n      bodyStyle={{ paddingTop: \"0\" }}\n      footer=\"\"\n      onCancel={store.toggleSettings}\n    >\n      <Tabs defaultActiveKey=\"1\">\n        <Tabs.TabPane tab=\"Hotkeys\" key=\"1\">\n          <Checkbox\n            value=\"Enable labeling hotkeys\"\n            defaultChecked={store.settings.enableHotkeys}\n            onChange={() => {\n              store.settings.toggleHotkeys();\n            }}\n          >\n            Enable labeling hotkeys\n          </Checkbox>\n          <br />\n          <Checkbox\n            value=\"Show tooltips\"\n            defaultChecked={store.settings.enableTooltips}\n            onChange={() => {\n              store.settings.toggleTooltips();\n            }}\n          >\n            Show tooltips\n          </Checkbox>\n        </Tabs.TabPane>\n      </Tabs>\n    </Modal>\n  );\n});\n","import React, { Component } from \"react\";\nimport { Form, Button, Header } from \"semantic-ui-react\";\n\nimport { observer } from \"mobx-react\";\n\nclass DebugComponent extends Component {\n  state = { res: null };\n\n  render() {\n    const self = this;\n    const { store } = this.props;\n    const completion = store.completionStore.selected;\n\n    return (\n      <div>\n        <br />\n        <Header>Debug</Header>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: JSON.stringify(store.completionStore.selected.toJSON()) });\n          }}\n        >\n          Serialize whole tree\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: JSON.stringify(store.completionStore.selected.serializeCompletion()) });\n          }}\n        >\n          Seriealize results tree\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            if (self.state.res) completion.deserializeCompletion(JSON.parse(self.state.res));\n          }}\n        >\n          Load Serialized Results\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            const c = store.completionStore.addInitialCompletion();\n            store.completionStore.selectCompletion(c.id);\n\n            if (self.state.res) c.deserializeCompletion(JSON.parse(self.state.res));\n            // this.setState.res;\n          }}\n        >\n          Load As New Completion\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: store.task.data });\n          }}\n        >\n          Task data\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            // this.setState.res;\n            const data = JSON.parse(self.state.res);\n            const task = {\n              id: data[\"id\"],\n              project: 2,\n              data: JSON.stringify(data),\n            };\n\n            store.resetState();\n            store.addTask(task);\n            store.addGeneratedCompletion(task);\n            store.markLoading(false);\n\n            if (store.completionStore.selected)\n              store.completionStore.selected.traverseTree(node => node.updateValue && node.updateValue(self));\n          }}\n        >\n          Simulate Loading Task\n        </Button>\n\n        <br />\n        <br />\n        <Form>\n          <Form.TextArea\n            value={this.state.res}\n            className=\"is-search\"\n            // label={item.label}\n            onChange={ev => {\n              this.setState({ res: ev.target.value });\n            }}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default observer(DebugComponent);\n","import React, { Component, Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { getType, getRoot } from \"mobx-state-tree\";\nimport { Icon } from \"antd\";\n\nimport styles from \"./Node.module.scss\";\n\nconst Node = observer(({ node }) => {\n  const click = ev => {\n    ev.preventDefault();\n    getRoot(node).completionStore.selected.regionStore.unselectAll();\n    node.selectRegion();\n\n    return false;\n  };\n\n  if (getType(node).name === \"TextRegionModel\") {\n    return (\n      <div>\n        <Icon type=\"font-colors\" />\n        Text &nbsp;\n        <span style={{ color: \"#5a5a5a\" }}>{node.text}</span>\n      </div>\n    );\n  }\n\n  if (getType(node).name === \"AudioRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"microphone icon\" />\n          Audio {node.start.toFixed(2)} - {node.end.toFixed(2)}\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"TextAreaRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"i cursor icon\" />\n          Input <span style={{ color: \"#5a5a5a\" }}>{node._value}</span>\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"RectRegionModel\") {\n    const w = node.width * node.scaleX;\n    const y = node.height * node.scaleY;\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"expand icon\" />\n          Rectangle {w.toFixed(2)} x {y.toFixed(2)}\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"PolygonRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"i object ungroup outline icon\" />\n          Polygon\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"KeyPointRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} className={styles.node}>\n          <i className=\"i object bullseye icon\" />\n          KeyPoint\n        </a>\n      </p>\n    );\n  }\n});\n\nconst NodeMinimal = ({ node }) => {\n  if (getType(node).name === \"TextRegionModel\") {\n    return (\n      <Fragment>\n        <Icon type=\"font-colors\" /> Text\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"RectRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"expand icon\" />\n        Rectangle\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"AudioRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"microphone icon\" />\n        Audio\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"TextAreaRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i cursor icon\" />\n        Input\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"PolygonRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i object ungroup outline icon\" />\n        Polygon\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name === \"KeyPointRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i object bullseye icon\" />\n        KeyPoint\n      </Fragment>\n    );\n  }\n};\n\nexport { Node, NodeMinimal };\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { isValidReference } from \"mobx-state-tree\";\nimport { Icon } from \"antd\";\n\nimport { NodeMinimal } from \"../Node/Node\";\nimport styles from \"./Relations.module.scss\";\n\n/**\n * Relation Component\n *\n * Shows the relationship between two selected items\n */\nconst Relation = ({ store, rl }) => {\n  if (!isValidReference(() => rl.node1) || !isValidReference(() => rl.node2)) {\n    return null;\n  }\n\n  return (\n    <div className={styles.block}>\n      <div\n        className={styles.section}\n        onMouseOver={() => {\n          rl.toggleHighlight();\n        }}\n        onMouseOut={() => {\n          rl.toggleHighlight();\n        }}\n      >\n        <div className={styles.section__blocks}>\n          <div>\n            <NodeMinimal node={rl.node1} />\n          </div>\n          <Icon type=\"arrow-right\" />\n          <div>\n            <NodeMinimal node={rl.node2} />\n          </div>\n        </div>\n      </div>\n      <a\n        href=\"#\"\n        className={styles.delete}\n        onClick={() => {\n          store.deleteRelation(rl);\n          return false;\n        }}\n      >\n        <Icon type=\"delete\" />\n      </a>\n    </div>\n  );\n};\n\nexport default observer(({ store }) => {\n  const completion = store.completionStore.selected;\n  const { relations } = completion.relationStore;\n\n  return (\n    <Fragment>\n      <h4>Relations ({relations.length})</h4>\n\n      {!relations.length && <p>No Relations added yet</p>}\n\n      {completion.relationStore.relations.map(rl => (\n        <Relation store={completion.relationStore} rl={rl} />\n      ))}\n    </Fragment>\n  );\n});\n","import React, { Component, Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Typography } from \"antd\";\n\nimport { Node, NodeMinimal } from \"../Node/Node\";\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Entities.module.scss\";\n\nexport default observer(({ store, regionStore }) => {\n  const { regions } = regionStore;\n\n  let buttonRemove = () => {\n    return (\n      <Button\n        type=\"link\"\n        style={{ paddingLeft: 0 }}\n        onClick={ev => {\n          store.completionStore.selected.deleteAllRegions();\n          ev.preventDefault();\n        }}\n      >\n        Remove all\n        {regions.length > 0 && store.settings.enableHotkeys && store.settings.enableTooltips && (\n          <Hint>[ Ctrl+bksp ]</Hint>\n        )}\n      </Button>\n    );\n  };\n\n  return (\n    <div>\n      <h4>Entities ({regions.length})</h4>\n      {regions.length > 0 && buttonRemove()}\n      {!regions.length && <p>No Entitied added yet</p>}\n      <ul>\n        {regions.map(region => (\n          <li\n            key={region.id}\n            className={styles.item}\n            onMouseOver={() => {\n              region.toggleHightlight();\n            }}\n            onMouseOut={() => {\n              region.toggleHightlight();\n            }}\n          >\n            <Node node={region} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import React, { Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { getType } from \"mobx-state-tree\";\nimport { Input, Form } from \"semantic-ui-react\";\nimport { Icon, Button, Tag } from \"antd\";\n\nimport { Node, NodeMinimal } from \"../Node/Node\";\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Entity.module.scss\";\n\nconst templateElement = element => {\n  return (\n    <div key={element.pid} className={styles.labels}>\n      Labels:&nbsp;\n      {element.getSelectedNames().map(title => {\n        let bgColor = element.findLabel(title).background ? element.findLabel(title).background : \"#000000\";\n\n        return (\n          <Tag key={element.findLabel(title).id} color={bgColor} className={styles.tag}>\n            {title}\n          </Tag>\n        );\n      })}\n    </div>\n  );\n};\n\nconst RenderStates = ({ node }) => {\n  const _render = s => {\n    if (\n      getType(s).name === \"LabelsModel\" ||\n      getType(s).name === \"RectangleLabelsModel\" ||\n      getType(s).name === \"PolygonLabelsModel\" ||\n      getType(s).name === \"KeyPointLabelsModel\"\n    ) {\n      return templateElement(s);\n    } else if (getType(s).name === \"RatingModel\") {\n      return <p>Rating: {s.getSelectedString()}</p>;\n    }\n\n    return null;\n  };\n\n  return <Fragment>{node.states.map(s => _render(s))}</Fragment>;\n};\n\nexport default observer(({ store, completion }) => {\n  const node = completion.highlightedNode;\n\n  return (\n    <Fragment>\n      <p>\n        <NodeMinimal node={node} /> (id: {node.id})\n      </p>\n\n      {node.normalization && (\n        <p>\n          Normalization: {node.normalization}\n          <Icon\n            name=\"delete\"\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              node.deleteNormalization();\n            }}\n          />\n        </p>\n      )}\n      {node.states && <RenderStates node={node} />}\n\n      <div className={styles.block}>\n        <Button\n          className={styles.button}\n          onClick={() => {\n            completion.startRelationMode(node);\n          }}\n        >\n          <Icon type=\"link\" />\n          Relation\n        </Button>\n\n        <Button\n          className={styles.button}\n          onClick={() => {\n            completion.setNormalizationMode(true);\n          }}\n        >\n          <Icon type=\"plus\" />\n          Normalization\n        </Button>\n\n        <Button\n          className={styles.button}\n          type=\"dashed\"\n          onClick={() => {\n            completion.highlightedNode.unselectRegion();\n          }}\n        >\n          <Icon type=\"fullscreen-exit\" />\n          Unselect\n        </Button>\n\n        <Button\n          type=\"danger\"\n          className={styles.button}\n          onClick={() => {\n            completion.highlightedNode.deleteRegion();\n          }}\n        >\n          <Icon type=\"delete\" />\n          Delete\n          {store.settings.enableHotkeys && store.settings.enableTooltips && <Hint>[ Bksp ]</Hint>}\n        </Button>\n      </div>\n\n      {completion.normalizationMode && (\n        <div>\n          <Form\n            style={{ marginTop: \"0.5em\" }}\n            onSubmit={ev => {\n              const { value } = ev.target;\n              node.setNormalization(node.normInput);\n              completion.setNormalizationMode(false);\n\n              ev.preventDefault();\n              return false;\n            }}\n          >\n            <Form.Input\n              onChange={ev => {\n                const { value } = ev.target;\n                node.setNormInput(value);\n              }}\n              placeholder=\"Add Normalization\"\n            />\n          </Form>\n        </div>\n      )}\n    </Fragment>\n  );\n});\n","import React, { Component } from \"react\";\nimport { Card } from \"antd\";\nimport { observer } from \"mobx-react\";\n\nimport Relations from \"../Relations/Relations\";\nimport Entities from \"../Entities/Entities\";\nimport Entity from \"../Entity/Entity\";\nimport styles from \"./SideColumn.module.scss\";\n\n/**\n * Component Side with:\n * Completions\n * Entities\n * Relations\n */\nexport default observer(({ store }) => {\n  const completion = store.completionStore.selected;\n  const node = completion.highlightedNode;\n\n  return (\n    <Card title=\"Entity\" className={styles.card}>\n      {node && <Entity store={store} completion={completion} />}\n\n      {!completion.highlightedNode && <p>Nothing selected</p>}\n\n      <Entities store={store} regionStore={completion.regionStore} />\n\n      <Relations store={store} item={completion} />\n    </Card>\n  );\n});\n","import { types, getType, getParent } from \"mobx-state-tree\";\nimport Registry from \"./Registry\";\n\nfunction unionArray(arr) {\n  return types.maybeNull(types.array(oneOf(arr)));\n}\n\nfunction oneOf(arr) {\n  return types.union({\n    dispatcher: sn => {\n      if (arr.find(val => sn.type === val)) {\n        return Registry.getModelByTag(sn.type);\n      } else {\n        throw Error(\"Not expecting tag: \" + sn.type);\n      }\n    },\n  });\n}\n\nfunction allModelsTypes() {\n  const args = [\n    {\n      dispatcher: sn => {\n        if (Registry.tags.find(val => sn.type === val)) {\n          return Registry.getModelByTag(sn.type);\n        } else {\n          throw Error(\"Not expecting tag: \" + sn.type);\n        }\n      },\n    },\n    Registry.modelsArr(),\n  ];\n\n  const results = [].concat.apply([], args);\n\n  return types.union.apply(null, results);\n}\n\nfunction isType(node, types) {\n  const nt = getType(node);\n  for (let t of types) if (nt === t) return true;\n\n  return false;\n}\n\nfunction getParentOfTypeString(node, str) {\n  // same as getParentOfType but checks models .name instead of type\n  let parent = getParent(node);\n\n  if (!Array.isArray(str)) str = [str];\n\n  while (parent) {\n    const name = getType(parent).name;\n\n    if (str.find(c => c === name)) return parent;\n\n    parent = getParent(parent);\n  }\n\n  return null;\n}\n\nexport default { unionArray, allModelsTypes, oneOf, isType, getParentOfTypeString };\n","import React from \"react\";\nimport { types, getEnv, flow, getParentOfType } from \"mobx-state-tree\";\nimport { observer, Provider } from \"mobx-react\";\n\nimport Tree from \"../../core/Tree\";\n\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\n\n/**\n * View element. It's analogous to div element in html and can be used to visual configure display of blocks\n * @example\n * <View style=\"display: flex;\">\n *  <View style=\"flex: 50%\">\n *   <Header value=\"Facts:\"></Header>\n *   <Text name=\"text\" value=\"$fact\"></Text>\n *  </View>\n *  <View style=\"flex: 50%; margin-left: 1em\">\n *   <Header value=\"Enter your question:\"></Header>\n *   <TextArea name=\"question\" ></TextArea>\n *  </View>\n * </View>\n * @name View\n * @param {block|inline} display\n * @param {hexColor} backgroundColor background color\n * @param {style} style css style string\n */\nconst TagAttrs = types.model({\n  display: types.optional(types.string, \"block\"),\n  backgroundcolor: types.optional(types.string, \"\"),\n  margin: types.optional(types.string, \"\"),\n});\n\nconst Model = types.model({\n  id: types.identifier,\n  type: \"view\",\n  style: types.maybeNull(types.string),\n  children: Types.unionArray([\n    \"view\",\n    \"header\",\n    \"labels\",\n    \"textarea\",\n    \"choices\",\n    \"rating\",\n    \"ranker\",\n    \"rectangle\",\n    \"polygon\",\n    \"keypoint\",\n    \"rectanglelabels\",\n    \"polygonlabels\",\n    \"keypointlabels\",\n    \"text\",\n    \"audio\",\n    \"image\",\n    \"hypertext\",\n    \"audioplus\",\n    \"list\",\n    \"dialog\",\n  ]),\n});\n\nconst ViewModel = types.compose(\n  \"ViewModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = observer(({ item }) => {\n  let style = {};\n\n  if (item.display === \"inline\") {\n    style = { display: \"inline-block\", marginRight: \"15px\" };\n  }\n\n  if (item.style) {\n    style = Tree.cssConverter(item.style);\n  }\n\n  return <div style={style}>{Tree.renderChildren(item)}</div>;\n});\n\nRegistry.addTag(\"view\", ViewModel, HtxView);\n\nexport { HtxView, ViewModel };\n","/**\n * Convert JavaScript string in dot notation into an object reference\n * @param {Object} obj\n * @param {*} is\n * @param {*} value\n */\nfunction _index(obj, is, value) {\n  if (typeof is === \"string\") return _index(obj, is.split(\".\"), value);\n  else if (is.length === 1 && value !== undefined) return (obj[is[0]] = value);\n  else if (is.length === 0) return obj;\n  else return _index(obj[is[0]], is.slice(1), value);\n}\n\n/**\n *\n * @param {*} variable\n * @param {*} obj\n */\nfunction variableNotation(variable, obj) {\n  if (variable.charAt(0) === \"$\") {\n    const n = variable.substring(1);\n    return _index(obj, n);\n  } else {\n    return variable;\n  }\n}\n\n/**\n * A small templating engine for processing HTML with given data.\n *\n * @see TemplateEngine via MIT Licensed https://github.com/krasimir/absurd/\n *\n * @param {string} html\n * @param {Object} options\n * @returns {*}\n */\nfunction runTemplate(html, options) {\n  if (!options) options = {};\n\n  var re = /[$](.+)/g,\n    reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g,\n    code = \"with(obj) { var r=[];\\n\",\n    cursor = 0,\n    result,\n    match;\n\n  var add = function(line, js) {\n    js\n      ? (code += line.match(reExp) ? line + \"\\n\" : \"r.push(\" + line + \");\\n\")\n      : (code += line !== \"\" ? 'r.push(\"' + line.replace(/\"/g, '\\\\\"') + '\");\\n' : \"\");\n    return add;\n  };\n\n  while ((match = re.exec(html))) {\n    add(html.slice(cursor, match.index))(match[1], true);\n    cursor = match.index + match[0].length;\n  }\n\n  if (!html) return \"\";\n\n  add(html.substr(cursor, html.length - cursor));\n  code = (code + 'return r.join(\"\"); }').replace(/[\\r\\t\\n]/g, \" \");\n\n  try {\n    result = new Function(\"obj\", code).apply(options, [options]);\n  } catch (err) {\n    console.error(\"'\" + err.message + \"'\", \" in \\n\\nCode:\\n\", code, \"\\n\");\n  }\n\n  return result;\n}\n\nexport { variableNotation, runTemplate, _index };\n","import { types } from \"mobx-state-tree\";\n\nimport { runTemplate } from \"../../core/Template\";\n\nconst ProcessAttrsMixin = types.model().actions(self => ({\n  updateValue(store) {\n    self._value = runTemplate(self.value, store.task.dataObj) || \"\";\n  },\n}));\n\nexport default ProcessAttrsMixin;\n","import React from \"react\";\nimport { types } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport { Table, Header } from \"semantic-ui-react\";\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Table tag, show object keys and values in a table\n * @example\n * <Table name=\"text-1\" value=\"$text\"></Table>\n * @name Table\n * @param {string} value\n */\nconst Model = types.model({\n  type: \"table\",\n  size: types.optional(types.string, \"h4\"),\n  value: types.maybeNull(types.string),\n  _value: types.optional(types.string, \"\"),\n});\n\nconst TableModel = types.compose(\n  \"TableModel\",\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxTable = inject(\"store\")(\n  observer(({ store, item }) => {\n    let value = item._value;\n    if (!value) {\n      if (store.task) value = store.task.dataObj;\n    }\n\n    return (\n      <div style={{ marginTop: \"1em\" }}>\n        <Table basic=\"very\" celled collapsing>\n          <Table.Body>\n            {Object.keys(value).map(k => {\n              let v = value[k];\n              if (typeof v === \"object\") v = JSON.stringify(v);\n\n              return (\n                <Table.Row>\n                  <Table.Cell>\n                    <Header as=\"h4\">\n                      <Header.Subheader>{k}</Header.Subheader>\n                    </Header>\n                  </Table.Cell>\n                  <Table.Cell>{v}</Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table.Body>\n        </Table>\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"table\", TableModel, HtxTable);\n\nexport { HtxTable, TableModel };\n","import React from \"react\";\nimport { types } from \"mobx-state-tree\";\nimport { observer } from \"mobx-react\";\nimport { Typography } from \"antd\";\n\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Header tag, show header\n * @example\n * <Header name=\"text-1\" value=\"$text\"></Header>\n * @name Header\n * @param {string} size Size of header\n * @param {string} value Text of header\n * @param {boolean} underline Underline of header\n */\nconst Model = types.model({\n  type: \"header\",\n  size: types.optional(types.number, 4),\n  _value: types.optional(types.string, \"\"),\n  value: types.optional(types.string, \"\"),\n  underline: types.optional(types.boolean, false),\n});\n\nconst HeaderModel = types.compose(\n  \"HeaderModel\",\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxHeader = observer(({ item }) => {\n  return (\n    <Typography.Title underline={item.underline} level={item.size} style={{ margin: \"10px 0\" }}>\n      {item._value}\n    </Typography.Title>\n  );\n});\n\nRegistry.addTag(\"header\", HeaderModel, HtxHeader);\n\nexport { HtxHeader, HeaderModel };\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport Registry from \"../../core/Registry\";\nimport { runTemplate } from \"../../core/Template\";\n\n/**\n * HyperText element. Render html inside\n * @example\n * <View>\n *  <HyperText value=\"<p>Hey</p>\"></HyperText>\n * <View>\n * @param {string} name\n * @param {string} value\n */\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  name: types.maybeNull(types.string),\n});\n\nfunction HyperTextActions(self) {\n  return {\n    fromStateJSON(obj) {\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      if (obj.value.text) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n    },\n  };\n}\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"HyperText\",\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => HyperTextActions(self));\n\nconst HyperTextModel = types.compose(\n  \"HyperTextModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxHyperTextView = inject(\"store\")(\n  observer(({ store, item }) => {\n    if (!store.task) return null;\n\n    return <div dangerouslySetInnerHTML={{ __html: runTemplate(item.value, store.task.dataObj) }} />;\n  }),\n);\n\nRegistry.addTag(\"hypertext\", HyperTextModel, HtxHyperTextView);\n\nexport { HtxHyperTextView, HyperTextModel };\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Tag } from \"antd\";\n\nimport styles from \"./Dialog.module.scss\";\n\nexport default class DialogView extends React.Component {\n  render() {\n    let selectedStyle = `${styles.block}`;\n    let hint;\n    let bgColor;\n    let date;\n\n    if (this.props.hint) {\n      hint = <Tag color=\"blue\">{this.props.hint}</Tag>;\n    }\n\n    if (this.props.bg) {\n      bgColor = this.props.bg;\n    }\n\n    if (this.props.selected) {\n      selectedStyle = `${selectedStyle} ${styles.block_selected}`;\n      hint = (\n        <div>\n          <Tag color=\"magenta\">Selected Message</Tag>\n        </div>\n      );\n\n      if (this.props.hint) {\n        hint = (\n          <div className={styles.tag}>\n            <Tag color=\"magenta\">{this.props.hint}</Tag>\n          </div>\n        );\n      }\n    }\n\n    if (this.props.date) {\n      date = <span className={styles.date}>{this.props.date}</span>;\n    }\n\n    return (\n      <div className={selectedStyle} style={{ background: bgColor, width: \"max-content\", maxWidth: \"100%\" }}>\n        <span className={styles.name}>{this.props.name}:&nbsp;</span>\n        <p className={styles.text}>{this.props.text}</p>\n        {date}\n        {hint}\n      </div>\n    );\n  }\n}\n\nDialogView.propTypes = {\n  name: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  date: PropTypes.string,\n  hint: PropTypes.string,\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { Divider, Empty } from \"antd\";\n\nimport { guidGenerator } from \"../../utils/unique\";\nimport Registry from \"../../core/Registry\";\nimport DialogView from \"../../components/Dialog/Dialog\";\nimport { stringToColor, convertToRGBA } from \"../../utils/colors\";\n\n/**\n * Dialog tag renders a dialog\n * @example\n * <View>\n *  <Dialog name=\"dialog\" value=\"$dialog\"></Dialog>\n * <View>\n * @param {string} name name of the element\n * @param {object} value value of the element\n */\nconst Replica = types.model({\n  name: types.string,\n  text: types.string,\n  selected: types.optional(types.boolean, false),\n  date: types.optional(types.string, \"\"),\n  hint: types.optional(types.string, \"\"),\n});\n\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  name: types.maybeNull(types.string),\n});\n\nfunction DialogActions(self) {\n  return {\n    fromStateJSON(obj) {\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      if (obj.value.text) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n    },\n  };\n}\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"Dialog\",\n    data: types.map(Replica),\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => DialogActions(self));\n\nconst DialogModel = types.compose(\n  \"DialogModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxDialogView = inject(\"store\")(\n  observer(({ store, item }) => {\n    if (!store.task || !store.task.dataObj) {\n      return <Empty />;\n    }\n\n    let result = [];\n    let name = item.value;\n\n    if (name.charAt(0) === \"$\") {\n      name = name.substr(1);\n    }\n\n    store.task.dataObj[name].forEach((item, ind) => {\n      let bgColor;\n\n      if (item.name) {\n        bgColor = convertToRGBA(stringToColor(item.name), 0.1);\n      }\n\n      result.push(\n        <DialogView\n          key={ind}\n          name={item.name}\n          hint={item.hint}\n          text={item.text}\n          selected={item.selected}\n          date={item.date}\n          id={item.id}\n          bg={bgColor}\n        />,\n      );\n    });\n\n    return (\n      <div>\n        <div\n          style={{\n            display: \"flex\",\n            flexFlow: \"column\",\n            maxHeight: \"500px\",\n            overflowY: \"scroll\",\n            paddingRight: \"10px\",\n            marginTop: \"10px\",\n          }}\n        >\n          {result}\n        </div>\n        <Divider dashed={true} />\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"dialog\", DialogModel, HtxDialogView);\n\nexport { DialogModel, HtxDialogView };\n","import React, { Fragment } from \"react\";\nimport { Button, Icon } from \"antd\";\n\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, true),\n  volume: types.optional(types.boolean, true),\n  speed: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"audio\",\n    _value: types.optional(types.string, \"\"),\n    playing: types.optional(types.boolean, false),\n    height: types.optional(types.number, 20),\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    wsCreated(ws) {\n      self._ws = ws;\n    },\n\n    /**\n     * Play and stop\n     */\n    handlePlay() {\n      self.playing = !self.playing;\n    },\n  }));\n\nconst AudioHOCModel = types.compose(\n  \"AudioHOCModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nexport { AudioHOCModel };\n","import React, { Fragment, Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Button, Icon } from \"antd\";\n\nconst AudioControls = observer(({ item, store }) => {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"1em\" }}>\n      <Button\n        type=\"primary\"\n        onClick={ev => {\n          item._ws.playPause();\n        }}\n      >\n        {item.playing && (\n          <Fragment>\n            <Icon type=\"pause-circle\" /> Pause\n          </Fragment>\n        )}\n        {!item.playing && (\n          <Fragment>\n            <Icon type=\"play-circle\" /> Play\n          </Fragment>\n        )}\n      </Button>\n    </div>\n  );\n});\n\nexport default observer(AudioControls);\n","import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport RegionsPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.regions.min.js\";\nimport TimelinePlugin from \"wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js\";\nimport CursorPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.cursor\";\nimport { Slider, InputNumber, Row, Col } from \"antd\";\n\nimport styles from \"./Waveform.module.scss\";\n\n/**\n * Use formatTimeCallback to style the notch labels as you wish, such\n * as with more detail as the number of pixels per second increases.\n *\n * Here we format as M:SS.frac, with M suppressed for times < 1 minute,\n * and frac having 0, 1, or 2 digits as the zoom increases.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override timeInterval, primaryLabelInterval and/or\n * secondaryLabelInterval so they all work together.\n *\n * @param: seconds\n * @param: pxPerSec\n */\nfunction formatTimeCallback(seconds, pxPerSec) {\n  seconds = Number(seconds);\n  var minutes = Math.floor(seconds / 60);\n  seconds = seconds % 60;\n\n  // fill up seconds with zeroes\n  var secondsStr = Math.round(seconds).toString();\n  if (pxPerSec >= 25 * 10) {\n    secondsStr = seconds.toFixed(2);\n  } else if (pxPerSec >= 25 * 1) {\n    secondsStr = seconds.toFixed(1);\n  }\n\n  if (minutes > 0) {\n    if (seconds < 10) {\n      secondsStr = \"0\" + secondsStr;\n    }\n    return `${minutes}:${secondsStr}`;\n  }\n  return secondsStr;\n}\n\n/**\n * Use timeInterval to set the period between notches, in seconds,\n * adding notches as the number of pixels per second increases.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param: pxPerSec\n */\nfunction timeInterval(pxPerSec) {\n  var retval = 1;\n  if (pxPerSec >= 25 * 100) {\n    retval = 0.01;\n  } else if (pxPerSec >= 25 * 40) {\n    retval = 0.025;\n  } else if (pxPerSec >= 25 * 10) {\n    retval = 0.1;\n  } else if (pxPerSec >= 25 * 4) {\n    retval = 0.25;\n  } else if (pxPerSec >= 25) {\n    retval = 1;\n  } else if (pxPerSec * 5 >= 25) {\n    retval = 5;\n  } else if (pxPerSec * 15 >= 25) {\n    retval = 15;\n  } else {\n    retval = Math.ceil(0.5 / pxPerSec) * 60;\n  }\n  return retval;\n}\n\n/**\n * Return the cadence of notches that get labels in the primary color.\n * EG, return 2 if every 2nd notch should be labeled,\n * return 10 if every 10th notch should be labeled, etc.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param pxPerSec\n */\nfunction primaryLabelInterval(pxPerSec) {\n  var retval = 1;\n  if (pxPerSec >= 25 * 100) {\n    retval = 10;\n  } else if (pxPerSec >= 25 * 40) {\n    retval = 4;\n  } else if (pxPerSec >= 25 * 10) {\n    retval = 10;\n  } else if (pxPerSec >= 25 * 4) {\n    retval = 4;\n  } else if (pxPerSec >= 25) {\n    retval = 1;\n  } else if (pxPerSec * 5 >= 25) {\n    retval = 5;\n  } else if (pxPerSec * 15 >= 25) {\n    retval = 15;\n  } else {\n    retval = Math.ceil(0.5 / pxPerSec) * 60;\n  }\n  return retval;\n}\n\n/**\n * Return the cadence of notches to get labels in the secondary color.\n * EG, return 2 if every 2nd notch should be labeled,\n * return 10 if every 10th notch should be labeled, etc.\n *\n * Secondary labels are drawn after primary labels, so if\n * you want to have labels every 10 seconds and another color labels\n * every 60 seconds, the 60 second labels should be the secondaries.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param pxPerSec\n */\nfunction secondaryLabelInterval(pxPerSec) {\n  // draw one every 10s as an example\n  return Math.floor(10 / timeInterval(pxPerSec));\n}\n\nexport default class Waveform extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      src: this.props.src,\n      pos: 0,\n      colors: {\n        waveColor: \"#97A0AF\",\n        progressColor: \"#52c41a\",\n      },\n      zoom: 20,\n      speed: 1,\n      volume: 1,\n    };\n  }\n\n  /**\n   * Handle to change zoom of wave\n   */\n  onChangeZoom = value => {\n    this.setState({\n      ...this.state,\n      zoom: value,\n    });\n\n    this.wavesurfer.zoom(value);\n  };\n\n  onChangeVolume = value => {\n    this.setState({\n      ...this.state,\n      volume: value,\n    });\n\n    this.wavesurfer.setVolume(value);\n  };\n\n  /**\n   * Handle to change speed of wave\n   */\n  onChangeSpeed = value => {\n    this.setState({\n      ...this.state,\n      speed: value,\n    });\n\n    this.wavesurfer.setPlaybackRate(value);\n  };\n\n  componentDidMount() {\n    this.$el = ReactDOM.findDOMNode(this);\n\n    this.$waveform = this.$el.querySelector(\"#wave\");\n\n    let wavesurferConfigure = {\n      container: this.$waveform,\n      waveColor: this.state.colors.waveColor,\n      height: this.props.height,\n      backend: \"MediaElement\",\n      progressColor: this.state.colors.progressColor,\n    };\n\n    if (this.props.regions) {\n      wavesurferConfigure = {\n        ...wavesurferConfigure,\n        plugins: [\n          RegionsPlugin.create({\n            dragSelection: {\n              slop: 5, // slop\n            },\n          }),\n          TimelinePlugin.create({\n            container: \"#timeline\", // the element in which to place the timeline, or a CSS selector to find it\n            formatTimeCallback: formatTimeCallback, // custom time format callback. (Function which receives number of seconds and returns formatted string)\n            timeInterval: timeInterval, // number of intervals that records consists of. Usually it is equal to the duration in minutes. (Integer or function which receives pxPerSec value and returns value)\n            primaryLabelInterval: primaryLabelInterval, // number of primary time labels. (Integer or function which receives pxPerSec value and reurns value)\n            secondaryLabelInterval: secondaryLabelInterval, // number of secondary time labels (Time labels between primary labels, integer or function which receives pxPerSec value and reurns value).\n            primaryColor: \"blue\", // the color of the modulo-ten notch lines (e.g. 10sec, 20sec). The default is '#000'.\n            secondaryColor: \"blue\", // the color of the non-modulo-ten notch lines. The default is '#c0c0c0'.\n            primaryFontColor: \"#000\", // the color of the non-modulo-ten time labels (e.g. 10sec, 20sec). The default is '#000'.\n            secondaryFontColor: \"#000\",\n          }),\n          CursorPlugin.create({\n            wrapper: this.$waveform,\n            showTime: true,\n            opacity: 1,\n          }),\n        ],\n      };\n    }\n\n    this.wavesurfer = WaveSurfer.create(wavesurferConfigure);\n\n    /**\n     * Load data\n     */\n    this.wavesurfer.load(this.props.src);\n\n    /**\n     * Speed of waveform\n     */\n    this.wavesurfer.setPlaybackRate(this.state.speed);\n\n    const self = this;\n\n    if (this.props.regions) {\n      /**\n       * Mouse enter on region\n       */\n      this.wavesurfer.on(\"region-mouseenter\", reg => {\n        reg._region.onMouseOver();\n      });\n\n      /**\n       * Mouse leave on region\n       */\n      this.wavesurfer.on(\"region-mouseleave\", reg => {\n        reg._region.onMouseLeave();\n      });\n\n      /**\n       * Add region to wave\n       */\n      this.wavesurfer.on(\"region-created\", reg => {\n        const region = self.props.addRegion(reg);\n        reg._region = region;\n        reg.color = region.selectedregionbg;\n\n        reg.on(\"click\", () => region.onClick(self.wavesurfer));\n        reg.on(\"update-end\", () => region.onUpdateEnd(self.wavesurfer));\n\n        reg.on(\"dblclick\", e => {\n          window.setTimeout(function() {\n            reg.play();\n          }, 0);\n        });\n\n        reg.on(\"out\", () => {});\n      });\n    }\n\n    /**\n     * Handler of slider\n     */\n    const slider = document.querySelector(\"#slider\");\n\n    if (slider) {\n      slider.oninput = function() {\n        self.wavesurfer.zoom(Number(this.value));\n      };\n    }\n\n    this.wavesurfer.on(\"ready\", () => {\n      self.props.onCreate(this.wavesurfer);\n    });\n\n    /**\n     * Pause trigger of audio\n     */\n    this.wavesurfer.on(\"pause\", self.props.handlePlay);\n\n    /**\n     * Play trigger of audio\n     */\n    this.wavesurfer.on(\"play\", self.props.handlePlay);\n\n    if (this.props.regions) {\n      this.props.onLoad(this.wavesurfer);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"wave\" className={styles.wave} />\n\n        <div id=\"timeline\" />\n\n        <Row className={this.props.volume || this.props.speed || this.props.zoom ? styles.menu : \"\"}>\n          {this.props.speed && (\n            <Col span={24}>\n              <Col span={12}>\n                Speed:{\" \"}\n                <InputNumber\n                  min={0.5}\n                  max={3}\n                  value={this.state.speed}\n                  onChange={value => {\n                    this.onChangeSpeed(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={0.5}\n                  max={3}\n                  step={0.1}\n                  value={typeof this.state.speed === \"number\" ? this.state.speed : 1}\n                  onChange={range => {\n                    this.onChangeSpeed(range);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n          {this.props.volume && (\n            <Col span={24}>\n              <Col span={12}>\n                Volume:{\" \"}\n                <InputNumber\n                  min={0}\n                  max={1}\n                  value={this.state.volume}\n                  step={0.1}\n                  onChange={value => {\n                    this.onChangeVolume(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={0}\n                  max={1}\n                  step={0.1}\n                  value={typeof this.state.volume === \"number\" ? this.state.volume : 1}\n                  onChange={value => {\n                    this.onChangeVolume(value);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n          {this.props.zoom && (\n            <Col span={24}>\n              <Col span={12}>\n                Zoom:{\" \"}\n                <InputNumber\n                  min={20}\n                  max={500}\n                  value={this.state.zoom}\n                  onChange={value => {\n                    this.onChangeZoom(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={20}\n                  step={10}\n                  max={500}\n                  value={typeof this.state.zoom === \"number\" ? this.state.zoom : 0}\n                  onChange={value => {\n                    this.onChangeZoom(value);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { Button, Icon } from \"antd\";\n\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { AudioHOCModel } from \"./AudioHOC\";\n\nimport AudioControls from \"./Audio/Controls\";\n\nimport Waveform from \"../../components/Waveform/Waveform\";\n\n/**\n * Audio tag plays a simple audio file\n * @example\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n * </View>\n * @example\n * <!-- Audio classification -->\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n *   <Choices name=\"ch\" toName=\"audio\">\n *     <Choice value=\"Positive\"></Choice>\n *     <Choice value=\"Negative\"></Choice>\n *   </Choices>\n * </View>\n * @example\n * <!-- Audio transcription -->\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n *   <TextArea name=\"ta\" toName=\"audio\"></TextArea>\n * </View>\n * @name Audio\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {string} hotkey hotkey used to play/pause audio\n */\n\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, false),\n  volume: types.optional(types.boolean, false),\n  speed: types.optional(types.boolean, false),\n});\n\nconst Model = AudioHOCModel.named(\"AudioModel\").actions(self => ({\n  fromStateJSON(obj, fromModel) {\n    if (obj.value.choices) {\n      self.completion.names.get(obj.from_name).fromStateJSON(obj);\n    }\n\n    if (obj.value.text) {\n      self.completion.names.get(obj.from_name).fromStateJSON(obj);\n    }\n  },\n\n  onLoad(ws) {\n    self._ws = ws;\n  },\n}));\n\nconst AudioModel = types.compose(\n  \"AudioModel\",\n  Model,\n  TagAttrs,\n);\n\nconst HtxAudioView = observer(({ store, item }) => {\n  if (!item._value) return null;\n\n  return (\n    <div>\n      <Waveform\n        src={item._value}\n        onCreate={item.wsCreated}\n        onLoad={item.onLoad}\n        handlePlay={item.handlePlay}\n        speed={item.speed}\n        zoom={item.zoom}\n        volume={item.volume}\n        regions={false}\n        height={item.height}\n      />\n\n      <AudioControls item={item} />\n    </div>\n  );\n});\n\nconst HtxAudio = inject(\"store\")(observer(HtxAudioView));\n\nRegistry.addTag(\"audio\", AudioModel, HtxAudio);\n\nexport { AudioModel, HtxAudio };\n","import { types } from \"mobx-state-tree\";\n\nconst RegionsMixin = types\n  .model({\n    selected: types.optional(types.boolean, false),\n    highlighted: types.optional(types.boolean, false),\n  })\n  .actions(self => ({\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n    },\n\n    unselectRegion() {\n      const completion = self.completion;\n      if (completion.relationMode) {\n        completion.stopRelationMode();\n      }\n\n      self.selected = false;\n      self.completion.setHighlightedNode(null);\n    },\n\n    onClickRegion() {\n      const completion = self.completion;\n\n      if (completion.relationMode) {\n        completion.addRelation(self);\n        completion.stopRelationMode();\n        completion.regionStore.unselectAll();\n      } else {\n        if (self.selected) {\n          self.unselectRegion();\n        } else {\n          completion.regionStore.unselectAll();\n          self.selectRegion();\n        }\n      }\n    },\n\n    deleteRegion() {\n      self.unselectRegion();\n\n      self.completion.relationStore.deleteNodeRelation(self);\n\n      self.completion.regionStore.deleteRegion(self);\n\n      self.completion.deleteRegion(self);\n    },\n\n    setHighlight(val) {\n      self.highlighted = val;\n    },\n\n    toggleHightlight() {\n      self.setHighlight(!self.highlighted);\n    },\n  }));\n\nexport default RegionsMixin;\n","import { types } from \"mobx-state-tree\";\n\n/**\n * Normalization\n * For normalize many labels to one value\n */\nconst NormalizationMixin = types\n  .model({\n    normInput: types.maybeNull(types.string),\n    normalization: types.maybeNull(types.string),\n  })\n  .actions(self => ({\n    /**\n     * Set normalization\n     * @param {*} val\n     */\n    setNormalization(val) {\n      self.normalization = val;\n    },\n\n    /**\n     * Delete normalization\n     */\n    deleteNormalization() {\n      self.setNormalization(\"\");\n    },\n\n    setNormInput(val) {\n      self.normInput = val;\n    },\n  }));\n\nexport default NormalizationMixin;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types } from \"mobx-state-tree\";\nimport { Tag } from \"antd\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Utils from \"../../utils\";\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Hint from \"../../components/Hint/Hint\";\n\n/**\n * Label tag represents a single label\n * @example\n * <View>\n *   <Labels name=\"type\" toName=\"txt-1\">\n *     <Label alias=\"B\" value=\"Brand\"></Label>\n *     <Label alias=\"P\" value=\"Product\"></Label>\n *   </Labels>\n *   <Text name=\"txt-1\" value=\"$text\"></Text>\n * </View>\n * @name Label\n * @param {string} value A value of the label\n * @param {boolean} selected If this label should be preselected\n * @param {string} alias Label alias\n * @param {string} hotkey Hotkey\n * @param {boolean} showalias Show alias inside label text\n * @param {string} aliasstyle Alias CSS style default=opacity: 0.6\n * @param {string} size Size of text in the label\n * @param {string} background The background color of active label\n * @param {string} selectedColor Color of text in an active label\n */\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  selected: types.optional(types.boolean, false),\n  alias: types.maybeNull(types.string),\n  hotkey: types.maybeNull(types.string),\n  showalias: types.optional(types.boolean, false),\n  aliasstyle: types.optional(types.string, \"opacity: 0.6\"),\n  size: types.optional(types.string, \"medium\"),\n  background: types.optional(types.string, \"#36B37E\"),\n  selectedcolor: types.optional(types.string, \"white\"),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"label\",\n    _value: types.optional(types.string, \"\"),\n  })\n  .actions(self => ({\n    toggleSelected() {\n      const sel = self.selected;\n\n      const labels = Types.getParentOfTypeString(self, [\n        \"LabelsModel\",\n        \"RectangleLabelsModel\",\n        \"PolygonLabelsModel\",\n        \"KeyPointLabelsModel\",\n      ]);\n      labels.shouldBeUnselected && labels.unselectAll();\n\n      if (labels.shouldBeUnselected && sel === true) {\n      } else {\n        self.selected = !self.selected;\n      }\n    },\n\n    markSelected(val) {\n      self.selected = val;\n    },\n\n    onHotKey() {\n      return self.toggleSelected();\n    },\n  }));\n\nconst LabelModel = types.compose(\n  \"LabelModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxLabelView = inject(\"store\")(\n  observer(({ item, store }) => {\n    const bg = {\n      backgroundColor: item.selected ? item.background : \"#e8e8e8\",\n      color: item.selected ? item.selectedcolor : \"#333333\",\n      cursor: \"pointer\",\n      margin: \"5px\",\n    };\n\n    return (\n      <Tag\n        onClick={ev => {\n          item.toggleSelected();\n          return false;\n        }}\n        style={bg}\n        size={item.size}\n      >\n        {item._value}\n        {item.showalias === true && item.alias && (\n          <span style={Utils.styleToProp(item.aliasstyle)}>&nbsp;{item.alias}</span>\n        )}\n        {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n      </Tag>\n    );\n  }),\n);\n\nRegistry.addTag(\"label\", LabelModel, HtxLabelView);\n\nexport { HtxLabelView, LabelModel };\n","import { types } from \"mobx-state-tree\";\n\nconst SelectedModelMixin = types\n  .model()\n  .views(self => ({\n    get selectedLabels() {\n      return self.children.filter(c => c.selected === true);\n    },\n\n    get isSelected() {\n      return self.selectedLabels.length > 0;\n    },\n  }))\n  .actions(self => ({\n    findLabel(value) {\n      return self.children.find(c => c.alias === value || c.value === value);\n    },\n\n    unselectAll() {\n      self.children.map(c => c.markSelected(false));\n    },\n\n    getSelectedNames() {\n      return self.selectedLabels.map(c => (c.alias ? c.alias : c.value));\n    },\n\n    getSelectedString(joinstr) {\n      joinstr = joinstr || \" \";\n      return self.getSelectedNames().join(joinstr);\n    },\n  }));\n\nexport default SelectedModelMixin;\n","import { Modal } from \"antd\";\n\nconst wrapper = (_type, value, title) => {\n  let custom = {\n    type: \"\",\n    title: \"\",\n  };\n\n  switch (_type) {\n    case \"error\":\n      custom.type = Modal.error;\n      custom.title = \"Error\";\n      break;\n    case \"warning\":\n      custom.type = Modal.warning;\n      custom.title = \"Warning\";\n      break;\n    case \"success\":\n      custom.type = Modal.success;\n      custom.title = \"Success\";\n      break;\n    default:\n      custom.type = Modal.info;\n      custom.title = \"Info\";\n  }\n\n  custom.type({\n    title: title ? title : custom.title,\n    content: value,\n  });\n};\n\n/**\n * Success modal\n * @param {string} value\n * @param {string} title\n */\nconst error = (value, title) => {\n  wrapper(`error`, value, title);\n};\n\n/**\n * Warning modal\n * @param {string} value\n * @param {string} title\n */\nconst warning = (value, title) => {\n  wrapper(`warning`, value, title);\n};\n\n/**\n * Success modal\n * @param {string} value\n * @param {string} title\n */\nconst success = (value, title) => {\n  wrapper(`success`, value, title);\n};\n\n/**\n * Information modal\n * @param {string} value\n * @param {string} title\n */\nconst info = (value, title) => {\n  wrapper(`info`, value, title);\n};\n\nexport default { error, warning, success, info };\n","import { types } from \"mobx-state-tree\";\n\nimport InfoModal from \"../../components/Infomodal/Infomodal\";\n\n/**\n * Wrapper of Control item\n */\nconst LabelMixin = types.model(\"LabelMixin\").actions(self => ({\n  getSelectedColor() {\n    // return first selected label color\n    const sel = self.children.find(c => c.selected === true);\n    return sel && sel.background;\n  },\n  /**\n   * Usage check of selected controls before send completion to server\n   */\n  beforeSend() {\n    const names = self.getSelectedNames();\n\n    if (names && self.type === self._type) {\n      self.unselectAll();\n    }\n  },\n\n  fromStateJSON(obj, fromModel) {\n    self.unselectAll();\n\n    const objectType = obj.value[self._type];\n\n    if (!objectType) {\n      InfoModal.error(`Error with ${self._type}.`);\n      return;\n    }\n\n    if (obj.id) self.pid = obj.id;\n\n    objectType.forEach(obj => {\n      const findedObj = self.findLabel(obj);\n\n      if (!findedObj) {\n        InfoModal.error(`Error with ${self._type}. Not found: ` + objectType);\n        return;\n      }\n\n      findedObj.markSelected(true);\n    });\n  },\n}));\n\nexport default LabelMixin;\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { types } from \"mobx-state-tree\";\n\nimport Tree from \"../../core/Tree\";\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\n\nimport { LabelModel } from \"./Label\"; // eslint-disable-line no-unused-vars\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\nimport LabelMixin from \"../mixins/LabelMixin\";\n\n/**\n * Labels tag, create a group of labels\n * @example\n * <View>\n *   <Labels name=\"type\" toName=\"txt-1\">\n *     <Label alias=\"B\" value=\"Brand\"></Label>\n *     <Label alias=\"P\" value=\"Product\"></Label>\n *   </Labels>\n *   <Text name=\"txt-1\" value=\"$text\"></Text>\n * </View>\n * @name Labels\n * @param {string} name name of the element\n * @param {string} toName name of the element that you want to label\n * @param {single|multiple=} [choice=single] configure if you can select just one or multiple labels\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  choice: types.optional(types.enumeration([\"single\", \"multiple\"]), \"single\"),\n\n  // TODO make enum\n  selectionstyle: types.maybeNull(types.optional(types.string, \"basic\", \"border\", \"bottom\")),\n});\n\n/**\n * @param {boolean} showinline\n * @param {identifier} id\n * @param {string} pid\n */\nconst ModelAttrs = types.model({\n  id: types.optional(types.identifier, guidGenerator),\n  pid: types.optional(types.string, guidGenerator),\n  type: \"labels\",\n  showinline: types.optional(types.boolean, true),\n  children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n});\n\nconst Model = LabelMixin.props({ _type: \"labels\" })\n  .views(self => ({\n    get shouldBeUnselected() {\n      return self.choice === \"single\";\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      const names = self.getSelectedNames();\n      if (names && names.length) {\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: self.name,\n          type: self.type,\n          value: {\n            labels: names,\n          },\n        };\n      }\n    },\n  }));\n\nconst LabelsModel = types.compose(\n  \"LabelsModel\",\n  ModelAttrs,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst HtxLabels = observer(({ item }) => {\n  const style = {\n    marginTop: \"1em\",\n    marginBottom: \"1em\",\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    flexFlow: \"wrap\",\n  };\n\n  if (!item.showinline) {\n    style[\"flexDirection\"] = \"column\";\n    style[\"alignItems\"] = \"flex-start\";\n    style[\"marginTop\"] = \"0\";\n  }\n\n  return <div style={style}>{Tree.renderChildren(item)}</div>;\n});\n\nRegistry.addTag(\"labels\", LabelsModel, HtxLabels);\n\nexport { HtxLabels, LabelsModel };\n","import React, { Component } from \"react\";\nimport { Rating } from \"semantic-ui-react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\nimport Types from \"../../core/Types\";\n\n/**\n * Rating tag\n * @example\n * <View>\n *   <Text name=\"txt\" value=\"$text\"></Text>\n *   <Rating name=\"rating\" toName=\"txt\" maxRating=\"10\"></Rating>\n * </View>\n * @name Rating\n * @param {string} name of the element\n * @param {string} toName name of the element that you want to label\n * @param {integer=} [maxRating=5] maxmium rating value\n * @param {string=} [size=large] one of: mini tiny small large huge massive\n * @param {string=} [icon=star] one of: star heart\n * @param {string=} hotkey hokey\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  maxrating: types.optional(types.string, \"5\"),\n  icon: types.optional(types.string, \"star\"),\n  size: types.optional(types.string, \"large\"),\n\n  hotkey: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"rating\",\n    rating: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get isSelected() {\n      return self.rating > 0;\n    },\n  }))\n  .actions(self => ({\n    getSelectedString() {\n      return self.rating + \" star\";\n    },\n\n    getSelectedNames() {\n      return self.rating;\n    },\n\n    unselectAll() {\n      self.rating = 0;\n    },\n\n    handleRate(e, { rating, maxrating }) {\n      self.rating = rating;\n    },\n\n    increaseValue() {\n      if (self.rating >= self.maxrating) {\n        self.rating = 0;\n      } else {\n        if (self.rating > 0) {\n          self.rating = self.rating + 1;\n        } else {\n          self.rating = 1;\n        }\n      }\n    },\n\n    onHotKey() {\n      return self.increaseValue();\n    },\n\n    toStateJSON() {\n      if (self.rating) {\n        const toname = self.toname || self.name;\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: toname,\n          type: self.type,\n          value: {\n            rating: self.rating,\n          },\n        };\n      }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      if (obj.id) self.pid = obj.id;\n\n      self.rating = obj.value.rating;\n    },\n  }));\n\nconst RatingModel = types.compose(\n  \"RatingModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxRating = inject(\"store\")(\n  observer(({ item, store }) => {\n    return (\n      <div>\n        <Rating\n          icon=\"star\"\n          size={item.size}\n          defaultRating={0}\n          rating={item.rating}\n          maxRating={item.maxrating}\n          onRate={item.handleRate}\n          clearable\n        />\n        {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && (\n          <sup style={{ fontSize: \"9px\" }}>[{item.hotkey}]</sup>\n        )}\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"rating\", RatingModel, HtxRating);\n\nexport { HtxRating, RatingModel };\n","import { types, getParentOfType, destroy, getRoot } from \"mobx-state-tree\";\n\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\n\nimport { AudioPlusModel } from \"./AudioPlus\";\nimport Utils from \"../../utils\";\n\nconst Model = types\n  .model(\"AudioRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    start: types.number,\n    end: types.number,\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel))),\n    selectedregionbg: types.optional(types.string, \"rgba(0, 0, 0, 0.5)\"),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, AudioPlusModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    /**\n     * When you try to send completion\n     */\n    toStateJSON() {\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.pid,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"region\",\n          value: {\n            start: self.start,\n            end: self.end,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n\n    /**\n     * Select audio region\n     */\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n    },\n\n    /**\n     * Unselect audio region\n     */\n    unselectRegion() {\n      self.selected = false;\n      self.completion.setHighlightedNode(null);\n      if (self._ws_region.update) {\n        self._ws_region.update({ color: self.selectedregionbg });\n      }\n    },\n\n    setHighlight(val) {\n      self.highlighted = val;\n\n      if (val) {\n        self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n        self._ws_region.element.style.border = \"2px solid red\";\n      } else {\n        self._ws_region.update({ color: self.selectedregionbg });\n        self._ws_region.element.style.border = \"none\";\n      }\n    },\n\n    setNormalization(val) {\n      // console.log(val)\n    },\n\n    beforeDestroy() {\n      if (self._ws_region) self._ws_region.remove();\n    },\n\n    onClick(wavesurfer) {\n      if (!self.completion.relationMode) {\n        // Object.values(wavesurfer.regions.list).forEach(r => {\n        //   // r.update({ color: self.selectedregionbg });\n        // });\n\n        self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n      }\n\n      self.onClickRegion();\n    },\n\n    onMouseOver() {\n      if (self.completion.relationMode) {\n        self.setHighlight(true);\n        self._ws_region.element.style.cursor = \"crosshair\";\n      }\n    },\n\n    onMouseLeave() {\n      if (self.completion.relationMode) {\n        self.setHighlight(false);\n        self._ws_region.element.style.cursor = \"move\";\n      }\n    },\n\n    onUpdateEnd(wavesurfer) {\n      self.start = self._ws_region.start;\n      self.end = self._ws_region.end;\n    },\n  }));\n\nconst AudioRegionModel = types.compose(\n  \"AudioRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nexport { AudioRegionModel };\n","import React, { Fragment } from \"react\";\n\nimport { types, getRoot, getType } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Icon, Slider, Row, Col } from \"antd\";\n\nimport { cloneNode } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Waveform from \"../../components/Waveform/Waveform\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nimport Utils from \"../../utils\";\n\nimport { AudioRegionModel } from \"./AudioRegion\";\nimport AudioControls from \"./Audio/Controls\";\nimport styles from \"./AudioPlus/AudioPlus.module.scss\";\n\n/**\n * AudioPlus tag plays audio and shows its wave\n * @example\n * <View>\n *  <Labels name=\"lbl-1\" toName=\"audio-1\"><Label value=\"Hello\"></Label><Label value=\"World\"></Label></Labels>\n *  <Rating name=\"rate-1\" toName=\"audio-1\"></Rating>\n *  <AudioPlus name=\"audio-1\" value=\"$audio\"></AudioPlus>\n * </View>\n * @name AudioPlus\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {boolean} hasZoom speficy if audio has zoom functionality\n * @param {string} regionBG region color\n * @param {string} selectedRegionBG selected region background\n * @param {boolean} volume from 0 to 1\n * @param {boolean} speed from 0.5 to 3\n * @param {boolean} zoom\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, true),\n  volume: types.optional(types.boolean, true),\n  speed: types.optional(types.boolean, true),\n  regs: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model(\"AudioPlusModel\", {\n    id: types.identifier,\n    type: \"audio\",\n    _value: types.optional(types.string, \"\"),\n    playing: types.optional(types.boolean, false),\n    regions: types.array(AudioRegionModel),\n    height: types.optional(types.number, 128),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states\n        ? states.filter(s => s.isSelected && (getType(s).name === \"LabelsModel\" || getType(s).name === \"RatingModel\"))\n        : null;\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      return self.regions.map(r => r.toStateJSON());\n    },\n\n    /**\n     * Find region of audio\n     */\n    findRegion(start, end) {\n      let findedRegion = self.regions.find(r => r.start === start && r.end === end);\n      return findedRegion;\n    },\n\n    fromStateJSON(obj, fromModel) {\n      let r;\n      let m;\n\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n\n        return;\n      }\n\n      if (obj.value.labels) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      /**\n       *\n       */\n      const tree = {\n        pid: obj.id,\n        start: obj.value.start,\n        end: obj.value.end,\n        normalization: obj.normalization,\n      };\n\n      const region = self.findRegion(obj.value.start, obj.value.end);\n\n      if (fromModel) {\n        m = restoreNewsnapshot(fromModel);\n        // m.fromStateJSON(obj);\n\n        if (!region) {\n          tree.states = [m];\n          r = self.addRegion(tree);\n        } else {\n          region.states.push(m);\n        }\n      }\n\n      if (self._ws) {\n        self._ws.addRegion({\n          start: r.start,\n          end: r.end,\n        });\n      }\n\n      return r;\n    },\n\n    setRangeValue(val) {\n      self.rangeValue = val;\n    },\n\n    setPlaybackRate(val) {\n      self.playBackRate = val;\n    },\n\n    addRegion(ws_region) {\n      const states = self.activeStates();\n\n      const clonedStates = states\n        ? states.map(s => {\n            return cloneNode(s);\n          })\n        : null;\n\n      const find_r = self.findRegion(ws_region.start, ws_region.end);\n\n      if (self.findRegion(ws_region.start, ws_region.end)) {\n        find_r._ws_region = ws_region;\n        return find_r;\n      }\n\n      const bgColor =\n        states && states[0] ? Utils.Colors.convertToRGBA(states[0].getSelectedColor(), 0.3) : self.selectedregionbg;\n\n      const r = AudioRegionModel.create({\n        id: ws_region.id ? ws_region.id : guidGenerator(),\n        pid: ws_region.pid ? ws_region.pid : guidGenerator(),\n        start: ws_region.start,\n        end: ws_region.end,\n        regionbg: self.regionbg,\n        selectedregionbg: bgColor,\n        states: clonedStates,\n      });\n\n      r._ws_region = ws_region;\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      states && states.forEach(s => s.unselectAll());\n\n      return r;\n    },\n\n    /**\n     * Play and stop\n     */\n    handlePlay() {\n      self.playing = !self.playing;\n    },\n\n    onLoad(ws) {\n      self._ws = ws;\n\n      self.regions.forEach(obj => {\n        self._ws.addRegion({\n          start: obj.start,\n          end: obj.end,\n        });\n      });\n    },\n\n    wsCreated(ws) {\n      self._ws = ws;\n    },\n  }));\n\nconst AudioPlusModel = types.compose(\n  \"AudioPlusModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxAudioView = observer(({ store, item }) => {\n  if (!item._value) return null;\n\n  return (\n    <div>\n      <Waveform\n        src={item._value}\n        selectRegion={item.selectRegion}\n        handlePlay={item.handlePlay}\n        onCreate={item.wsCreated}\n        addRegion={item.addRegion}\n        onLoad={item.onLoad}\n        speed={item.speed}\n        zoom={item.zoom}\n        volume={item.volume}\n        regions={item.regs}\n        height={item.height}\n      />\n\n      <AudioControls item={item} />\n    </div>\n  );\n});\n\nconst HtxAudioPlus = inject(\"store\")(observer(HtxAudioView));\n\nRegistry.addTag(\"audioplus\", AudioPlusModel, HtxAudioPlus);\n\nexport { AudioRegionModel, AudioPlusModel, HtxAudioPlus };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Button, Icon } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { RectRegionModel } from \"../object/RectRegion\";\n\n/**\n * Rectangle tag\n * Rectangle is used to add rectangle (BBox) to an image\n * @example\n * <View>\n *   <Rectangle name=\"rect-1\" toName=\"img-1\"></Rectangle>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name Rectangle\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of rectangle\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of the stroke\n * @param {boolean=} [canRotate=true] show or hide rotation handle\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.6\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokewidth: types.optional(types.string, \"1\"),\n  strokecolor: types.optional(types.string, \"#f48a42\"),\n\n  canrotate: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"rectangle\",\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    fromStateJSON(obj) {\n      // const rect = self._createRect();\n      // rect.setPosition(obj.value.x, obj.value.y, obj.value.width, obj.value.height, obj.value.rotation);\n      // return rect;\n    },\n  }));\n\nconst RectangleModel = types.compose(\n  \"RectangleModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = () => {\n  return null;\n};\n\nRegistry.addTag(\"rectangle\", RectangleModel, HtxView);\n\nexport { HtxView, RectangleModel };\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\n\nimport { types } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { RectangleModel } from \"./Rectangle\";\nimport LabelMixin from \"../mixins/LabelMixin\";\n\n/**\n * RectangleLabels tag creates labeled rectangles\n * Used only for Image\n * @example\n * <View>\n *   <RectangleLabels name=\"labels\" toName=\"image\">\n *     <Label value=\"Person\"></Label>\n *     <Label value=\"Animal\"></Label>\n *   </RectangleLabels>\n *   <Image name=\"image\" value=\"$image\"></Image>\n * </View>\n * @name RectangleLabels\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of rectangle\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {boolean=} [canRotate=true] show or hide rotation handle\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n});\n\nconst ModelAttrs = types.model(\"RectangleLabelsModel\", {\n  id: types.optional(types.identifier, guidGenerator),\n  pid: types.optional(types.string, guidGenerator),\n  type: \"rectanglelabels\",\n  children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n});\n\nconst Model = LabelMixin.props({ _type: \"rectanglelabels\" }).views(self => ({\n  get shouldBeUnselected() {\n    return self.choice === \"single\";\n  },\n}));\n\nconst Composition = types.compose(\n  LabelsModel,\n  ModelAttrs,\n  RectangleModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst RectangleLabelsModel = types.compose(\n  \"RectangleLabelsModel\",\n  Composition,\n);\n\nconst HtxRectangleLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n});\n\nRegistry.addTag(\"rectanglelabels\", RectangleLabelsModel, HtxRectangleLabels);\n\nexport { HtxRectangleLabels, RectangleLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Rect, Text, Transformer } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RectangleLabelsModel } from \"../control/RectangleLabels\";\n\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\nimport Utils from \"../../utils\";\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"rectangleregion\",\n\n    x: types.number,\n    y: types.number,\n\n    _start_x: types.optional(types.number, 0),\n    _start_y: types.optional(types.number, 0),\n\n    width: types.number,\n    height: types.number,\n\n    scaleX: types.optional(types.number, 1),\n    scaleY: types.optional(types.number, 1),\n\n    rotation: types.optional(types.number, 0),\n\n    opacity: types.number,\n\n    fill: types.optional(types.boolean, true),\n    fillcolor: types.optional(types.string, \"blue\"),\n\n    strokecolor: types.optional(types.string, \"blue\"),\n    strokewidth: types.number,\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, RectangleLabelsModel))),\n\n    wp: types.maybeNull(types.number),\n    hp: types.maybeNull(types.number),\n\n    sw: types.maybeNull(types.number),\n    sh: types.maybeNull(types.number),\n\n    coordstype: types.optional(types.enumeration([\"px\", \"perc\"]), \"px\"),\n\n    supportsTransform: true,\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    afterCreate() {\n      self._start_x = self.x;\n      self._start_y = self.y;\n    },\n\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    coordsInside(x, y) {\n      // check if x and y are inside the rectangle\n      const rx = self.x;\n      const ry = self.y;\n      const rw = self.width * (self.scaleX || 1);\n      const rh = self.height * (self.scaleY || 1);\n\n      if (x > rx && x < rx + rw && y > ry && y < ry + rh) return true;\n\n      return false;\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    setPosition(x, y, width, height, rotation) {\n      self.x = x;\n      self.y = y;\n      self.width = width;\n      self.height = height;\n\n      self.rotation = rotation;\n    },\n\n    setScale(x, y) {\n      self.scaleX = x;\n      self.scaleY = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp, sw, sh) {\n      self.wp = wp;\n      self.hp = hp;\n\n      self.sw = sw;\n      self.sh = sh;\n\n      if (self.coordstype == \"perc\") {\n        self.x = (sw * self.x) / 100;\n        self.y = (sh * self.y) / 100;\n        self.width = (sw * self.width) / 100;\n        self.height = (sh * self.height) / 100;\n        self.coordstype = \"px\";\n      }\n    },\n\n    toStateJSON() {\n      const parent = self.parent;\n      let fromEl = parent.states()[0];\n\n      if (parent.states().length > 1) {\n        parent.states().forEach(state => {\n          if (state.type === \"rectanglelabels\") {\n            fromEl = state;\n          }\n        });\n      }\n\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: fromEl.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"rectangle\",\n          value: {\n            x: (self.x * 100) / self.parent.stageWidth,\n            y: (self.y * 100) / self.parent.stageHeight,\n            width: (self.width * (self.scaleX || 1) * 100) / self.parent.stageWidth, //  * (self.scaleX || 1)\n            height: (self.height * (self.scaleY || 1) * 100) / self.parent.stageHeight,\n            rotation: self.rotation,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst RectRegionModel = types.compose(\n  \"RectRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxRectangleView = ({ store, item }) => {\n  return (\n    <Fragment>\n      <Rect\n        x={item.x}\n        y={item.y}\n        width={item.width}\n        height={item.height}\n        fill={item.fill ? Utils.Colors.convertToRGBA(item.fillcolor, 0.4) : null}\n        stroke={item.strokecolor}\n        strokeWidth={item.strokewidth}\n        strokeScaleEnabled={false}\n        shadowBlur={0}\n        scaleX={item.scaleX}\n        scaleY={item.scaleY}\n        opacity={item.opacity}\n        name={item.id}\n        onTransformEnd={e => {\n          const t = e.target;\n\n          item.setPosition(\n            t.getAttr(\"x\"),\n            t.getAttr(\"y\"),\n            t.getAttr(\"width\"),\n            t.getAttr(\"height\"),\n            t.getAttr(\"rotation\"),\n          );\n          item.setScale(t.getAttr(\"scaleX\"), t.getAttr(\"scaleY\"));\n        }}\n        onDragEnd={e => {\n          const t = e.target;\n\n          item.setPosition(\n            t.getAttr(\"x\"),\n            t.getAttr(\"y\"),\n            t.getAttr(\"width\"),\n            t.getAttr(\"height\"),\n            t.getAttr(\"rotation\"),\n          );\n          item.setScale(t.getAttr(\"scaleX\"), t.getAttr(\"scaleY\"));\n        }}\n        dragBoundFunc={function(pos) {\n          let { x, y } = pos;\n\n          if (x < 0) x = 0;\n          if (y < 0) y = 0;\n\n          return {\n            x: x,\n            y: y,\n          };\n        }}\n        onMouseOver={e => {\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(true);\n            stage.container().style.cursor = \"crosshair\";\n          } else {\n            stage.container().style.cursor = \"pointer\";\n          }\n        }}\n        onMouseOut={e => {\n          const stage = item.parent._stageRef;\n          stage.container().style.cursor = \"default\";\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(false);\n          }\n        }}\n        onClick={e => {\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            stage.container().style.cursor = \"default\";\n          }\n\n          item.setHighlight(false);\n          item.onClickRegion();\n        }}\n        draggable\n      />\n    </Fragment>\n  );\n};\n\nconst HtxRectangle = inject(\"store\")(observer(HtxRectangleView));\n\nRegistry.addTag(\"rectangleregion\", RectRegionModel, HtxRectangle);\n\nexport { RectRegionModel, HtxRectangle };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot, getParent } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Rect, Text, Transformer, Line, Circle } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { Dropdown, Input } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst PolygonPoint = types\n  .model({\n    init_x: types.optional(types.number, 0),\n    init_y: types.optional(types.number, 0),\n\n    x: types.number,\n    y: types.number,\n\n    index: types.number,\n\n    style: types.string,\n    size: types.string,\n    // isMouseOverStartPoint: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    get parent() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    afterCreate() {\n      self.init_x = self.x;\n      self.init_y = self.y;\n    },\n\n    movePoint(x, y) {\n      self.x = self.init_x + x;\n      self.y = self.init_y + y;\n    },\n\n    _movePoint(x, y) {\n      self.init_x = x;\n      self.init_y = y;\n\n      self.x = x;\n      self.y = y;\n    },\n\n    closeStartPoint(ev) {\n      if (self.parent.mouseOverStartPoint) self.parent.closePoly();\n    },\n\n    handleMouseOverStartPoint(ev) {\n      const stage = self.parent.parent._stageRef;\n      stage.container().style.cursor = \"crosshair\";\n\n      if (self.parent.closed || self.parent.points.length < 3) return;\n\n      const t = ev.target;\n\n      if (self.style == \"rectangle\") {\n        t.setX(t.x() - t.width() / 2);\n        t.setY(t.y() - t.height() / 2);\n      }\n\n      const scaleMap = {\n        small: 3,\n        medium: 2,\n        large: 2,\n      };\n\n      const scale = scaleMap[self.size];\n\n      t.scale({ x: scale, y: scale });\n\n      self.parent.setMouseOverStartPoint(true);\n    },\n\n    handleMouseOutStartPoint(ev) {\n      const t = ev.target;\n\n      const stage = self.parent.parent._stageRef;\n      stage.container().style.cursor = \"default\";\n\n      if (self.style == \"rectangle\") {\n        t.setX(t.x() + t.width() / 2);\n        t.setY(t.y() + t.height() / 2);\n      }\n\n      t.scale({ x: 1, y: 1 });\n\n      self.parent.setMouseOverStartPoint(false);\n    },\n  }));\n\nconst PolygonPointView = observer(({ item, name }) => {\n  const sizes = {\n    small: 4,\n    medium: 8,\n    large: 12,\n  };\n\n  const stroke = {\n    small: 1,\n    medium: 2,\n    large: 3,\n  };\n\n  const w = sizes[item.size];\n\n  const startPointAttr =\n    item.index === 0\n      ? {\n          hitStrokeWidth: 12,\n          onMouseOver: item.handleMouseOverStartPoint,\n          onMouseOut: item.handleMouseOutStartPoint,\n          onClick: item.closeStartPoint,\n        }\n      : null;\n\n  const isOver = item.parent.mouseOverStartPoint;\n\n  const dragOpts = {\n    onDragStart: e => {\n      //handleDragStartPoint\n    },\n\n    onDragMove: e => {\n      item._movePoint(e.target.attrs.x, e.target.attrs.y);\n    },\n\n    onDragEnd: e => {\n      // handleDragEndPoint\n    },\n\n    onMouseOver: e => {\n      const stage = item.parent.parent._stageRef;\n      stage.container().style.cursor = \"crosshair\";\n    },\n\n    onMouseOut: e => {\n      const stage = item.parent.parent._stageRef;\n      stage.container().style.cursor = \"default\";\n    },\n  };\n\n  if (item.style == \"circle\") {\n    return (\n      <Circle\n        key={name}\n        name={name}\n        x={item.x}\n        y={item.y}\n        radius={w}\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={stroke[item.size]}\n        dragOnTop={false}\n        onClick={ev => {\n          if (item.parent.mouseOverStartPoint) {\n            item.parent.closePoly();\n          }\n        }}\n        {...dragOpts}\n        {...startPointAttr}\n        draggable\n      />\n    );\n  } else {\n    return (\n      <Rect\n        name={name}\n        key={name}\n        x={item.x - w / 2}\n        y={item.y - w / 2}\n        width={w}\n        height={w}\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={stroke[item.size]}\n        dragOnTop={false}\n        {...dragOpts}\n        {...startPointAttr}\n        draggable\n      />\n    );\n  }\n});\n\nexport { PolygonPoint, PolygonPointView };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Button, Icon } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { PolygonRegionModel } from \"../object/PolygonRegion\";\n\n/**\n * Polygon tag\n * Polygon is used to add polygons to an image\n * @example\n * <View>\n *   <Polygon name=\"rect-1\" toName=\"img-1\" value=\"Add Rectangle\"></Polygon>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name Polygon\n * @param {string} name name of tag\n * @param {string} toname name of image to label\n * @param {number=} [opacity=0.6] opacity of polygon\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {small|medium|large=} [pointSize=medium] size of polygon handle points\n * @param {rectangle|circle=} [pointStyle=rectangle] style of points\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.6\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokewidth: types.optional(types.string, \"1\"),\n  strokecolor: types.optional(types.string, \"#f48a42\"),\n\n  pointsize: types.optional(types.string, \"medium\"),\n  pointstyle: types.optional(types.string, \"rectangle\"),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"polygon\",\n\n    // regions: types.array(RectRegionModel),\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states ? states.filter(c => c.isSelected === true) : null;\n    },\n  }))\n  .actions(self => ({}));\n\nconst PolygonModel = types.compose(\n  \"PolygonModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = inject(\"store\")(\n  observer(({ store, item }) => {\n    return null;\n  }),\n);\n\nRegistry.addTag(\"polygon\", PolygonModel, HtxView);\n\nexport { HtxView, PolygonModel };\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\n\nimport { types } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Tree from \"../../core/Tree\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { PolygonModel } from \"./Polygon\";\n\n/**\n * PolygonLabels tag, create labeled polygons\n * @example\n * <View>\n *   <Image name=\"image\" value=\"$image\"></Image>\n *   <PolygonLabels name=\"lables\" toName=\"image\">\n *     <Label value=\"Car\"></Label>\n *     <Label value=\"Sign\"></Label>\n *   </PolygonLabels>\n * </View>\n * @name PolygonLabels\n * @param {string} name name of tag\n * @param {string} toname name of image to label\n * @param {number=} [opacity=0.6] opacity of polygon\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {small|medium|large=} [pointSize=medium] size of polygon handle points\n * @param {rectangle|circle=} [pointStyle=rectangle] style of points\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model(\"PolygonLabelsModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"polygonlabels\",\n    children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n  })\n  .actions(self => ({\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.polygonlabels) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.polygonlabels.forEach(l => {\n        const label = self.findLabel(l);\n        if (!label) throw new Error(\"No label \" + obj.value.label);\n\n        label.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(\n  LabelsModel,\n  PolygonModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\nconst PolygonLabelsModel = types.compose(\n  \"PolygonLabelsModel\",\n  Composition,\n);\n\nconst HtxPolygonLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n});\n\nRegistry.addTag(\"polygonlabels\", PolygonLabelsModel, HtxPolygonLabels);\n\nexport { HtxPolygonLabels, PolygonLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot, getParent } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Circle, Shape, Label, Stage, Layer, Rect, Text, Transformer, Group, Line } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { Dropdown, Input } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport { PolygonPoint, PolygonPointView } from \"./PolygonPoint\";\n\nimport { PolygonLabelsModel } from \"../control/PolygonLabels\";\n\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"polygonregion\",\n\n    opacity: types.number,\n    fillcolor: types.maybeNull(types.string),\n\n    strokewidth: types.number,\n    strokecolor: types.string,\n\n    pointsize: types.string,\n    pointstyle: types.string,\n\n    closed: types.optional(types.boolean, false),\n\n    points: types.array(PolygonPoint, []),\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, PolygonLabelsModel))),\n\n    mouseOverStartPoint: types.optional(types.boolean, false),\n\n    coordstype: types.optional(types.enumeration([\"px\", \"perc\"]), \"px\"),\n\n    fromName: types.maybeNull(types.string),\n\n    wp: types.maybeNull(types.number),\n    hp: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    get isCW() {},\n\n    linePoints() {\n      const p = self.points.map(p => [p[\"x\"], p[\"y\"]]);\n\n      const flatten = arr => {\n        return arr.reduce(function(flat, toFlatten) {\n          return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n        }, []);\n      };\n\n      return flatten(p);\n    },\n  }))\n  .actions(self => ({\n    setMouseOverStartPoint(val) {\n      self.mouseOverStartPoint = val;\n    },\n\n    findPolyOutline() {\n      const { points } = self;\n      const left = points.reduce((acc, loc) => (acc.x < loc.x ? acc : loc));\n      const right = points.reduce((acc, loc) => (acc.x > loc.x ? acc : loc));\n\n      const top = points.reduce((acc, loc) => (acc.y < loc.y ? acc : loc));\n      const bottom = points.reduce((acc, loc) => (acc.y > loc.y ? acc : loc));\n\n      return {\n        x: left.x,\n        y: top.y,\n        width: right.x - left.x,\n        height: bottom.y - top.y,\n      };\n    },\n\n    coordsInside(x, y) {\n      const inside = false;\n      const vs = self.points;\n\n      for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n        var xi = vs[i][0],\n          yi = vs[i][1];\n        var xj = vs[j][0],\n          yj = vs[j][1];\n\n        var intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n\n        if (intersect) inside = !inside;\n      }\n\n      return inside;\n    },\n\n    handleMouseMove({ e, flattenedPoints }) {\n      const { offsetX: a, offsetY: b } = e.evt;\n      const point = getAnchorPoint({ flattenedPoints, a, b });\n\n      let x = point[0];\n      let y = point[1];\n\n      if (self.parent.zoomScale != 1) {\n        x = x * self.parent.zoomScale;\n        y = y * self.parent.zoomScale;\n      }\n\n      const group = e.currentTarget;\n      const layer = e.currentTarget.getLayer();\n\n      moveHoverAnchor({ point: [x, y], group, layer });\n    },\n\n    handleMouseLeave({ e }) {\n      removeHoverAnchor({ layer: e.currentTarget.getLayer() });\n    },\n\n    handleLineClick({ e, flattenedPoints, insertIdx }) {\n      e.cancelBubble = true;\n\n      if (!self.closed) return;\n\n      removeHoverAnchor({ layer: e.currentTarget.getLayer() });\n\n      const { offsetX: a, offsetY: b } = e.evt;\n      const point = getAnchorPoint({ flattenedPoints, a, b });\n\n      self.insertPoint(insertIdx, point[0], point[1]);\n    },\n\n    addPoint(x, y) {\n      if (self.closed) return;\n      self._addPoint(x, y);\n    },\n\n    insertPoint(insertIdx, x, y) {\n      const p = { x: x, y: y, size: self.pointsize, style: self.pointstyle, index: self.points.length };\n      self.points.splice(insertIdx, 0, p);\n    },\n\n    _addPoint(x, y) {\n      const index = self.points.length;\n      self.points.push({ x: x, y: y, size: self.pointsize, style: self.pointstyle, index: index });\n    },\n\n    closePoly() {\n      self.closed = true;\n      self.selectRegion();\n    },\n\n    canClose(x, y) {\n      if (self.points.length < 2) return false;\n\n      const p1 = self.points[0];\n      const p2 = { x: x, y: y };\n\n      var r = 50;\n      var dist_points = (p1[\"x\"] - p2[\"x\"]) * (p1[\"x\"] - p2[\"x\"]) + (p1[\"y\"] - p2[\"y\"]) * (p2[\"y\"] - p2[\"y\"]);\n\n      if (dist_points < r) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    setPosition(x, y, width, height, rotation) {\n      self.x = x;\n      self.y = y;\n      self.width = width;\n      self.height = height;\n\n      self.rotation = rotation;\n    },\n\n    setScale(x, y) {\n      self.scaleX = x;\n      self.scaleY = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp, sw, sh) {\n      self.wp = wp;\n      self.hp = hp;\n\n      if (self.coordstype == \"perc\") {\n        self.points.map(p => {\n          const x = (sw * p.x) / 100;\n          const y = (sh * p.y) / 100;\n          self.coordstype = \"px\";\n          p._movePoint(x, y);\n        });\n      }\n    },\n\n    toStateJSON() {\n      const { naturalWidth, naturalHeight, stageWidth, stageHeight } = self.parent;\n\n      const perc_w = (stageWidth * 100) / naturalWidth;\n      const perc_h = (stageHeight * 100) / naturalHeight;\n\n      const perc_points = self.points.map(p => {\n        const orig_w = (p.x * 100) / perc_w;\n        const res_w = (orig_w * 100) / naturalWidth;\n\n        const orig_h = (p.y * 100) / perc_h;\n        const res_h = (orig_h * 100) / naturalHeight;\n\n        return [res_w, res_h];\n      });\n\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"polygon\",\n          value: {\n            points: perc_points,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst PolygonRegionModel = types.compose(\n  \"PolygonRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nfunction getAnchorPoint({ flattenedPoints, a, b }) {\n  const [x1, y1, x2, y2] = flattenedPoints;\n  const y =\n    ((x2 - x1) * (x2 * y1 - x1 * y2) + (x2 - x1) * (y2 - y1) * a + (y2 - y1) * (y2 - y1) * b) /\n    ((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n  const x =\n    a -\n    ((y2 - y1) * (x2 * y1 - x1 * y2 + a * (y2 - y1) - b * (x2 - x1))) / ((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n  return [x, y];\n}\n\nfunction getFlattenedPoints(points) {\n  const p = points.map(p => [p[\"x\"], p[\"y\"]]);\n  return p.reduce(function(flattenedPoints, point) {\n    return flattenedPoints.concat(point);\n  }, []);\n}\n\nfunction getRectPoints(x, y, width, height) {\n  const points = [[x, y], [x, y + height], [x + width, y + height], [x + width, y]];\n  return points;\n}\n\nfunction getMinDist({ points, point, idx }) {\n  return points.reduce(function(minDist, p, i) {\n    if (i === idx) return minDist;\n    const dist = Math.sqrt(Math.pow(point[0] - p[0], 2) + Math.pow(point[1] - p[1], 2));\n    return dist < minDist ? dist : minDist;\n  }, Infinity);\n}\n\nfunction getHoverAnchor({ layer }) {\n  return layer.findOne(\".hoverAnchor\");\n}\n\nfunction createHoverAnchor({ point, group, layer }) {\n  const hoverAnchor = new window.Konva.Circle({\n    name: \"hoverAnchor\",\n    x: point[0],\n    y: point[1],\n    stroke: \"#666\",\n    fill: \"#ddd\",\n    strokeWidth: 2,\n    radius: 5,\n  });\n\n  group.add(hoverAnchor);\n  layer.draw();\n  return hoverAnchor;\n}\n\nfunction moveHoverAnchor({ point, group, layer }) {\n  const hoverAnchor = getHoverAnchor({ layer }) || createHoverAnchor({ point, group, layer });\n  hoverAnchor.to({ x: point[0], y: point[1], duration: 0 });\n}\n\nfunction removeHoverAnchor({ layer }) {\n  const hoverAnchor = getHoverAnchor({ layer });\n  if (!hoverAnchor) return;\n  hoverAnchor.destroy();\n  layer.draw();\n}\n\nconst HtxPolygonView = ({ store, item }) => {\n  function renderLine({ points, idx1, idx2 }) {\n    const name = `border_${idx1}_${idx2}`;\n    const insertIdx = idx1 + 1; // idx1 + 1 or idx2\n    const flattenedPoints = getFlattenedPoints([points[idx1], points[idx2]]);\n    return (\n      <Group\n        key={name}\n        name={name}\n        onClick={e => item.handleLineClick({ e, flattenedPoints, insertIdx })}\n        onMouseMove={e => {\n          if (!item.closed) return;\n\n          item.handleMouseMove({ e, flattenedPoints });\n        }}\n        onMouseLeave={e => item.handleMouseLeave({ e })}\n      >\n        <Line\n          points={flattenedPoints}\n          stroke={item.strokecolor}\n          opacity={item.opacity}\n          lineJoin=\"bevel\"\n          strokeWidth={item.strokewidth}\n        />\n      </Group>\n    );\n  }\n\n  function renderLines(points) {\n    const name = \"borders\";\n    return (\n      <Group key={name} name={name}>\n        {points.map((p, idx) => {\n          const idx1 = idx;\n          const idx2 = idx === points.length - 1 ? 0 : idx + 1;\n          return renderLine({ points, idx1, idx2 });\n        })}\n      </Group>\n    );\n  }\n\n  function renderPoly(points) {\n    const name = \"poly\";\n    return (\n      <Group key={name} name={name}>\n        <Line\n          lineJoin=\"bevel\"\n          points={getFlattenedPoints(points)}\n          fill={item.strokecolor}\n          closed={true}\n          opacity={0.2}\n        />\n      </Group>\n    );\n  }\n\n  function renderCircle({ points, idx }) {\n    const name = `anchor_${points.length}_${idx}`;\n    const point = points[idx];\n\n    if (!item.closed || (item.closed && item.selected)) {\n      return <PolygonPointView item={point} name={name} />;\n    }\n  }\n\n  function renderCircles(points) {\n    const name = \"anchors\";\n    return (\n      <Group key={name} name={name}>\n        {points.map((p, idx) => renderCircle({ points, idx }))}\n      </Group>\n    );\n  }\n\n  return (\n    <Group\n      onDragStart={e => {\n        item.completion.setDragMode(true);\n      }}\n      dragBoundFunc={function(pos, ev) {\n        let { x, y } = pos;\n        /* if (x < 0) x = 0; */\n        /* if (y < 0) y = 0; */\n        const r = item.parent.stageWidth - this.getAttr(\"width\");\n        const b = item.parent.stageHeight - this.getAttr(\"height\");\n\n        if (x > r) x = r;\n        if (y > b) y = b;\n\n        item.points.forEach(p => {\n          p.movePoint(x, y);\n        });\n\n        return { x: 0, y: 0 };\n      }}\n      onDragEnd={e => {\n        item.completion.setDragMode(false);\n\n        if (!item.closed) item.closePoly();\n\n        item.parent.setActivePolygon(null);\n\n        item.points.forEach(p => {\n          p.afterCreate();\n        });\n      }}\n      onMouseOver={e => {\n        const stage = item.parent._stageRef;\n\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(true);\n          stage.container().style.cursor = \"crosshair\";\n        } else {\n          stage.container().style.cursor = \"pointer\";\n        }\n      }}\n      onMouseOut={e => {\n        const stage = item.parent._stageRef;\n        stage.container().style.cursor = \"default\";\n\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(false);\n        }\n      }}\n      onClick={e => {\n        e.cancelBubble = true;\n\n        if (!item.closed) return;\n\n        const stage = item.parent._stageRef;\n\n        if (store.completionStore.selected.relationMode) {\n          stage.container().style.cursor = \"default\";\n        }\n\n        item.setHighlight(false);\n        item.onClickRegion();\n      }}\n      draggable\n    >\n      {item.mouseOverStartPoint}\n\n      {renderPoly(item.points)}\n      {renderLines(item.points)}\n      {renderCircles(item.points)}\n    </Group>\n  );\n};\n\nconst HtxPolygon = inject(\"store\")(observer(HtxPolygonView));\n\nRegistry.addTag(\"polygonregion\", PolygonRegionModel, HtxPolygon);\n\nexport { PolygonRegionModel, HtxPolygon };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Button, Icon } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { KeyPointRegionModel } from \"../object/KeyPointRegion\";\n\n/**\n * KeyPoint tag\n * KeyPoint is used to add a keypoint to an image\n * @example\n * <View>\n *   <KeyPoint name=\"kp-1\" toName=\"img-1\"></KeyPoint>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name KeyPoint\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of keypoint\n * @param {string=} fillColor keypoint fill color, default is transparent\n * @param {number=} [strokeWidth=1] width of the stroke\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.9\"),\n  fillcolor: types.optional(types.string, \"#8bad00\"),\n\n  strokewidth: types.optional(types.string, \"1\"),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"keypoint\",\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    fromStateJSON(obj) {},\n  }));\n\nconst KeyPointModel = types.compose(\n  \"KeyPointModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = () => {\n  return null;\n};\n\nRegistry.addTag(\"keypoint\", KeyPointModel, HtxView);\n\nexport { HtxView, KeyPointModel };\n","import React, { Component } from \"react\";\n\nimport { observer } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { KeyPointModel } from \"./KeyPoint\";\n\n/**\n * KeyPointLabels tag\n * KeyPointLabels add labeled keypoints\n * @example\n * <View>\n *   <KeyPointLabels name=\"kp-1\" toName=\"img-1\">\n *     <Label value=\"Face\"></Label>\n *     <Label value=\"Nose\"></Label>\n *   </KeyPointLabels>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name KeyPointLabels\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of keypoint\n * @param {string=} fillColor keypoint fill color, default is transparent\n * @param {number=} [strokeWidth=1] width of the stroke\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.9\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokewidth: types.optional(types.string, \"1\"),\n});\n\nconst Model = types\n  .model(\"KeyPointLabelesModel\", {\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n    type: \"keypointlabels\",\n    children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.keypointlabels) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.keypointlabels.forEach(l => {\n        const label = self.findLabel(l);\n\n        if (!label) throw new Error(\"No label \" + obj.value.label);\n\n        label.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(\n  LabelsModel,\n  KeyPointModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst KeyPointLabelsModel = types.compose(\n  \"KeyPointLabelsModel\",\n  Composition,\n);\n\nconst HtxKeyPointLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n});\n\nRegistry.addTag(\"keypointlabels\", KeyPointLabelsModel, HtxKeyPointLabels);\n\nexport { HtxKeyPointLabels, KeyPointLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Circle, Text } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { KeyPointLabelsModel } from \"../control/KeyPointLabels\";\n\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"keypointregion\",\n\n    x: types.number,\n    y: types.number,\n    width: types.number,\n\n    opacity: types.number,\n    fillcolor: types.maybeNull(types.string),\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, KeyPointLabelsModel))),\n\n    sw: types.maybeNull(types.number),\n    sh: types.maybeNull(types.number),\n\n    coordstype: types.optional(types.enumeration([\"px\", \"perc\"]), \"px\"),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    setPosition(x, y) {\n      self.x = x;\n      self.y = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp, sw, sh) {\n      // self.wp = wp;\n      // self.hp = hp;\n\n      self.sw = sw;\n      self.sh = sh;\n\n      if (self.coordstype == \"perc\") {\n        self.x = (sw * self.x) / 100;\n        self.y = (sh * self.y) / 100;\n        self.width = (sw * self.width) / 100;\n        self.coordstype = \"px\";\n      }\n    },\n\n    toStateJSON() {\n      const parent = self.parent;\n      const from = parent.states()[0];\n\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: from.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"keypoint\",\n          value: {\n            x: (self.x * 100) / self.parent.stageWidth,\n            y: (self.y * 100) / self.parent.stageHeight,\n            width: (self.width * 100) / self.parent.stageWidth, //  * (self.scaleX || 1)\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst KeyPointRegionModel = types.compose(\n  \"KeyPointRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxKeyPointView = ({ store, item }) => {\n  const self = this;\n  const { name, wwidth, wheight, onChangedPosition } = item;\n\n  const wp = item.wp || item.parent.stageWidth / item.parent.naturalWidth;\n  const hp = item.hp || item.parent.stageHeight / item.parent.naturalHeight;\n\n  const x = item.x;\n  const y = item.y;\n  const w = item.width;\n\n  const props = {};\n\n  props[\"opacity\"] = item.opacity;\n\n  if (item.fillcolor) {\n    props[\"fill\"] = item.fillcolor;\n  }\n\n  props[\"stroke\"] = item.strokecolor;\n  props[\"strokeWidth\"] = item.strokewidth;\n  props[\"strokeScaleEnabled\"] = false;\n  props[\"shadowBlur\"] = 0;\n\n  if (item.highlighted) {\n    props[\"stroke\"] = \"#ff0000\";\n  }\n\n  return (\n    <Fragment>\n      <Circle\n        x={x}\n        y={y}\n        radius={item.width}\n        name={item.id}\n        onDragEnd={e => {\n          const t = e.target;\n          item.setPosition(t.getAttr(\"x\"), t.getAttr(\"y\"));\n        }}\n        dragBoundFunc={function(pos) {\n          let { x, y } = pos;\n\n          if (x < 0) x = 0;\n          if (y < 0) y = 0;\n\n          return {\n            x: x,\n            y: y,\n          };\n        }}\n        onMouseOver={e => {\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(true);\n            stage.container().style.cursor = \"crosshair\";\n          } else {\n            stage.container().style.cursor = \"pointer\";\n          }\n        }}\n        onMouseOut={e => {\n          const stage = item.parent._stageRef;\n          stage.container().style.cursor = \"default\";\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(false);\n          }\n        }}\n        onClick={e => {\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            stage.container().style.cursor = \"default\";\n          }\n\n          item.setHighlight(false);\n          item.onClickRegion();\n        }}\n        {...props}\n        draggable\n      />\n    </Fragment>\n  );\n};\n\nconst HtxKeyPoint = inject(\"store\")(observer(HtxKeyPointView));\n\nRegistry.addTag(\"keypointregion\", KeyPointRegionModel, HtxKeyPoint);\n\nexport { KeyPointRegionModel, HtxKeyPoint };\n","import React, { Component } from \"react\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { detach, types, getType, getParentOfType, destroy, getRoot, isValidReference } from \"mobx-state-tree\";\n\nimport { Stage, Layer, Rect, Text, Group, Line, Image, Transformer } from \"react-konva\";\nimport { Icon } from \"antd\";\n\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, cloneNode, restoreNewsnapshot } from \"../../core/Helpers\";\nimport Tree from \"../../core/Tree\";\n\nimport { RectRegionModel } from \"./RectRegion\";\nimport { PolygonRegionModel } from \"./PolygonRegion\";\nimport { KeyPointRegionModel } from \"./KeyPointRegion\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Image tag shows an image on the page\n * @example\n * <View>\n *   <Image value=\"$url\"></Image>\n * </View>\n * @example\n * <View>\n *   <Image value=\"https://imgflip.com/s/meme/Leonardo-Dicaprio-Cheers.jpg\" width=\"100%\" maxWidth=\"750px\"></Image>\n * </View>\n * @name Image\n * @param {string} name name of the element\n * @param {string} value value\n * @param {string=} [width=100%] image width\n * @param {string=} [maxWidth=750px] image maximum width\n * @param {boolean=} zoom enable zooming an image by the mouse wheel\n * @param {boolean=} negativeZoom enable zooming out an image\n * @param {float=} [zoomBy=1.1] scale factor\n * @param {boolean=} showMousePos show mouse position coordinates under an image\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  resize: types.maybeNull(types.string),\n  width: types.optional(types.string, \"100%\"),\n  maxwidth: types.optional(types.string, \"750px\"),\n  zoom: types.optional(types.boolean, false),\n\n  grid: types.optional(types.boolean, false),\n  gridSize: types.optional(types.number, 30),\n  gridColor: types.optional(types.string, \"#EEEEF4\"),\n  // rulers: types.optional(types.boolean, true),\n\n  negativezoom: types.optional(types.boolean, false),\n  zoomby: types.optional(types.string, \"1.1\"),\n  showmousepos: types.optional(types.boolean, false),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"image\",\n    _value: types.optional(types.string, \"\"),\n    sizeUpdated: types.optional(types.boolean, false),\n    stageWidth: types.optional(types.integer, 1),\n    stageHeight: types.optional(types.integer, 1),\n    naturalWidth: types.optional(types.integer, 1),\n    naturalHeight: types.optional(types.integer, 1),\n\n    zoomScale: types.optional(types.number, 1),\n    zoomPosX: types.maybeNull(types.number),\n    zoomPosY: types.maybeNull(types.number),\n\n    cursorPositionX: types.optional(types.number, 0),\n    cursorPositionY: types.optional(types.number, 0),\n\n    mode: types.optional(types.enumeration([\"drawing\", \"viewing\"]), \"viewing\"),\n\n    posStartX: types.optional(types.number, 0),\n    posStartY: types.optional(types.number, 0),\n\n    posNowX: types.optional(types.number, 0),\n    posNowY: types.optional(types.number, 0),\n\n    selectedShape: types.safeReference(types.union(RectRegionModel, PolygonRegionModel, KeyPointRegionModel)),\n    activePolygon: types.maybeNull(types.safeReference(PolygonRegionModel)),\n\n    activeShape: types.maybeNull(RectRegionModel),\n\n    shapes: types.array(types.union(RectRegionModel, PolygonRegionModel, KeyPointRegionModel), []),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    controlButton() {\n      const names = self.completion.toNames.get(self.name);\n\n      let r = names[0];\n\n      names.forEach(item => {\n        if (item.type === \"rectanglelabels\") {\n          r = item;\n        }\n      });\n\n      return r;\n    },\n\n    get controlButtonType() {\n      const name = self.controlButton();\n      return getType(name).name;\n    },\n  }))\n  .actions(self => ({\n    setActivePolygon(poly) {\n      self.activePolygon = poly;\n    },\n\n    setPointerPosition({ x, y }) {\n      self.cursorPositionX = x;\n      self.cursorPositionY = y;\n    },\n\n    setZoom(scale, x, y) {\n      self.resize = scale + \"\";\n      self.zoomScale = scale;\n      self.zoomPosX = x;\n      self.zoomPosY = y;\n    },\n\n    setMode(mode) {\n      self.mode = mode;\n    },\n\n    updateIE(ev) {\n      const { width, height, naturalWidth, naturalHeight } = ev.target;\n\n      self.naturalWidth = naturalWidth;\n      self.naturalHeight = naturalHeight;\n      self.stageWidth = width;\n      self.stageHeight = height;\n      self.sizeUpdated = true;\n\n      self.shapes.forEach(s => s.updateImageSize(width / naturalWidth, height / naturalHeight, width, height));\n    },\n\n    _setStageRef(ref) {\n      self._stageRef = ref;\n    },\n\n    _deleteSelectedShape() {\n      if (self.selectedShape) destroy(self.selectedShape);\n    },\n\n    setSelected(shape) {\n      self.selectedShape = shape;\n    },\n\n    detachActiveShape(shape) {\n      return detach(self.activeShape);\n    },\n\n    _addShape(shape) {\n      self.shapes.push(shape);\n      self.completion.addRegion(shape);\n      self.setSelected(shape.id);\n      shape.selectRegion();\n    },\n\n    startDraw({ x, y }) {\n      let rect;\n      let stroke = self.controlButton().strokecolor;\n\n      if (self.controlButtonType == \"RectangleModel\") {\n        self.setMode(\"drawing\");\n        rect = self._addRect(x, y, 1, 1, stroke, null, \"px\", true);\n      } else if (self.controlButtonType == \"RectangleLabelsModel\") {\n        self.lookupStates(null, (_, states) => {\n          if (states && states.length) {\n            stroke = states[0].getSelectedColor();\n          }\n\n          self.setMode(\"drawing\");\n          rect = self._addRect(x, y, 1, 1, stroke, states, \"px\", true);\n        });\n      }\n\n      self.activeShape = rect;\n    },\n\n    updateDraw({ x, y }) {\n      const shape = self.activeShape;\n\n      const { x1, y1, x2, y2 } = reverseCoords({ x: shape._start_x, y: shape._start_y }, { x: x, y: y });\n\n      shape.setPosition(x1, y1, x2 - x1, y2 - y1);\n\n      //         // update rubber rect position\n      // posNow = {x: posIn.x, y: posIn.y};\n      // var posRect = reverse(posStart,posNow);\n      // r2.x(posRect.x1);\n      // r2.y(posRect.y1);\n      // r2.width(posRect.x2 - posRect.x1);\n      // r2.height(posRect.y2 - posRect.y1);\n      // r2.visible(true);\n\n      // s1.draw(); // redraw any changes.\n    },\n\n    lookupStates(ev, fun) {\n      const states = self.completion.toNames.get(self.name);\n      const activeStates = states ? states.filter(c => c.isSelected == true) : null;\n      const clonedStates = activeStates ? activeStates.map(s => cloneNode(s)) : null;\n\n      if (clonedStates.length !== 0) {\n        fun(ev, clonedStates);\n        activeStates && activeStates.forEach(s => s.type !== \"choices\" && s.unselectAll());\n      }\n    },\n\n    onImageClick(ev) {\n      const dispmap = {\n        PolygonModel: ev => self._addPolyEv(ev),\n        KeyPointModel: ev => self._addKeyPointEv(ev),\n\n        PolygonLabelsModel: ev => {\n          if (self.activePolygon && !self.activePolygon.closed) {\n            self._addPolyEv(ev);\n          } else {\n            self.lookupStates(ev, self._addPolyEv);\n          }\n        },\n        KeyPointLabelsModel: ev => {\n          self.lookupStates(ev, self._addKeyPointEv);\n        },\n      };\n\n      if (dispmap[self.controlButtonType]) return dispmap[self.controlButtonType](ev);\n    },\n\n    _addKeyPointEv(ev, states) {\n      const wp = self.stageWidth / self.naturalWidth;\n      const hp = self.stageHeight / self.naturalHeight;\n\n      const { zoomPosX, zoomPosY } = self;\n\n      const x = (ev.evt.offsetX - self.zoomPosX) / self.zoomScale;\n      const y = (ev.evt.offsetY - self.zoomPosY) / self.zoomScale;\n\n      const c = self.controlButton();\n\n      let fillcolor = c.fillcolor;\n      if (states && states.length) {\n        fillcolor = states[0].getSelectedColor();\n      }\n\n      self._addKeyPoint(x, y, c.strokewidth, fillcolor, states);\n    },\n\n    _addKeyPoint(x, y, width, fillcolor, states, coordstype) {\n      const c = self.controlButton();\n      const kp = KeyPointRegionModel.create({\n        id: guidGenerator(),\n        x: x,\n        y: y,\n        width: parseFloat(width),\n        opacity: parseFloat(c.opacity),\n        fillcolor: fillcolor,\n        states: states,\n        coordstype: coordstype,\n      });\n\n      self._addShape(kp);\n    },\n\n    _addRectEv(ev, states) {\n      const iw = 200;\n      const ih = 200;\n\n      // based on image width and height we can place rect somewhere\n      // in the center\n      const sw = 100;\n      const sh = 100;\n      // const name = guidGenerator();\n\n      let stroke = self.controlButton().strokecolor;\n      // let stroke = self.editor.rectstrokecolor;\n      // const states = self.states;\n      // TODO you may need to filter this states, check Text.js\n      if (states && states.length) {\n        stroke = states[0].getSelectedColor();\n      }\n\n      const wp = self.stageWidth / self.naturalWidth;\n      const hp = self.stageHeight / self.naturalHeight;\n\n      const wx = ev.evt.offsetX;\n      const wy = ev.evt.offsetY;\n\n      self._addRect(Math.floor(wx - sw / 2), Math.floor(wy - sh / 2), sw, sh, stroke, states);\n    },\n\n    _addRect(x, y, sw, sh, stroke, states, coordstype, noadd) {\n      // x = (x - self.zoomPosX) / self.zoomScale;\n      // y = (y - self.zoomPosY) / self.zoomScale;\n\n      const c = self.controlButton();\n\n      let localStates = states;\n\n      if (states && !states.length) {\n        localStates = [states];\n      }\n\n      const rect = RectRegionModel.create({\n        id: guidGenerator(),\n\n        x: x,\n        y: y,\n\n        width: sw,\n        height: sh,\n\n        opacity: parseFloat(c.opacity),\n        fillcolor: c.fillcolor ? c.fillcolor : stroke,\n\n        strokewidth: parseInt(c.strokewidth),\n        strokecolor: stroke,\n\n        states: localStates,\n\n        coordstype: coordstype,\n      });\n\n      if (noadd !== true) {\n        self._addShape(rect);\n      }\n\n      return rect;\n    },\n\n    _addPolyEv(ev, states) {\n      const w = 10;\n      const isValid = isValidReference(() => self.activePolygon);\n\n      if (!isValid || (self.activePolygon && self.activePolygon.closed)) {\n        self.setActivePolygon(null);\n      }\n\n      if (self.completion.dragMode === false) {\n        const x = (ev.evt.offsetX - self.zoomPosX) / self.zoomScale;\n        const y = (ev.evt.offsetY - self.zoomPosY) / self.zoomScale;\n\n        let stroke = self.controlButton().strokecolor;\n        if (states && states.length) {\n          stroke = states[0].getSelectedColor();\n        }\n\n        self._addPoly(x, y, w, stroke, states);\n\n        const stage = self._stageRef;\n        stage.container().style.cursor = \"default\";\n      }\n    },\n\n    _addPoly(x, y, width, stroke, states, coordstype) {\n      let poly = self.activePolygon;\n\n      if (!poly) {\n        const c = self.controlButton();\n\n        poly = PolygonRegionModel.create({\n          id: guidGenerator(),\n          x: x,\n          y: y,\n          width: width,\n          height: width,\n\n          opacity: parseFloat(c.opacity),\n          fillcolor: c.fillcolor,\n\n          strokewidth: parseInt(c.strokewidth),\n          strokecolor: stroke,\n\n          pointsize: c.pointsize,\n          pointstyle: c.pointstyle,\n\n          states: states,\n\n          coordstype: coordstype,\n        });\n\n        self.setActivePolygon(poly);\n\n        self.shapes.push(poly);\n        self.completion.addRegion(poly);\n      }\n\n      poly.addPoint(x, y);\n\n      return poly;\n    },\n\n    /**\n     * Resize of image canvas\n     * @param {*} width\n     * @param {*} height\n     */\n    onResizeSize(width, height) {\n      self.stageHeight = height;\n      self.stageWidth = width;\n    },\n\n    toStateJSON() {\n      let t = self.shapes.map(r => r.toStateJSON());\n      return t;\n    },\n\n    fromStateJSON(obj, fromModel) {\n      const params = [\"choices\", \"shape\", \"rectanglelabels\"];\n\n      /**\n       * Check correct controls for image object\n       */\n      params.forEach(item => {\n        if (!item in obj.value) {\n          throw new Error(\"Not valid param\");\n        }\n      });\n\n      /**\n       * Choices\n       */\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      /**\n       * Rectangle labels\n       */\n      if (obj.value.rectanglelabels) {\n        const states = restoreNewsnapshot(fromModel);\n\n        states.fromStateJSON(obj);\n\n        self._addRect(\n          obj.value.x,\n          obj.value.y,\n          obj.value.width,\n          obj.value.height,\n          states.getSelectedColor(),\n          [states],\n          \"perc\",\n        );\n      }\n\n      if (obj.value.keypointlabels) {\n        const states = restoreNewsnapshot(fromModel);\n\n        states.fromStateJSON(obj);\n        self._addKeyPoint(obj.value.x, obj.value.y, obj.value.width, states.getSelectedColor(), [states], \"perc\");\n      }\n\n      if (obj.value.polygonlabels) {\n        const states = restoreNewsnapshot(fromModel);\n\n        states.fromStateJSON(obj);\n        const poly = self._addPoly(\n          obj.value.points[0][0],\n          obj.value.points[0][1],\n          10,\n          states.getSelectedColor(),\n          [states],\n          \"perc\",\n        );\n\n        for (var i = 1; i < obj.value.points.length; i++) {\n          poly.addPoint(obj.value.points[i][0], obj.value.points[i][1]);\n        }\n\n        poly.closePoly();\n      }\n\n      /**\n       * Shapes\n       */\n      if (obj.value.shape) {\n        let modifySnap;\n        let shapeModel;\n\n        if (obj.from_name !== obj.to_name) {\n          modifySnap = restoreNewsnapshot(fromModel);\n          shapeModel = modifySnap.fromStateJSON(obj);\n          self.shapes.push(shapeModel);\n        }\n      }\n    },\n  }));\n\nconst ImageModel = types.compose(\n  \"ImageModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nfunction reverseCoords(r1, r2) {\n  var r1x = r1.x,\n    r1y = r1.y,\n    r2x = r2.x,\n    r2y = r2.y,\n    d;\n  if (r1x > r2x) {\n    d = Math.abs(r1x - r2x);\n    r1x = r2x;\n    r2x = r1x + d;\n  }\n  if (r1y > r2y) {\n    d = Math.abs(r1y - r2y);\n    r1y = r2y;\n    r2y = r1y + d;\n  }\n  return { x1: r1x, y1: r1y, x2: r2x, y2: r2y }; // return the corrected rect.\n}\n\nclass TransformerComponent extends React.Component {\n  componentDidMount() {\n    this.checkNode();\n  }\n\n  componentDidUpdate() {\n    this.checkNode();\n  }\n\n  checkNode() {\n    // here we need to manually attach or detach Transformer node\n    const stage = this.transformer.getStage();\n    const { selectedShape } = this.props;\n\n    if (!selectedShape) {\n      this.transformer.detach();\n      this.transformer.getLayer().batchDraw();\n      return;\n    }\n\n    if (!selectedShape.supportsTransform) return;\n\n    const selectedNode = stage.findOne(\".\" + selectedShape.id);\n    // do nothing if selected node is already attached\n    if (selectedNode === this.transformer.node()) {\n      return;\n    }\n\n    if (selectedNode) {\n      // attach to another node\n      this.transformer.attachTo(selectedNode);\n    } else {\n      // remove transformer\n      this.transformer.detach();\n    }\n    this.transformer.getLayer().batchDraw();\n  }\n\n  render() {\n    return (\n      <Transformer\n        resizeEnabled={true}\n        rotateEnabled={this.props.rotateEnabled}\n        anchorSize={8}\n        ref={node => {\n          this.transformer = node;\n        }}\n      />\n    );\n  }\n}\n\nconst createGrid = (width, height, nodeSize) => {\n  return [...Array(width)]\n    .map((_, col) =>\n      [...Array(height)].map((_, row) => ({\n        col,\n        row,\n        x: col * nodeSize,\n        y: row * nodeSize,\n        fill: \"#fff\",\n      })),\n    )\n    .reduce((p, c) => [...p, ...c]);\n};\n\nclass HtxImageView extends Component {\n  handleDblClick = ev => {\n    // const item = this.props.item;\n    // const poly = item.activePolygon;\n    // if (poly)\n    //     poly.closePoly();\n    // item.setActivePolygon(null);\n  };\n\n  handleOnClick = ev => {\n    const { item } = this.props;\n    return item.onImageClick(ev);\n  };\n\n  handleMouseUp = e => {\n    const { item } = this.props;\n    if (item.mode == \"drawing\") {\n      item.setMode(\"viewing\");\n      const as = item.detachActiveShape();\n      if (as.width > 3 && as.height > 3) item._addShape(as);\n    }\n  };\n\n  handleMouseMove = e => {\n    const { item } = this.props;\n    if (item.mode == \"drawing\") {\n      const x = (e.evt.offsetX - item.zoomPosX) / item.zoomScale;\n      const y = (e.evt.offsetY - item.zoomPosY) / item.zoomScale;\n\n      item.updateDraw({ x: x, y: y });\n    }\n\n    item.setPointerPosition({ x: e.evt.offsetX, y: e.evt.offsetY });\n  };\n\n  handleMouseOver = e => {};\n\n  handleStageMouseDown = e => {\n    const { item } = this.props;\n\n    if (item.controlButtonType === \"PolygonLabelsModel\") {\n      return;\n    }\n\n    if (e.target === e.target.getStage() || (e.target.parent && e.target.parent.attrs.name == \"ruler\")) {\n      // draw rect\n\n      const x = (e.evt.offsetX - item.zoomPosX) / item.zoomScale;\n      const y = (e.evt.offsetY - item.zoomPosY) / item.zoomScale;\n\n      item.startDraw({ x: x, y: y });\n      return;\n    }\n\n    // clicked on transformer - do nothing\n    const clickedOnTransformer = e.target.getParent().className === \"Transformer\";\n    if (clickedOnTransformer) {\n      return;\n    }\n\n    return true;\n  };\n\n  handleZoom = e => {\n    const { item } = this.props;\n\n    e.evt.preventDefault();\n\n    const stage = item._stageRef;\n    const scaleBy = parseFloat(item.zoomby);\n    const oldScale = stage.scaleX();\n\n    const mousePointTo = {\n      x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n      y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale,\n    };\n\n    const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n    if (item.negativezoom !== true && newScale <= 1) {\n      item.setZoom(1, 0, 0);\n      stage.scale({ x: 1, y: 1 });\n      stage.position({ x: 0, y: 0 });\n      stage.batchDraw();\n      return;\n    }\n\n    stage.scale({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: -(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale,\n      y: -(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale,\n    };\n\n    item.setZoom(newScale, newPos.x, newPos.y);\n    stage.position(newPos);\n    stage.batchDraw();\n  };\n\n  renderGrid() {\n    const { item } = this.props;\n    const grid = createGrid(\n      Math.ceil(item.stageWidth / item.gridSize),\n      Math.ceil(item.stageHeight / item.gridSize),\n      item.gridSize,\n    );\n\n    return (\n      <Layer opacity={0.15} name=\"ruler\">\n        {Object.values(grid).map((n, i) => (\n          <Rect\n            key={i}\n            x={n.x}\n            y={n.y}\n            width={item.gridSize}\n            height={item.gridSize}\n            stroke={item.gridColor}\n            strokeWidth={1}\n          />\n        ))}\n      </Layer>\n    );\n  }\n\n  renderRulers() {\n    const { item, store } = this.props;\n    const width = 1;\n    const color = \"white\";\n\n    return (\n      <Group\n        name=\"ruler\"\n        onClick={ev => {\n          ev.cancelBubble = false;\n        }}\n      >\n        <Line\n          x={0}\n          y={item.cursorPositionY}\n          points={[0, 0, item.stageWidth, 0]}\n          strokeWidth={width}\n          stroke={color}\n          tension={0}\n          dash={[4, 4]}\n          closed\n        />\n        <Line\n          x={item.cursorPositionX}\n          y={0}\n          points={[0, 0, 0, item.stageHeight]}\n          strokeWidth={width}\n          stroke={color}\n          tension={0}\n          dash={[1.5]}\n          closed\n        />\n      </Group>\n    );\n  }\n\n  updateDimensions() {\n    // this.props.item.onResizeSize(this.container.offsetWidth, this.container.offsetHeight);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    const { item, store } = this.props;\n\n    // TODO fix me\n    if (!store.task) return null;\n\n    const divStyle = {\n      overflow: \"hidden\",\n      width: item.stageWidth + \"px\",\n    };\n\n    const imgStyle = {\n      // width: item.width,\n      maxWidth: item.maxwidth,\n      transformOrigin: \"left top\",\n    };\n\n    if (item.zoomScale != 1) {\n      let { zoomPosX, zoomPosY } = item;\n      const translate = \"translate(\" + zoomPosX + \"px,\" + zoomPosY + \"px) \";\n      imgStyle[\"transform\"] = translate + \"scale(\" + item.resize + \", \" + item.resize + \")\";\n    }\n\n    if (item.hasStates) {\n      return (\n        <div style={{ position: \"relative\" }}>\n          <div\n            ref={node => {\n              this.container = node;\n            }}\n            style={divStyle}\n          >\n            <img style={imgStyle} src={item._value} onLoad={item.updateIE} onClick={this.handleOnClick} />\n          </div>\n          <Stage\n            ref={ref => {\n              item._setStageRef(ref);\n            }}\n            style={{ position: \"absolute\", top: 0, left: 0 }}\n            width={item.stageWidth}\n            height={item.stageHeight}\n            scaleX={item.scale}\n            scaleY={item.scale}\n            onDblClick={this.handleDblClick}\n            onClick={this.handleOnClick}\n            onMouseDown={this.handleStageMouseDown}\n            onMouseMove={this.handleMouseMove}\n            onMouseUp={this.handleMouseUp}\n            onWheel={item.zoom === true ? this.handleZoom : () => {}}\n          >\n            {item.grid && item.sizeUpdated && this.renderGrid()}\n            <Layer>\n              {item.shapes.map(s => {\n                return Tree.renderItem(s);\n              })}\n              {item.activeShape && Tree.renderItem(item.activeShape)}\n\n              <TransformerComponent rotateEnabled={item.controlButton().canrotate} selectedShape={item.selectedShape} />\n            </Layer>\n          </Stage>\n        </div>\n      );\n    } else {\n      divStyle[\"marginTop\"] = \"1em\";\n      return (\n        <div style={divStyle}>\n          <img style={imgStyle} src={item._value} onLoad={item.updateIE} />\n        </div>\n      );\n    }\n  }\n}\n\nconst HtxImage = inject(\"store\")(observer(HtxImageView));\n\nRegistry.addTag(\"image\", ImageModel, HtxImage);\n\nexport { ImageModel, HtxImage };\n","/**\n * Class for text data with 4 params:\n * start -> int: the index of the character where the range start.\n * end -> int: the index of the character where the range stop.\n * text -> string: the highlighted text.\n * data -> object: extra data (the props of the highlight component)\n */\nexport default class Range {\n  constructor(start, end, text, data = {}) {\n    this.start = start;\n    this.end = end;\n    this.text = text;\n    this.data = data;\n  }\n}\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport default class TextNode extends Component {\n  render() {\n    return (\n      <span\n        data-position={this.props.position}\n        overlap={this.props.overlap}\n        key={this.props.keyNode ? this.props.keyNode : null}\n        style={this.props.style}\n      >\n        {this.props.children}\n      </span>\n    );\n  }\n}\n\nTextNode.propTypes = {\n  position: PropTypes.number,\n  overlap: PropTypes.string,\n  key: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport Utils from \"../../utils\";\nimport TextNode from \"../TextNode/TextNode\";\n\nconst HtxTextNodeView = ({ store, range, id, highlightStyle, style, charIndex, children, overlap }) => {\n  const getStyle = range => (range ? highlightStyle : style);\n  const getRangeKey = () => `${id}-${range.start}-${charIndex}`;\n  const getNormalKey = () => `${id}-${charIndex}`;\n  const getKey = range => (range ? getRangeKey() : getNormalKey());\n\n  let wrapper = (\n    <span data-position={charIndex} key={getKey(range)} style={getStyle(range)}>\n      {children}\n    </span>\n  );\n\n  if (overlap && overlap.length) {\n    let bg;\n\n    if (range.states) {\n      range.states.map(i => {\n        bg = Utils.Colors.convertToRGBA(i.getSelectedColor(), 0.3);\n      });\n    }\n\n    store.completionStore.selected.regionStore.regions.map(i => {\n      if (i.selected) {\n        overlap.map(overlapItem => {\n          if (overlapItem === i.id) {\n            bg = \"#ff4d4f\";\n          }\n        });\n      }\n\n      if (i.highlighted && overlap.includes(i.id)) {\n        bg = \"#ff4d4f\";\n      }\n    });\n\n    wrapper = overlap.reduceRight((value, key) => {\n      return (\n        <TextNode\n          style={{ background: bg, padding: \"2px 0\" }}\n          position={charIndex}\n          overlap={key}\n          keyNode={getKey(range)}\n        >\n          {value}\n        </TextNode>\n      );\n    }, children);\n  }\n\n  return wrapper;\n};\n\nconst HtxTextNode = inject(\"store\")(observer(HtxTextNodeView));\nexport { HtxTextNode };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { HtxTextNode } from \"./Node\";\n\n/**\n * Node for URL\n * @param {*} props\n */\nconst UrlNode = props => {\n  const style = { wordWrap: \"break-word\" };\n\n  return (\n    <HtxTextNode\n      id={props.id}\n      highlightStyle={Object.assign({}, style, props.highlightStyle)}\n      charIndex={props.charIndex}\n      range={props.range}\n      overlap={props.overlap}\n      style={style}\n    >\n      <a data-position={props.charIndex + props.url.length} href={props.url} target=\"blank\">\n        {props.url}\n      </a>\n    </HtxTextNode>\n  );\n};\n\nUrlNode.propTypes = {\n  highlightStyle: PropTypes.object,\n  id: PropTypes.string,\n  charIndex: PropTypes.number,\n  range: PropTypes.object,\n  url: PropTypes.string,\n};\n\nexport default UrlNode;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport { HtxTextNode } from \"./Node\";\n\n/**\n * Node for Emoji\n * @param {*} props\n */\nconst EmojiNode = props => {\n  return (\n    <HtxTextNode\n      id={props.id}\n      highlightStyle={props.highlightStyle}\n      charIndex={props.charIndex}\n      range={props.range}\n      overlap={props.overlap}\n    >\n      {`${props.text[props.charIndex]}${props.text[props.charIndex + 1]}`}\n    </HtxTextNode>\n  );\n};\n\nEmojiNode.propTypes = {\n  id: PropTypes.string.isRequired,\n  highlightStyle: PropTypes.object,\n  charIndex: PropTypes.number.isRequired,\n  range: PropTypes.oneOfType([PropTypes.number, PropTypes.object]),\n  overlap: PropTypes.array,\n  text: PropTypes.string.isRequired,\n};\n\nexport default EmojiNode;\n","import emojiRegex from \"emoji-regex\";\nimport React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport Utils from \"../../utils\";\nimport Range from \"./Range\";\nimport { HtxTextNode } from \"./Node\";\nimport UrlNode from \"./UrlNode\";\nimport EmojiNode from \"./EmojiNode\";\nimport styles from \"./TextHighlight.module.scss\";\n\nclass TextHighlight extends Component {\n  constructor() {\n    super();\n\n    this.dismissMouseUp = 0;\n  }\n\n  /**\n   * Return first ok element\n   */\n  getRange(charIndex) {\n    if (this.props.ranges && this.props.ranges.length) {\n      return this.props.ranges.find(range => charIndex >= range.start && charIndex <= range.end);\n    }\n  }\n\n  /**\n   * Function when the user mouse is over an highlighted text\n   */\n  onMouseOverHighlightedWord(range, visible) {\n    if (visible && this.props.onMouseOverHighlightedWord) {\n      this.props.onMouseOverHighlightedWord(range);\n    }\n  }\n\n  getLetterNode(charIndex, range) {\n    /**\n     * Current symbol\n     */\n    const char = this.props.text[charIndex];\n\n    let nl;\n\n    /**\n     * Line break\n     */\n    if (char && char.charCodeAt()) {\n      nl = char.charCodeAt(0) === 10;\n    }\n\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <HtxTextNode\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        charIndex={charIndex}\n        key={`${this.props.id}-${charIndex}`}\n        highlightStyle={this.props.highlightStyle}\n        // style={{padding: \"2px 0\", background: \"linear-gradient(180deg, #fdcd3b 60%, #ffed4b 60%, red 9%)\"}}\n      >\n        {nl ? <br /> : char}\n      </HtxTextNode>\n    );\n  }\n\n  getEmojiNode(charIndex, range) {\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <EmojiNode\n        text={this.props.text}\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        key={`${this.props.id}-emoji-${charIndex}`}\n        charIndex={charIndex}\n        highlightStyle={this.props.highlightStyle}\n      />\n    );\n  }\n\n  getUrlNode(charIndex, range, url) {\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <UrlNode\n        url={url}\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        key={`${this.props.id}-url-${charIndex}`}\n        charIndex={charIndex}\n        highlightStyle={this.props.highlightStyle}\n      />\n    );\n  }\n\n  mouseEvent() {\n    if (!this.props.enabled) {\n      return false;\n    }\n\n    let text = \"\";\n\n    if (window.getSelection) {\n      /**\n       * Get highlited text\n       * Tip: with helper elements (hints)\n       */\n      // text = window.getSelection().toString();\n\n      if (window.getSelection().type === \"None\") return;\n\n      /**\n       * Create clone range\n       */\n      let cloneCont = window\n        .getSelection()\n        .getRangeAt(0)\n        .cloneRange();\n\n      /**\n       * The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.\n       */\n      let selectionContents = cloneCont.cloneContents();\n      /**\n       * Create virtual div with text\n       */\n      let virtualDiv = document.createElement(\"div\");\n\n      virtualDiv.appendChild(selectionContents);\n\n      let elementsWithSup = virtualDiv.getElementsByTagName(\"sup\");\n\n      if (elementsWithSup.length > 0) {\n        for (let i = 0; i < elementsWithSup.length; i++) {\n          elementsWithSup[i].innerText = \"\";\n        }\n        text = virtualDiv.innerText;\n      } else {\n        text = virtualDiv.innerText;\n      }\n    } else if (document.selection && document.selection.type !== \"Control\") {\n      text = document.selection.createRange().text;\n    }\n\n    if (!text || !text.length) return false;\n\n    const range = window.getSelection().getRangeAt(0);\n\n    /**\n     * Check for hint\n     */\n    if (range.startContainer.parentNode.dataset.hint || range.endContainer.parentNode.dataset.hint) return;\n\n    /**\n     * Start position of selected item\n     */\n    const startContainerPosition = parseInt(range.startContainer.parentNode.dataset.position);\n    /**\n     * End position of selected item\n     */\n    const endContainerPosition = parseInt(range.endContainer.parentNode.dataset.position);\n\n    let startHL = startContainerPosition < endContainerPosition ? startContainerPosition : endContainerPosition;\n    let endHL = startContainerPosition < endContainerPosition ? endContainerPosition : startContainerPosition;\n\n    const rangeObj = new Range(startHL, endHL, text, {\n      ...this.props,\n      ranges: undefined,\n    });\n\n    this.props.onTextHighlighted(rangeObj);\n  }\n\n  /**\n   *\n   * @param {*} event\n   */\n  onMouseUp(event) {\n    this.mouseEvent.bind(this)();\n\n  }\n\n  onMouseDown(event) {\n    // console.log(event)\n  }\n\n  onMouseEnter(event) {\n    // console.log(event)\n  }\n\n  /**\n   * Double click on text\n   * @param {*} event\n   */\n  onDoubleClick(event) {\n    // WARN\n    // event.stopPropagation();\n    // this.doucleckicked = true;\n    // this.mouseEvent.bind(this)();\n  }\n\n  /**\n   * @param {object} letterGroup All marked sections of text\n   * @param {object} range Range of marked section\n   * @param {number} textCharIndex The last number of selection\n   * @param {function} onMouseOverHighlightedWord\n   */\n  rangeRenderer(letterGroup, range, textCharIndex, onMouseOverHighlightedWord) {\n    if (this.props.rangeRenderer) {\n      return this.props.rangeRenderer(letterGroup, range, textCharIndex, onMouseOverHighlightedWord);\n    }\n\n    return letterGroup;\n  }\n\n  getNode(i, range, text, url, isEmoji) {\n    if (url.length) {\n      return this.getUrlNode(i, range, url);\n    } else if (isEmoji) {\n      return this.getEmojiNode(i, range);\n    }\n\n    return this.getLetterNode(i, range);\n  }\n\n  getRanges() {\n    /**\n     * Text with nodes\n     */\n    const newText = [];\n\n    let lastRange;\n\n    /**\n     * For all the characters on the text\n     */\n    for (let textCharIndex = 0; textCharIndex < this.props.text.length; textCharIndex++) {\n      /**\n       * Get range text\n       */\n      const range = this.getRange(textCharIndex);\n\n      /**\n       * Check characters for URL\n       */\n      const url = Utils.Checkers.getUrl(textCharIndex, this.props.text);\n\n      /**\n       * Check characters for emoji\n       */\n      const isEmoji = emojiRegex().test(this.props.text[textCharIndex] + this.props.text[textCharIndex + 1]);\n\n      /**\n       * Get the current character node\n       */\n      const node = this.getNode(textCharIndex, range, this.props.text, url, isEmoji);\n\n      /**\n       * If the next node is an url one, we fast forward to the end of it\n       */\n      if (url.length) {\n        textCharIndex += url.length - 1;\n      } else if (isEmoji) {\n        /**\n         * Because an emoji is composed of 2 chars\n         */\n        textCharIndex++;\n      }\n\n      if (!range) {\n        newText.push(node);\n        continue;\n      }\n\n      /**\n       * If the char is in range\n       */\n      lastRange = range;\n\n      // console.log(this.props.text[lastRange.start], this.props.text[lastRange.end])\n\n      /**\n       * We put the first range node on the array\n       */\n      const letterGroup = [node];\n\n      /**\n       * For all the characters in the highlighted range\n       */\n      let rangeCharIndex = textCharIndex + 1;\n\n      // if (rangeCharIndex >= parseInt(range.start) && rangeCharIndex <= parseInt(range.end)) {\n      //   console.log(this.props.text[parseInt(range.end)])\n      // }\n      // console.log(textCharIndex, range.start, range.end)\n\n      for (; rangeCharIndex < parseInt(range.end) + 1; rangeCharIndex++) {\n        /**\n         * Emoji handler\n         */\n        const isEmoji = emojiRegex().test(`${this.props.text[rangeCharIndex]}${this.props.text[rangeCharIndex + 1]}`);\n\n        if (isEmoji) {\n          letterGroup.push(this.getEmojiNode(rangeCharIndex, range));\n          // Because an emoji is composed of 2 chars\n          rangeCharIndex++;\n        } else {\n          letterGroup.push(this.getLetterNode(rangeCharIndex, range));\n        }\n\n        textCharIndex = rangeCharIndex;\n      }\n\n      newText.push(this.rangeRenderer(letterGroup, range, textCharIndex, this.onMouseOverHighlightedWord.bind(this)));\n    }\n\n    if (lastRange) {\n      // Callback function\n      this.onMouseOverHighlightedWord(lastRange, true);\n    }\n\n    return newText;\n  }\n\n  render() {\n    const newText = this.getRanges();\n\n    return (\n      <div\n        className={styles.block}\n        style={this.props.style}\n        onMouseUp={this.onMouseUp.bind(this)}\n        onMouseDown={this.onMouseDown.bind(this)}\n        onMouseEnter={this.onMouseEnter.bind(this)}\n        onDoubleClick={this.onDoubleClick.bind(this)}\n      >\n        {newText}\n      </div>\n    );\n  }\n}\n\nexport default observer(TextHighlight);\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { TextModel } from \"./Text\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\nimport Hint from \"../../components/Hint/Hint\";\nimport Utils from \"../../utils\";\n\nimport styles from \"./TextRegion/TextRegion.module.scss\";\n\nconst Model = types\n  .model(\"TextRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"textrange\",\n    start: types.integer,\n    end: types.integer,\n    text: types.string,\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel))),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, TextModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    highlightStates() {},\n\n    /**\n     *\n     */\n    toStateJSON() {\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.pid,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"region\",\n          // text: parent.text,\n          value: {\n            start: self.start,\n            end: self.end,\n            text: self.text,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst TextRegionModel = types.compose(\n  \"TextRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\n/**\n * Region state hint\n * @param {*} props\n */\nconst RegionState = props => {\n  const localState = props.state;\n\n  /**\n   * Get name of label\n   */\n  const selectedString = localState.getSelectedString();\n  const selectedColor = Utils.Colors.convertToRGBA(localState.getSelectedColor(), 0.3);\n  let style = {\n    background: selectedColor,\n  };\n\n  if (props.style) style = { ...style, outline: props.style.outline };\n\n  return (\n    <Hint className={styles.state} style={style}>\n      <span data-hint={true}>&nbsp;[{selectedString}]</span>\n    </Hint>\n  );\n};\n\nconst HtxTextRegionView = ({ store, item, letterGroup, range, textCharIndex, onMouseOverHighlightedWord }) => {\n  /**\n   * Get color of label\n   */\n  let labelColor = \"rgba(0, 0, 255, 0.1)\";\n\n  if (range.states) {\n    labelColor = range.states.map(s => {\n      return s.getSelectedColor();\n    });\n  }\n\n  /**\n   * TODO\n   * Update function to all formats\n   */\n  if (labelColor.length !== 0) {\n    labelColor = Utils.Colors.convertToRGBA(labelColor[0], 0.3);\n  }\n\n  let markStyle = {\n    padding: \"2px 0px\",\n    position: \"relative\",\n    borderRadius: \"2px\",\n    cursor: store.completionStore.selected.relationMode ? \"crosshair\" : \"pointer\",\n  };\n\n  let regionStates = [];\n\n  if ((range.states && range.states.length) > 0) {\n    range.states.map(state => {\n      regionStates.push(\n        <RegionState\n          key={range.id}\n          state={state}\n          bg={labelColor}\n          hover={store.completionStore.selected.relationMode ? true : false}\n          selected={range.selected}\n          style={range.highlighted ? { outline: \"2px solid red\" } : null}\n        />,\n      );\n    });\n  }\n\n  /**\n   * Without label\n   */\n  if (!regionStates.length) {\n    markStyle = {\n      ...markStyle,\n      background: \"rgba(0, 0, 255, 0.1)\",\n    };\n  }\n\n  return (\n    <span\n      style={markStyle}\n      onClick={range.onClickRegion}\n      onMouseOver={() => {\n        if (store.completionStore.selected.relationMode) {\n          range.setHighlight(true);\n        }\n      }}\n      onMouseOut={() => {\n        if (store.completionStore.selected.relationMode) {\n          range.setHighlight(false);\n        }\n      }}\n    >\n      {letterGroup}\n      {regionStates}\n    </span>\n  );\n};\n\nconst HtxTextRegion = inject(\"store\")(observer(HtxTextRegionView));\n\nRegistry.addTag(\"textrange\", TextRegionModel, HtxTextRegion);\n\nexport { TextRegionModel, HtxTextRegion };\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getType, getRoot } from \"mobx-state-tree\";\n\nimport { cloneNode } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\nimport TextHighlight from \"../../components/TextHighlight/TextHighlight\";\nimport { runTemplate } from \"../../core/Template\";\nimport { TextRegionModel, HtxTextRegion } from \"./TextRegion\";\n\n/**\n * Text tag shows a text that can be labeled\n * @example\n * <Text name=\"text-1\" value=\"$text\"></Text>\n * @name Text\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {boolean} selelectWithoutLabel controls if text can be selected without any labels selected\n */\nconst TagAttrs = types.model(\"TextModel\", {\n  name: types.maybeNull(types.string),\n  // text: types.maybeNull(types.optional(types.string, \"Please set \\\"value\\\" attribute of Text\")),\n  value: types.maybeNull(types.string),\n  selelectwithoutlabel: types.optional(types.boolean, false),\n\n  hidden: types.optional(types.enumeration([\"true\", \"false\"]), \"false\"),\n  /**\n   * If we allow selecting parts of words of we select whole word only\n   */\n  adjustselection: types.optional(types.boolean, true),\n  selectionenabled: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model(\"TextModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"text\",\n    regions: types.array(TextRegionModel),\n\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states\n        ? states.filter(s => s.isSelected && (getType(s).name === \"LabelsModel\" || getType(s).name === \"RatingModel\"))\n        : null;\n    },\n  }))\n  .actions(self => ({\n    remove() {\n      // if (self.generated) {\n      //     const m = Registry.getModelByTag('textarea');\n      //     const ta = getParentOfType(self, m);\n      //     ta.deleteText(self);\n      // }\n    },\n\n    findRegion(start, end) {\n      const immutableRange = self.regions.find(r => r.start === start && r.end === end);\n      return immutableRange;\n    },\n\n    updateValue(store) {\n      self._value = runTemplate(self.value, store.task.dataObj);\n    },\n\n    _addRegion(params) {\n      const r = TextRegionModel.create(params);\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      return r;\n    },\n\n    addRegion(range) {\n      const states = self.activeStates();\n      const clonedStates = states\n        ? states.map(s => {\n            return cloneNode(s);\n          })\n        : null;\n\n      /**\n       * Selelect without label\n       * Default: false\n       */\n      if (!self.selelectwithoutlabel && !clonedStates.length) return null;\n\n      const r = self._addRegion({\n        start: range.start,\n        end: range.end,\n        text: range.text,\n        states: clonedStates, // tl.cloneActiveStates()\n      });\n\n      states &&\n        states.forEach(s => {\n          return s.unselectAll();\n        });\n\n      return r;\n    },\n\n    /**\n     * Return JSON\n     */\n    toStateJSON() {\n      const objectsToReturn = self.regions.map(r => r.toStateJSON());\n      return objectsToReturn;\n    },\n\n    /**\n     *\n     * @param {*} obj\n     * @param {*} fromModel\n     */\n    fromStateJSON(obj, fromModel) {\n      let r;\n\n      if (fromModel.type === \"textarea\" || fromModel.type === \"choices\") {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n        return;\n      }\n\n      const tree = {\n        pid: obj.id,\n        start: obj.value.start,\n        end: obj.value.end,\n        text: obj.value.text,\n        normalization: obj.normalization,\n      };\n\n      if (obj.from_name === obj.to_name) {\n        r = self._addRegion(tree);\n      } else {\n        const region = self.findRegion(obj.value.start, obj.value.end);\n        const m = restoreNewsnapshot(fromModel);\n\n        // update state\n        m.fromStateJSON(obj);\n\n        if (!region) {\n          tree.states = [m];\n          r = self._addRegion(tree);\n        } else {\n          region.states.push(m);\n        }\n      }\n\n      return r;\n    },\n  }));\n\nconst TextModel = types.compose(\n  \"TextModel\",\n  TagAttrs,\n  Model,\n);\n\nclass HtxTextView extends Component {\n  renderRegion(letterGroup, range, textCharIndex, onMouseOverHighlightedWord) {\n    return (\n      <HtxTextRegion\n        key={range.id}\n        store={this.props.store}\n        item={this.props.item}\n        letterGroup={letterGroup}\n        range={range}\n        selected={range.selected}\n        textCharIndex={textCharIndex}\n        onMouseOverHighlightedWord={onMouseOverHighlightedWord}\n      />\n    );\n  }\n\n  render() {\n    const self = this;\n\n    const { item } = this.props;\n    const style = {};\n    if (item.hidden === \"true\") style[\"display\"] = \"none\";\n\n    return (\n      <div style={style}>\n        <TextHighlight\n          id={item.id}\n          key={item.id}\n          text={item._value}\n          enabled={item.selectionenabled}\n          ranges={item.regions}\n          adjustSelection={item.adjustselection}\n          rangeRenderer={self.renderRegion.bind(this)}\n          onTextHighlighted={range => {\n            item.addRegion(range);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst HtxText = inject(\"store\")(observer(HtxTextView));\n\nRegistry.addTag(\"text\", TextModel, HtxText);\n\nexport { TextModel, HtxText };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType } from \"mobx-state-tree\";\nimport { Checkbox, Form } from \"semantic-ui-react\";\n\nimport { ChoicesModel } from \"./Choices\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\n\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Hint from \"../../components/Hint/Hint\";\n\n/**\n * Choice tag represents a single choice\n * @example\n * <View>\n *   <Choices name=\"gender\" toName=\"txt-1\" choice=\"single\">\n *     <Choice value=\"Male\"></Choice>\n *     <Choice value=\"Female\"></Choice>\n *   </Choices>\n *   <Text name=\"txt-1\" value=\"John went to see Marry\"></Text>\n * </View>\n * @name Choice\n * @param {string} value label value\n * @param {boolean=} selected If this label should be preselected\n * @param {string=} hotkey hokey\n */\nconst TagAttrs = types.model({\n  selected: types.optional(types.boolean, false),\n  alias: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  hotkey: types.maybeNull(types.string),\n  style: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    type: \"choice\",\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get isCheckbox() {\n      const choice = getParentOfType(self, ChoicesModel).choice;\n      return choice === \"multiple\" || choice === \"single\";\n    },\n\n    get name() {\n      return getParentOfType(self, ChoicesModel).name;\n    },\n  }))\n  .actions(self => ({\n    toggleSelected() {\n      const choice = getParentOfType(self, ChoicesModel);\n\n      choice.shouldBeUnselected && choice.unselectAll();\n\n      self.markSelected(!self.selected);\n    },\n\n    markSelected(val) {\n      self.selected = val;\n    },\n\n    onHotKey() {\n      return self.toggleSelected();\n    },\n  }));\n\nconst ChoiceModel = types.compose(\n  \"ChoiceModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxChoice = inject(\"store\")(\n  observer(({ item, store }) => {\n    let style = {};\n\n    if (item.style) style = Tree.cssConverter(item.style);\n\n    if (item.isCheckbox) {\n      const cStyle = Object.assign(\n        { marginRight: \"1em\", marginBottom: \"0.5em\", display: \"flex\", alignItems: \"center\" },\n        style,\n      );\n\n      return (\n        <div style={cStyle}>\n          <Checkbox\n            name={item._value}\n            label={item._value}\n            onChange={ev => {\n              item.toggleSelected();\n            }}\n            checked={item.selected}\n          />\n          {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n        </div>\n      );\n    } else {\n      const label = (\n        <label>\n          {item._value}\n          {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n        </label>\n      );\n\n      return (\n        <div style={style}>\n          <Form.Radio\n            label={label}\n            value={item._value}\n            style={{ display: \"inline-block\" }}\n            checked={item.selected}\n            onChange={ev => {\n              item.toggleSelected();\n            }}\n          />\n        </div>\n      );\n    }\n  }),\n);\n\nRegistry.addTag(\"choice\", ChoiceModel, HtxChoice);\n\nexport { HtxChoice, ChoiceModel };\n","import React, { Component } from \"react\";\n\nimport { observer } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\nimport Types from \"../../core/Types\";\n\nimport { ChoiceModel } from \"./Choice\";\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { RectangleModel } from \"./Rectangle\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { Form } from \"semantic-ui-react\";\n\n/**\n * Choices tag, create a group of choices, radio, or checkboxes. Shall\n * be used for a single or multi-class classification.\n * @example\n * <View>\n *   <Choices name=\"gender\" toName=\"txt-1\" choice=\"single-radio\">\n *     <Choice alias=\"M\" value=\"Male\"></Choice>\n *     <Choice alias=\"F\" value=\"Female\"></Choice>\n *   </Choices>\n *   <Text name=\"txt-1\" value=\"John went to see Marry\"></Text>\n * </View>\n * @name Choices\n * @param {string} name of the group\n * @param {string} toName name of the elements that you want to label\n * @param {single|single-radio|multiple=} [choice=single] single or multi-class\n * @param {boolean} showInline show items in the same visual line\n */\nconst TagAttrs = types.model({\n  name: types.string,\n  toname: types.maybeNull(types.string),\n  showinline: types.optional(types.boolean, false),\n  choice: types.optional(types.enumeration([\"single\", \"single-radio\", \"multiple\"]), \"single\"),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"choices\",\n    children: Types.unionArray([\"choice\", \"choices\", \"labels\", \"label\"]),\n  })\n  .views(self => ({\n    get shouldBeUnselected() {\n      return self.choice === \"single\" || self.choice === \"single-radio\";\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      const names = self.getSelectedNames();\n\n      if (names && names.length) {\n        const toname = self.toname || self.name;\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: toname,\n          type: self.type,\n          value: {\n            choices: names,\n          },\n        };\n      }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.choices) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.choices.forEach(l => {\n        const choice = self.findLabel(l);\n        if (!choice) throw new Error(\"No label \" + l);\n\n        choice.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(\n  LabelsModel,\n  RectangleModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst ChoicesModel = types.compose(\n  \"ChoicesModel\",\n  Composition,\n);\n\nconst HtxChoices = observer(({ item }) => {\n  return (\n    <div style={{ marginTop: \"1em\" }}>\n      <Form>\n        {item.showinline ? (\n          <Form.Group inline style={{ flexWrap: \"wrap\" }}>\n            {Tree.renderChildren(item)}\n          </Form.Group>\n        ) : (\n          <Form.Group grouped>{Tree.renderChildren(item)}</Form.Group>\n        )}\n      </Form>\n    </div>\n  );\n});\n\nRegistry.addTag(\"choices\", ChoicesModel, HtxChoices);\n\nexport { HtxChoices, ChoicesModel, TagAttrs };\n","import React, { createRef, Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Message, Icon, Popup, Button, Dropdown, Input } from \"semantic-ui-react\";\n\nimport Types from \"../../core/Types\";\n\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\nimport { TextAreaModel } from \"../control/TextArea\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model(\"TextAreaRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"textarearegion\",\n\n    _value: types.string,\n    // states: types.array(types.union(LabelsModel, ChoicesModel)),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, TextAreaModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }));\n\nconst TextAreaRegionModel = types.compose(\n  \"TextAreaRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxTextAreaRegionView = ({ store, item }) => {\n  let markStyle = {\n    cursor: store.completionStore.selected.relationMode ? \"crosshair\" : \"pointer\",\n    display: \"block\",\n  };\n\n  if (item.selected) {\n    markStyle = {\n      ...markStyle,\n      border: \"1px solid red\",\n    };\n  } else if (item.highlighted) {\n    markStyle = {\n      ...markStyle,\n      border: \"2px solid red\",\n    };\n  }\n\n  return (\n    <Message\n      className=\"warning\"\n      style={markStyle}\n      onClick={item.onClickRegion}\n      onMouseOver={() => {\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(true);\n        }\n      }}\n      onMouseOut={() => {\n        /* range.setHighlight(false); */\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(false);\n        }\n      }}\n    >\n      <p>{item._value}</p>\n    </Message>\n  );\n};\n\nconst HtxTextAreaRegion = inject(\"store\")(observer(HtxTextAreaRegionView));\n\nRegistry.addTag(\"textarearegion\", TextAreaRegionModel, HtxTextAreaRegion);\n\nexport { TextAreaRegionModel, HtxTextAreaRegion };\n","import React, { Component } from \"react\";\n\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, destroy, getEnv, flow, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Form, Message } from \"semantic-ui-react\";\n\nimport { renderChildren } from \"../../core/Tree\";\nimport { guidGenerator } from \"../../core/Helpers\";\n\nimport { HtxTextAreaRegion, TextAreaRegionModel } from \"../object/TextAreaRegion\";\n\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * TextArea tag shows the textarea for user input\n * @example\n * <View>\n *   <TextArea name=\"ta\"></TextArea>\n * </View>\n * @name TextArea\n * @param {string} name name of the element\n * @param {string} toName name of the element that you want to label if any\n * @param {string} value\n * @param {string=} label label text\n * @param {string=} placeholder placeholder text\n * @param {string=} maxSubmissions maximum number of submissions\n */\nconst TagAttrs = types.model({\n  allowSubmit: types.optional(types.boolean, true),\n  label: types.optional(types.string, \"\"),\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  placeholder: types.maybeNull(types.string),\n  maxsubmissions: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"textarea\",\n    regions: types.array(TextAreaRegionModel),\n\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get submissionsNum() {\n      return self.regions.length;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    get showSubmit() {\n      if (self.maxsubmissions) {\n        const num = parseInt(self.maxsubmissions);\n        return self.submissionsNum < num;\n      } else {\n        return true;\n      }\n    },\n  }))\n  .actions(self => ({\n    setValue(value) {\n      self._value = value;\n    },\n\n    addText(text, pid) {\n      const r = TextAreaRegionModel.create({\n        pid: pid,\n        _value: text,\n      });\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      return r;\n    },\n\n    beforeSend() {\n      if (self._value && self._value.length) {\n        self.addText(self._value);\n      }\n    },\n\n    deleteText(text) {\n      destroy(text);\n    },\n\n    toStateJSON() {\n      const toname = self.toname || self.name;\n\n      return [\n        self.regions.map(r => {\n          return {\n            id: r.pid,\n            from_name: self.name,\n            to_name: toname,\n            type: self.type,\n            value: {\n              text: r._value,\n            },\n          };\n        }),\n      ];\n    },\n\n    fromStateJSON(obj, fromModel) {\n      return self.addText(obj.value.text, obj.id);\n    },\n  }));\n\nconst TextAreaModel = types.compose(\n  \"TextAreaModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxTextArea = observer(({ item }) => {\n  return (\n    <div>\n      {item.regions.length > 0 && (\n        <div style={{ marginTop: \"1em\", marginBottom: \"1em\" }}>\n          {item.regions.map(t => (\n            <HtxTextAreaRegion item={t} />\n          ))}\n        </div>\n      )}\n\n      {item.showSubmit && (\n        <Form\n          onSubmit={ev => {\n            if (item.allowSubmit) {\n              item.addText(item._value);\n              item.setValue(\"\");\n            }\n\n            ev.preventDefault();\n            return false;\n          }}\n        >\n          <Form.Input\n            value={item._value}\n            className=\"is-search\"\n            label={item.label}\n            placeholder={item.placeholder}\n            onChange={ev => {\n              const { value } = ev.target;\n              item.setValue(value);\n            }}\n          />\n        </Form>\n      )}\n    </div>\n  );\n});\n\nRegistry.addTag(\"textarea\", TextAreaModel, HtxTextArea);\n\nexport { TextAreaModel, HtxTextArea };\n","import React from \"react\";\n\nimport Registry from \"../../core/Registry\";\nimport { types } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\nimport { SortableContainer, SortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport arrayMove from \"array-move\";\nimport { List } from \"semantic-ui-react\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { variableNotation } from \"../../core/Template\";\n\nconst ListItemModel = types\n  .model({\n    backgroundColor: types.optional(types.string, \"transparent\"),\n    value: types.maybeNull(types.string),\n    _value: types.maybeNull(types.string),\n    selected: types.optional(types.boolean, false),\n    idx: types.number,\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setBG(val) {\n      self.backgroundColor = val;\n    },\n\n    setIdx(idx) {\n      self.idx = idx;\n    },\n\n    setSelected(val) {\n      self.selected = val;\n    },\n  }));\n\n/**\n * List element, used for ranking results. Great choice for recomendation systems.\n * @example\n * <View>\n *  <HyperText value=\"$markup\"></HyperText>\n *  <List name=\"ranker\" value=\"$replies\" elementValue=\"$text\" elementTag=\"Text\" ranked=\"true\" sortedHighlightColor=\"#fcfff5\"></List>\n * </View>\n * @name List\n * @param {string} elementValue lookup key for child object\n * @param {Text|Image|Audio} elementTag element used to render children\n * @param {string} value list value\n * @param {string} name of group\n * @param {string=} sortedHighlightColor color\n * @param {string=} axis axis used for drag-n-drop\n * @param {string=} lockAxis lock axis\n */\nconst TagAttrs = types.model({\n  axis: types.optional(types.string, \"y\"),\n  lockaxis: types.maybeNull(types.string),\n\n  elementvalue: types.maybeNull(types.string),\n  elementtag: types.optional(types.string, \"Text\"),\n  // ranked: types.optional(types.string, \"true\"),\n  // sortable: types.optional(types.string, \"true\"),\n\n  sortedhighlightcolor: types.maybeNull(types.string),\n\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"list\",\n    update: types.optional(types.number, 1),\n\n    regions: types.array(ListItemModel),\n    // update: types.optional(types.boolean, false)\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setUpdate() {\n      self.update = self.update + 1;\n    },\n\n    addRegion(vals, idx) {\n      const reg = ListItemModel.create({\n        value: self.elementvalue,\n        idx: idx,\n        _value: variableNotation(self.elementvalue, vals[idx]),\n      });\n\n      self.regions.push(reg);\n    },\n\n    updateValue(store) {\n      const val = variableNotation(self.value, store.task.dataObj);\n\n      // in case we're in expert mode it will call updateValue\n      // on each new task loaded, therefore we need to remove\n      // previously loaded regions here\n      self.regions = [];\n      val.forEach((v, idx) => self.addRegion(val, idx));\n\n      val.forEach((v, idx) => {\n        v[\"_orig_idx\"] = idx;\n      });\n\n      self._value = val;\n      self.setUpdate();\n    },\n\n    moveItems({ oldIndex, newIndex }) {\n      if (oldIndex === newIndex) return;\n\n      if (self.sortedhighlightcolor) {\n        self.regions[oldIndex].setBG(self.sortedhighlightcolor);\n      }\n\n      self.regions[oldIndex].setSelected(true);\n\n      if (self._value) self._value = arrayMove(self._value, oldIndex, newIndex);\n\n      self.regions = arrayMove(self.regions, oldIndex, newIndex);\n      self.setUpdate();\n    },\n\n    toStateJSON() {\n      const map = {};\n\n      self._value.forEach((v, idx) => {\n        map[self.regions[idx].idx] = 1 / (1 + idx);\n      });\n\n      const ranked = Object.keys(map)\n        .sort((a, b) => a - b)\n        .map(function(v) {\n          return map[v];\n        });\n\n      const selected = [];\n      for (let i = 0; i < Object.keys(map).length; i++) {\n        selected[self.regions[i].idx] = self.regions[i].selected ? 1 : 0;\n      }\n\n      return {\n        from_name: self.name,\n        to_name: self.name,\n        value: {\n          weights: ranked,\n          selected: selected,\n        },\n      };\n    },\n\n    fromStateJSON(obj, fromModel) {\n      const ranked = [];\n      const regions = [];\n      const item_weight = {};\n\n      obj.value.weights.forEach((v, idx) => {\n        if (item_weight[v]) {\n          item_weight[v].push(idx);\n        } else {\n          item_weight[v] = [idx];\n        }\n      });\n\n      Object.keys(item_weight)\n        .sort((a, b) => b - a)\n        .forEach(v => {\n          const idxes = item_weight[v];\n          idxes.forEach(idx => {\n            regions.push(self.regions[idx]);\n            ranked.push(self._value[idx]);\n          });\n        });\n\n      regions.forEach((r, idx) => r.setIdx(idx));\n\n      self._value = ranked;\n      self.regions = regions;\n\n      // self.regions = ranked;\n      self.setUpdate();\n    },\n  }));\n\nconst ListModel = types.compose(\n  \"ListModel\",\n  TagAttrs,\n  Model,\n);\n\nconst DragHandle = sortableHandle(() => <div className=\"drag-handle\"></div>);\n\nfunction isMobileDevice() {\n  try {\n    return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf(\"IEMobile\") !== -1;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst SortableText = SortableElement(({ item, value }) => {\n  let classNames;\n  if (isMobileDevice) {\n    classNames = \"noselect\";\n  }\n\n  const map = {\n    text: v => <span className={classNames}>{v._value}</span>,\n    image: v => <img src={v._value} alt=\"image\" />,\n    audio: v => <audio src={v._value} />,\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"1em\",\n        userSelect: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        background: value.selected ? item.sortedhighlightcolor : \"transparent\",\n      }}\n      className={classNames}\n      onClick={ev => {\n        if (value.selected) {\n          value.setSelected(false);\n          item.setUpdate();\n        } else {\n          value.setSelected(true);\n          item.setUpdate();\n        }\n        ev.preventDefault();\n        return false;\n      }}\n    >\n      <DragHandle />\n      {map[item.elementtag.toLowerCase()](value)}\n    </div>\n  );\n});\n\nconst SortableList = SortableContainer(({ item, items }) => {\n  return (\n    <List celled>\n      {items.map((value, index) => (\n        <SortableText\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          color={value.backgroundColor}\n          item={item}\n          onClick={ev => {}}\n        />\n      ))}\n    </List>\n  );\n});\n\nconst HtxListView = observer(({ store, item }) => {\n  const props = {};\n  if (isMobileDevice()) {\n    props[\"pressDelay\"] = 100;\n  } else {\n    props[\"distance\"] = 7;\n  }\n\n  return (\n    <div>\n      <SortableList update={item.update} item={item} items={item.regions} onSortEnd={item.moveItems} {...props} />\n    </div>\n  );\n});\n\nconst HtxList = inject(\"store\")(observer(HtxListView));\n\nRegistry.addTag(\"list\", ListModel, HtxList);\n\nexport { ListModel, HtxList };\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Registry from \"../../core/Registry\";\nimport { types, getParentOfType, destroy, getRoot, getParent } from \"mobx-state-tree\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { SortableContainer, SortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport arrayMove from \"array-move\";\nimport { List } from \"semantic-ui-react\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { runTemplate, variableNotation } from \"../../core/Template\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nconst RankerItemModel = types\n  .model({\n    backgroundColor: types.optional(types.string, \"transparent\"),\n    value: types.maybeNull(types.string),\n    _value: types.maybeNull(types.string),\n    selected: types.optional(types.boolean, false),\n    idx: types.number,\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setBG(val) {\n      self.backgroundColor = val;\n    },\n\n    setIdx(idx) {\n      self.idx = idx;\n    },\n\n    setSelected(val) {\n      self.selected = val;\n    },\n  }));\n\n/**\n * Ranker tag, used to ranking models\n * @example\n * <View>\n *   <Ranker name=\"ranker\" value=\"$items\"></Ranker>\n * </View>\n * @name Ranker\n * @param {string} name of group\n * @param {y|x=} [axis=y] axis direction\n * @param {string} sortedHighlightColor sorted color\n */\nconst TagAttrs = types.model({\n  axis: types.optional(types.string, \"y\"),\n  lockaxis: types.maybeNull(types.string),\n\n  // elementvalue: types.maybeNull(types.string),\n  elementtag: types.optional(types.string, \"Text\"),\n  ranked: types.optional(types.boolean, true),\n  sortable: types.optional(types.boolean, true),\n\n  sortedhighlightcolor: types.maybeNull(types.string),\n\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"ranker\",\n    update: types.optional(types.number, 1),\n\n    regions: types.array(RankerItemModel),\n    // update: types.optional(types.boolean, false)\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setUpdate() {\n      self.update = self.update + 1;\n    },\n\n    _addRegion(val, idx) {\n      const reg = RankerItemModel.create({\n        value: val,\n        idx: idx,\n        _value: val,\n      });\n\n      self.regions.push(reg);\n    },\n\n    moveItems({ oldIndex, newIndex }) {\n      if (oldIndex == newIndex) return;\n\n      if (self.sortedhighlightcolor) {\n        self.regions[oldIndex].setBG(self.sortedhighlightcolor);\n      }\n\n      self.regions[oldIndex].setSelected(true);\n\n      if (self._value) self._value = arrayMove(self._value, oldIndex, newIndex);\n\n      self.regions = arrayMove(self.regions, oldIndex, newIndex);\n      self.setUpdate();\n    },\n\n    toStateJSON() {\n      return {\n        from_name: self.name,\n        to_name: self.name,\n        value: {\n          // weights: ranked,\n          items: self.regions.map(r => r.value),\n          selected: self.regions.map(r => r.selected),\n        },\n      };\n    },\n\n    fromStateJSON(obj, fromModel) {\n      obj.value.items.forEach((v, idx) => {\n        self._addRegion(v, idx);\n      });\n\n      self.setUpdate();\n    },\n  }));\n\nconst RankerModel = types.compose(\n  \"RankerModel\",\n  TagAttrs,\n  Model,\n);\n\nconst DragHandle = sortableHandle(() => <div className=\"drag-handle\"></div>);\n\nfunction isMobileDevice() {\n  try {\n    return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf(\"IEMobile\") !== -1;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst SortableText = SortableElement(({ item, value }) => {\n  let classNames;\n  if (isMobileDevice) {\n    classNames = \"noselect\";\n  }\n\n  const map = {\n    text: v => <span className={classNames}>{v._value}</span>,\n    image: v => <img src={v._value} />,\n    audio: v => <audio src={v._value} />,\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"1em\",\n        userSelect: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        background: value.selected ? item.sortedhighlightcolor : \"transparent\",\n      }}\n      className={classNames}\n      onClick={ev => {\n        if (value.selected) {\n          value.setSelected(false);\n          item.setUpdate();\n        } else {\n          value.setSelected(true);\n          item.setUpdate();\n        }\n        ev.preventDefault();\n        return false;\n      }}\n    >\n      <DragHandle />\n      {map[item.elementtag.toLowerCase()](value)}\n    </div>\n  );\n});\n\nconst SortableList = SortableContainer(({ item, items }) => {\n  return (\n    <List celled>\n      {items.map((value, index) => (\n        <SortableText\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          color={value.backgroundColor}\n          item={item}\n          onClick={ev => {}}\n        />\n      ))}\n    </List>\n  );\n});\n\nconst HtxRankerView = observer(({ store, item }) => {\n  const props = {};\n  if (isMobileDevice()) {\n    props[\"pressDelay\"] = 100;\n  } else {\n    props[\"distance\"] = 7;\n  }\n\n  return (\n    <div>\n      <SortableList update={item.update} item={item} items={item.regions} onSortEnd={item.moveItems} {...props} />\n    </div>\n  );\n});\n\nconst HtxRanker = inject(\"store\")(observer(HtxRankerView));\n\nRegistry.addTag(\"ranker\", RankerModel, HtxRanker);\n\nexport { RankerModel, HtxRanker };\n","/**\n * Libraries\n */\nimport React, { Component } from \"react\";\nimport parse5 from \"parse5\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, getSnapshot } from \"mobx-state-tree\";\nimport { Result, Spin } from \"antd\";\n\n/**\n * Core\n */\nimport Registry from \"../../core/Registry\";\nimport Requests from \"../../core/Requests\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Tree from \"../../core/Tree\";\n\n/**\n * Components\n */\nimport Completions from \"../Completions/Completions\";\nimport Predictions from \"../Predictions/Predictions\";\nimport Controls from \"../Controls/Controls\";\nimport Panel from \"../Panel/Panel\";\nimport Settings from \"../Settings/Settings\";\nimport Debug from \"../Debug\";\nimport SideColumn from \"../SideColumn/SideColumn\";\nimport Segment from \"../Segment/Segment\";\n\n/**\n * Visual\n */\nimport { ViewModel } from \"../../interfaces/visual/View\";\nimport { TableModel } from \"../../interfaces/visual/Table\";\nimport { HeaderModel } from \"../../interfaces/visual/Header\";\nimport { HyperTextModel } from \"../../interfaces/visual/HyperText\";\nimport { DialogModel } from \"../../interfaces/visual/Dialog\";\n\n/**\n * Object\n */\nimport { AudioModel } from \"../../interfaces/object/Audio\";\nimport { AudioPlusModel } from \"../../interfaces/object/AudioPlus\";\nimport { ImageModel } from \"../../interfaces/object/Image\";\nimport { TextModel } from \"../../interfaces/object/Text\";\n\n/**\n * Control\n */\nimport { RectangleModel } from \"../../interfaces/control/Rectangle\";\nimport { KeyPointModel } from \"../../interfaces/control/KeyPoint\";\nimport { KeyPointLabelsModel } from \"../../interfaces/control/KeyPointLabels\";\nimport { PolygonModel } from \"../../interfaces/control/Polygon\";\nimport { RectangleLabelsModel } from \"../../interfaces/control/RectangleLabels\";\nimport { PolygonLabelsModel } from \"../../interfaces/control/PolygonLabels\";\nimport { ChoicesModel } from \"../../interfaces/control/Choices\";\nimport { TextAreaModel } from \"../../interfaces/control/TextArea\";\nimport { RatingModel } from \"../../interfaces/control/Rating\";\nimport { ListModel } from \"../../interfaces/control/List\";\nimport { RankerModel } from \"../../interfaces/control/Ranker\";\n\n/**\n * Styles\n */\nimport styles from \"./App.module.scss\";\n\n/**\n * App\n */\nconst App = inject(\"store\")(\n  observer(\n    class App extends Component {\n      renderSuccess() {\n        return <Result status=\"success\" title=\"Done!\" />;\n      }\n\n      renderNoCompletion() {\n        return <Result status=\"success\" title=\"No more completions\" />;\n      }\n\n      renderNothingToLabel() {\n        return <Result status=\"success\" title=\"No more data available for labeling\" />;\n      }\n\n      renderLoader() {\n        return <Result icon={<Spin size=\"large\" />} />;\n      }\n\n      render() {\n        const self = this;\n        const { store } = self.props;\n        let root;\n\n        if (store.completionStore.currentCompletion) {\n          root = store.completionStore.currentCompletion.root;\n        } else if (store.completionStore.currentPrediction) {\n          root = store.completionStore.currentPrediction.root;\n        }\n\n        if (store.isLoading) return self.renderLoader();\n\n        if (store.noTask) return self.renderNothingToLabel();\n\n        if (store.labeledSuccess) return self.renderSuccess();\n\n        if (!store.completionStore.currentCompletion && !store.completionStore.currentPrediction) {\n          return self.renderNoCompletion();\n        }\n\n        return (\n          <div className={styles.editor}>\n            <Settings store={store} />\n            <Provider store={store}>\n              <div>\n                {store.hasInterface(\"panel\") && <Panel store={store} />}\n\n                {store.showingDescription && (\n                  <Segment>\n                    <div dangerouslySetInnerHTML={{ __html: store.description }} />\n                  </Segment>\n                )}\n\n                <div className={styles.common}>\n                  <Segment>\n                    {Tree.renderItem(root)}\n                    {store.hasInterface(\"controls\") && <Controls />}\n                  </Segment>\n\n                  <div className={styles.menu}>\n                    {store.hasInterface(\"completions:menu\") && <Completions store={store} />}\n\n                    {store.hasInterface(\"predictions:menu\") && <Predictions store={store} />}\n\n                    {store.hasInterface(\"side-column\") && <SideColumn store={store} />}\n                  </div>\n                </div>\n              </div>\n            </Provider>\n            {store.hasInterface(\"debug\") && <Debug store={store} />}\n          </div>\n        );\n      }\n    },\n  ),\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types, getParent } from \"mobx-state-tree\";\n\nimport Utilities from \"../utils\";\n\n/**\n * Task Store\n */\nconst TaskStore = types\n  .model(\"Task\", {\n    /**\n     * Id of task\n     */\n    id: types.identifierNumber,\n    /**\n     * Data of task, may contain an object but in App Store will be transformed into string\n     * MST doesn't support processing of dynamic objects with unkown keys value\n     */\n    data: types.maybeNull(types.string),\n    // data: types.maybeNull(TaskData),\n    /**\n     * Id of project\n     */\n    project: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get app() {\n      return getParent(self);\n    },\n\n    /**\n     * Return JSON with task data\n     * @returns {object}\n     */\n    get dataObj() {\n      if (Utilities.Checkers.isStringJSON(self.data)) {\n        return JSON.parse(self.data);\n      } else if (typeof self.data === \"object\") {\n        return self.data;\n      } else {\n        return null;\n      }\n    },\n  }));\n\nexport default TaskStore;\n","import { types } from \"mobx-state-tree\";\n\n/**\n * User store of Label Studio\n */\nconst UserStore = types.model(\"UserStore\", {\n  /**\n   * Personal key of user\n   */\n  pk: types.integer,\n  /**\n   * Name of user\n   */\n  firstName: types.string,\n  /**\n   * Last name of user\n   */\n  lastName: types.string,\n});\n\nexport default UserStore;\n","import keymaster from \"keymaster\";\n\nlet _hotkeys_map = {};\n\n/**\n * Add key\n * @param {*} key\n * @param {*} func\n */\nfunction addKey(key, func) {\n  if (_hotkeys_map[key]) return;\n\n  _hotkeys_map[key] = true;\n  keymaster(key, \"main\", func);\n}\n\n/**\n * Unbund all hotkeys\n */\nfunction unbindAll() {\n  for (let key of Object.keys(_hotkeys_map)) keymaster.unbind(key);\n\n  _hotkeys_map = {};\n}\n\n/**\n * Set scope of hotkeys\n * @param {*} scope\n */\nfunction setScope(scope) {\n  keymaster.setScope(scope);\n}\n\n/**\n * Create combination\n */\nfunction makeComb() {\n  let prefix = null;\n  let st = \"1234567890qwertasdfgzxcvbyuiophjklnm\";\n  let combs = st.split(\"\");\n\n  for (var i = 0; i <= combs.length; i++) {\n    let comb;\n    if (prefix) comb = prefix + \"+\" + combs[i];\n    else comb = combs[i];\n\n    if (!_hotkeys_map.hasOwnProperty(comb)) return comb;\n  }\n\n  return null;\n}\n\nexport default { addKey, unbindAll, makeComb, setScope };\n","import { types } from \"mobx-state-tree\";\n\nimport Hotkey from \"../core/Hotkey\";\n\n/**\n * Setting store of Label Studio\n */\nconst SettingsModel = types\n  .model(\"SettingsModel\", {\n    /**\n     * Hotkey\n     */\n    enableHotkeys: types.optional(types.boolean, true),\n    /**\n     * Hotkey panel\n     */\n    enablePanelHotkeys: types.optional(types.boolean, true),\n    /**\n     * Tooltips preview\n     */\n    enableTooltips: types.optional(types.boolean, true),\n  })\n  .actions(self => ({\n    toggleHotkeys() {\n      self.enableHotkeys = !self.enableHotkeys;\n      if (self.enableHotkeys) {\n        Hotkey.setScope(\"main\");\n      } else {\n        Hotkey.setScope(\"none\");\n      }\n    },\n\n    /**\n     * Function to off/on panel of hotkeys\n     */\n    togglePanelHotkeys() {\n      self.enablePanelHotkeys = !self.enablePanelHotkeys;\n    },\n\n    /**\n     * Function to off/on tooltips\n     */\n    toggleTooltips() {\n      self.enableTooltips = !self.enableTooltips;\n    },\n  }));\n\nexport default SettingsModel;\n","import { types, resolvePath, getEnv, onSnapshot, getSnapshot, applySnapshot } from \"mobx-state-tree\";\nimport { IObservableArray } from \"mobx\";\n\nconst TimeTraveller = types\n  .model(\"TimeTraveller\", {\n    history: types.array(types.frozen()),\n    undoIdx: -1,\n    targetPath: \"\",\n\n    createdIdx: 1,\n\n    isFrozen: types.optional(types.boolean, false),\n    frozenIdx: -1,\n  })\n  .views(self => ({\n    get canUndo() {\n      // [TODO] since we initialize state a bit incorrectly we end up with 2 items in history\n      // before even any action takes place. To protect those items we keep them in history forever\n      return self.undoIdx > 1;\n    },\n    get canRedo() {\n      return self.undoIdx < self.history.length - 1;\n    },\n  }))\n  .actions(self => {\n    let targetStore;\n    let snapshotDisposer;\n    let skipNextUndoState = false;\n\n    return {\n      freeze() {\n        self.isFrozen = true;\n        skipNextUndoState = true;\n        self.frozenIdx = self.undoIdx;\n      },\n\n      addUndoState(ss) {\n        if (skipNextUndoState) {\n          // skip recording if this state was caused by undo / redo\n          skipNextUndoState = false;\n          return;\n        }\n        self.history.splice(self.undoIdx + 1);\n        self.history.push(ss);\n        self.undoIdx = self.history.length - 1;\n      },\n      afterCreate() {\n        targetStore = self.targetPath ? resolvePath(self, self.targetPath) : getEnv(self).targetStore;\n\n        if (!targetStore)\n          throw new Error(\n            \"Failed to find target store for TimeTraveller. Please provide `targetPath`  property, or a `targetStore` in the environment\",\n          );\n        // TODO: check if targetStore doesn't contain self\n        // if (contains(targetStore, self)) throw new Error(\"TimeTraveller shouldn't be recording itself. Please specify a sibling as taret, not some parent\")\n        // start listening to changes\n        snapshotDisposer = onSnapshot(targetStore, snapshot => this.addUndoState(snapshot));\n        // record an initial state if no known\n        if (self.history.length === 0) {\n          this.addUndoState(getSnapshot(targetStore));\n        }\n\n        self.createdIdx = self.undoIdx;\n      },\n      beforeDestroy() {\n        snapshotDisposer();\n      },\n      undo() {\n        if (self.isFrozen && self.frozenIdx <= self.undoIdx) return;\n\n        self.undoIdx--;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n      redo() {\n        self.undoIdx++;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n      set(idx) {\n        self.undoIdx = idx;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n      reset() {\n        self.undoIdx = 1;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n    };\n  });\n\nexport default TimeTraveller;\n","import { types, getParent, getEnv, flow, destroy, getMembers } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nconst Relation = types\n  .model(\"Relation\", {\n    node1: types.reference(\n      types.union(\n        HtxObjectModel.TextRegionModel,\n        HtxObjectModel.RectRegionModel,\n        HtxObjectModel.PolygonRegionModel,\n        HtxObjectModel.AudioRegionModel,\n        HtxObjectModel.TextAreaRegionModel,\n        HtxObjectModel.KeyPointRegionModel,\n      ),\n    ),\n    node2: types.reference(\n      types.union(\n        HtxObjectModel.TextRegionModel,\n        HtxObjectModel.RectRegionModel,\n        HtxObjectModel.PolygonRegionModel,\n        HtxObjectModel.AudioRegionModel,\n        HtxObjectModel.TextAreaRegionModel,\n        HtxObjectModel.KeyPointRegionModel,\n      ),\n    ),\n  })\n  .actions(self => ({\n    toggleHighlight() {\n      if (self.node1 == self.node2) {\n        self.node1.toggleHightlight();\n      } else {\n        self.node1.toggleHightlight();\n        self.node2.toggleHightlight();\n      }\n    },\n  }));\n\nexport default types\n  .model(\"RelationStore\", {\n    relations: types.array(Relation),\n  })\n  .actions(self => ({\n    findRelations(node1, node2) {\n      if (!node2) {\n        return self.relations.filter(rl => {\n          return rl.node1.id == node1.id || rl.node2.id == node1.id;\n        });\n      }\n\n      return self.relations.filter(rl => {\n        return rl.node1.id == node1.id && rl.node2.id == node2.id;\n      });\n    },\n\n    nodesRelated(node1, node2) {\n      return self.findRelations(node1, node2).length > 0;\n    },\n\n    addRelation(node1, node2) {\n      if (self.nodesRelated(node1, node2)) return;\n\n      const rl = Relation.create({\n        node1: node1,\n        node2: node2,\n      });\n\n      // self.relations.unshift(rl);\n      self.relations.push(rl);\n\n      return rl;\n    },\n\n    deleteRelation(rl) {\n      destroy(rl);\n    },\n\n    deleteNodeRelation(node) {\n      // lookup $node and delete it's relation\n      const rl = self.findRelations(node);\n      rl.length && rl.forEach(self.deleteRelation);\n    },\n\n    serializeCompletion() {\n      return self.relations.map(r => {\n        return {\n          from_id: r.node1.pid,\n          to_id: r.node2.pid,\n          type: \"relation\",\n        };\n      });\n    },\n\n    deserializeRelation(node1, node2) {\n      self.addRelation(node1, node2);\n    },\n  }));\n","import { types, getParent, getEnv, flow, destroy, getMembers } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport { TextRegionModel } from \"../interfaces/object/TextRegion\";\nimport { RectRegionModel } from \"../interfaces/object/RectRegion\";\nimport { AudioRegionModel } from \"../interfaces/object/AudioRegion\";\n\nconst Normalization = types\n  .model(\"Normalization\", {\n    node1: types.union(\n      types.reference(TextRegionModel),\n      types.reference(RectRegionModel),\n      types.reference(AudioRegionModel),\n    ),\n    node2: types.union(\n      types.reference(TextRegionModel),\n      types.reference(RectRegionModel),\n      types.reference(AudioRegionModel),\n    ),\n  })\n  .actions(self => ({\n    toggleHighlight() {\n      if (self.node1 == self.node2) {\n        self.node1.toggleHightlight();\n      } else {\n        self.node1.toggleHightlight();\n        self.node2.toggleHightlight();\n      }\n    },\n  }));\n\nexport default types\n  .model(\"NormalizationStore\", {\n    normalizations: types.array(Normalization),\n  })\n  .actions(self => ({\n    findNormalization(node1, node2) {\n      if (!node2) {\n        return self.normalizations.find(rl => {\n          return rl.node1.id == node1.id || rl.node2.id == node1.id;\n        });\n      }\n\n      return self.normalizations.find(rl => {\n        return rl.node1.id == node1.id && rl.node2.id == node2.id;\n      });\n    },\n\n    addNormalization(node1, node2) {\n      if (self.findNormalization(node1, node2)) return;\n\n      const rl = Normalization.create({\n        node1: node1,\n        node2: node2,\n      });\n\n      self.normalizations.unshift(rl);\n\n      return rl;\n    },\n\n    deleteNormalization(rl) {\n      destroy(rl);\n    },\n\n    deleteNodeNormalization(node) {\n      // lookup $node and delete it's normalization\n      const rl = self.findNormalization(node);\n\n      if (rl) self.deleteNormalization(rl);\n    },\n  }));\n","import { types, getParent } from \"mobx-state-tree\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nexport default types\n  .model(\"RegionStore\", {\n    regions: types.array(\n      types.safeReference(\n        types.union(\n          HtxObjectModel.TextRegionModel,\n          HtxObjectModel.RectRegionModel,\n          HtxObjectModel.PolygonRegionModel,\n          HtxObjectModel.AudioRegionModel,\n          HtxObjectModel.TextAreaRegionModel,\n          HtxObjectModel.KeyPointRegionModel,\n        ),\n      ),\n    ),\n  })\n  .actions(self => ({\n    addRegion(region) {\n      self.regions.push(region);\n    },\n\n    findRegion(pid) {\n      return self.regions.find(r => r.pid === pid);\n    },\n\n    /**\n     * Delete region\n     * @param {obj} region\n     */\n    deleteRegion(region) {\n      const arr = self.regions;\n\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === region) {\n          arr.splice(i, 1);\n        }\n      }\n    },\n\n    unselectAll() {\n      self.regions.forEach(r => r.unselectRegion());\n      getParent(self).setHighlightedNode(null);\n    },\n\n    unhighlightAll() {\n      self.regions.forEach(r => r.setHighlight(false));\n    },\n  }));\n","import { types, getParent, getEnv, flow, destroy } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport Registry from \"../core/Registry\";\nimport Tree from \"../core/Tree\";\nimport TimeTraveller from \"../core/TimeTraveller\";\nimport Hotkey from \"../core/Hotkey\";\n\nimport RelationStore from \"./RelationStore\";\nimport NormalizationStore from \"./NormalizationStore\";\nimport RegionStore from \"./RegionStore\";\nimport { RectangleModel } from \"../interfaces/control/Rectangle\";\nimport Utils from \"../utils\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nconst Completion = types\n  .model(\"Completion\", {\n    id: types.identifier,\n    pk: types.optional(types.string, guidGenerator(5)),\n    selected: types.optional(types.boolean, false),\n\n    createdDate: types.optional(types.string, Utils.UDate.currentISODate()),\n    createdAgo: types.maybeNull(types.string),\n    createdBy: types.optional(types.string, \"Admin\"),\n\n    userGenerate: types.optional(types.boolean, true),\n    update: types.optional(types.boolean, false),\n    sentUserGenerate: types.optional(types.boolean, false),\n\n    honeypot: types.optional(types.boolean, false),\n\n    root: Types.allModelsTypes(),\n    names: types.map(types.reference(Types.allModelsTypes())),\n    toNames: types.map(types.array(types.reference(Types.allModelsTypes()))),\n\n    history: types.optional(TimeTraveller, { targetPath: \"../root\" }),\n\n    dragMode: types.optional(types.boolean, false),\n\n    relationMode: types.optional(types.boolean, false),\n    relationStore: types.optional(RelationStore, {\n      relations: [],\n    }),\n\n    normalizationMode: types.optional(types.boolean, false),\n    normalizationStore: types.optional(NormalizationStore, {\n      normalizations: [],\n    }),\n\n    regionStore: types.optional(RegionStore, {\n      regions: [],\n    }),\n\n    highlightedNode: types.maybeNull(\n      types.union(\n        types.safeReference(HtxObjectModel.TextRegionModel),\n        types.safeReference(HtxObjectModel.RectRegionModel),\n        types.safeReference(HtxObjectModel.AudioRegionModel),\n        types.safeReference(HtxObjectModel.TextAreaRegionModel),\n        types.safeReference(HtxObjectModel.PolygonRegionModel),\n        types.safeReference(HtxObjectModel.KeyPointRegionModel),\n        types.safeReference(RectangleModel),\n      ),\n    ),\n  })\n  .views(self => ({\n    get store() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    reinitHistory() {\n      self.history = { targetPath: \"../root\" };\n    },\n    /**\n     * Send update to serve\n     * @param {*} state\n     */\n    _updateServerState(state) {\n      let appStore = getParent(self, 3);\n      let url = \"/api/tasks/\" + appStore.task.id + \"/completions/\" + self.pk + \"/\";\n\n      getEnv(self).patch(url, JSON.stringify(state));\n    },\n\n    setHoneypot() {\n      self.honeypot = true;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    sendUserGenerate() {\n      self.sentUserGenerate = true;\n    },\n\n    setDragMode(val) {\n      self.dragMode = val;\n    },\n\n    updatePersonalKey(value) {\n      self.pk = value;\n    },\n\n    setNormalizationMode(val) {\n      self.normalizationMode = val;\n    },\n\n    setHighlightedNode(node) {\n      self.highlightedNode = node;\n    },\n\n    startRelationMode(node1) {\n      self._relationObj = node1;\n      self.relationMode = true;\n    },\n\n    stopRelationMode() {\n      self._relationObj = null;\n      self.relationMode = false;\n\n      self.regionStore.unhighlightAll();\n    },\n\n    deleteAllRegions() {\n      self.regionStore.regions.forEach(r => r.deleteRegion());\n    },\n\n    addRegion(reg) {\n      self.regionStore.unselectAll();\n      self.regionStore.addRegion(reg);\n\n      if (self.relationMode) {\n        self.addRelation(reg);\n        self.stopRelationMode();\n      }\n    },\n\n    /**\n     * Add relation\n     * @param {*} reg\n     */\n    addRelation(reg) {\n      self.relationStore.addRelation(self._relationObj, reg);\n    },\n\n    addNormalization(normalization) {\n      self.normalizationStore.addNormalization();\n    },\n\n    /**\n     * Remove honeypot\n     */\n    removeHoneypot() {\n      self.honeypot = false;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    traverseTree(cb) {\n      let visitNode;\n\n      visitNode = function(node) {\n        cb(node);\n\n        if (node.children) {\n          node.children.forEach(chld => visitNode(chld));\n        }\n      };\n\n      visitNode(self.root);\n    },\n\n    /**\n     *\n     */\n    beforeSend() {\n      self.traverseTree(node => {\n        if (node && node.beforeSend) {\n          node.beforeSend();\n        }\n      });\n\n      self.stopRelationMode();\n      self.regionStore.unselectAll();\n    },\n\n    /**\n     * Delete region\n     * @param {*} region\n     */\n    deleteRegion(region) {\n      destroy(region);\n    },\n\n    afterCreate() {\n      self.traverseTree(node => {\n        // create mapping from name to Model (by ref)\n        if (node && node.name && node.id) self.names.set(node.name, node.id);\n\n        if (node && node.toname && node.id) {\n          const val = self.toNames.get(node.toname);\n          if (val) {\n            val.push(node.id);\n          } else {\n            self.toNames.set(node.toname, [node.id]);\n          }\n        }\n      });\n\n      Hotkey.unbindAll();\n\n      // [TODO] we need to traverse this two times, fix\n      self.traverseTree(node => {\n        if (node && node.onHotKey && node.hotkey) {\n          Hotkey.addKey(node.hotkey, node.onHotKey);\n        }\n\n        /**\n         * Hotkey for controls\n         */\n        if (node && node.onHotKey && !node.hotkey) {\n          const comb = Hotkey.makeComb();\n\n          if (!comb) return;\n\n          node.hotkey = comb;\n          Hotkey.addKey(node.hotkey, node.onHotKey);\n        }\n      });\n\n      Hotkey.setScope(\"main\");\n    },\n\n    serializeCompletion() {\n      const arr = [];\n\n      self.traverseTree(node => {\n        if (node.toStateJSON) {\n          const val = node.toStateJSON();\n\n          if (val) arr.push(val);\n        }\n      });\n\n      const relations = self.relationStore.serializeCompletion();\n      if (relations) arr.push(relations);\n\n      const flatten = arr => {\n        return arr.reduce(function(flat, toFlatten) {\n          return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n        }, []);\n      };\n\n      return flatten(arr);\n    },\n\n    /**\n     * Deserialize completion of models\n     */\n    deserializeCompletion(json) {\n      let objCompletion = json;\n\n      if (typeof objCompletion !== \"object\") {\n        objCompletion = JSON.parse(objCompletion);\n      }\n\n      objCompletion.forEach(obj => {\n        if (obj[\"type\"] !== \"relation\") {\n          const names = obj.to_name.split(\",\");\n          names.forEach(name => {\n            const toModel = self.names.get(name);\n            if (!toModel) throw new Error(\"No model found for \" + obj.to_name);\n\n            const fromModel = self.names.get(obj.from_name);\n            if (!fromModel) throw new Error(\"No model found for \" + obj.from_name);\n\n            toModel.fromStateJSON(obj, fromModel);\n          });\n        } else {\n          self.relationStore.deserializeRelation(\n            self.regionStore.findRegion(obj.from_id),\n            self.regionStore.findRegion(obj.to_id),\n          );\n        }\n      });\n    },\n  }));\n\nexport default types\n  .model(\"CompletionStore\", {\n    completions: types.array(Completion),\n    selected: types.maybeNull(types.reference(Completion)),\n    predictions: types.array(Completion),\n    predictSelect: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    /**\n     * Get current completion\n     */\n    get currentCompletion() {\n      return self.selected && self.completions.find(c => c.id === self.selected.id);\n    },\n\n    get currentPrediction() {\n      return self.selected && self.predictions.find(c => c.id === self.selected.id);\n    },\n\n    /**\n     * Get parent\n     */\n    get store() {\n      return getParent(self);\n    },\n\n    /**\n     * Get only those that were saved\n     */\n    get savedCompletions() {\n      return self.completions.filter(c => c);\n    },\n  }))\n  .actions(self => {\n    function selectedPredict() {\n      self.predictSelect = true;\n    }\n\n    function unSelectedPredict() {\n      self.predictSelect = false;\n    }\n\n    /**\n     * Select completion\n     * @param {*} id\n     */\n    function selectCompletion(id) {\n      self.completions.map(c => (c.selected = false));\n      if (self.predictions) self.predictions.map(c => (c.selected = false));\n      const c = self.completions.find(c => c.id === id);\n      unSelectedPredict();\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    function selectPrediction(id) {\n      self.predictions.map(c => (c.selected = false));\n      self.completions.map(c => (c.selected = false));\n      const c = self.predictions.find(c => c.id === id);\n      selectedPredict();\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    /**\n     * Adding new completion\n     * @param {object} node\n     * @param {string} type\n     */\n    function addCompletion(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdCompletion = Completion.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && type === \"initial\") {\n        createdCompletion.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.completions.unshift(createdCompletion);\n\n      return createdCompletion;\n    }\n\n    function addPredictionItem(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdPrediction = Completion.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && type === \"initial\") {\n        createdPrediction.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.predictions.unshift(createdPrediction);\n\n      return createdPrediction;\n    }\n\n    /**\n     * Send request to server for delete completion\n     */\n    const _deleteCompletion = flow(function* _deleteCompletion(pk) {\n      try {\n        const json = yield getEnv(self).remove(\"/api/tasks/\" + self.store.task.id + \"/completions/\" + pk + \"/\");\n      } catch (err) {\n        console.error(\"Failed to skip task \", err);\n      }\n    });\n\n    /**\n     * Destroy completion\n     * @param {*} completion\n     */\n    function destroyCompletion(completion) {\n      /**\n       * MST destroy completion\n       */\n      destroy(completion);\n\n      self.selected = null;\n      /**\n       * Select other completion\n       */\n      if (self.completions.length > 0) {\n        self.selectCompletion(self.completions[0].id);\n      }\n    }\n\n    function deleteCompletion(completion) {\n      _deleteCompletion(completion.pk);\n      destroyCompletion(completion);\n    }\n\n    /**\n     *\n     * @param {*} c\n     */\n    function addSavedCompletion(c) {\n      const completionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      let root = modelClass.create(completionModel);\n\n      const node = {\n        id: c.id || guidGenerator(5),\n        pk: c.id,\n        createdAgo: c.created_ago,\n        createdBy: c.created_username,\n        honeypot: c.honeypot,\n        root: root,\n        userGenerate: false,\n      };\n\n      const completion = self.addCompletion(node, \"list\");\n\n      return completion;\n    }\n\n    function addPrediction(prediction) {\n      const predictionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(predictionModel.type);\n\n      let root = modelClass.create(predictionModel);\n\n      const node = {\n        id: prediction.id || guidGenerator(),\n        pk: prediction.id,\n        createdAgo: prediction.created_ago,\n        createdBy: prediction.model_version,\n        root: root,\n      };\n\n      const returnPredict = self.addPredictionItem(node, \"list\");\n\n      return returnPredict;\n    }\n\n    /**\n     * Initial Completion\n     * @returns {object}\n     */\n    function addInitialCompletion() {\n      /**\n       * Convert config to model\n       */\n      const completionModel = Tree.treeToModel(self.store.config);\n\n      /**\n       * Get model by type of tag\n       */\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      /**\n       * Completion model init\n       */\n      let root = modelClass.create(completionModel);\n\n      const node = {\n        id: guidGenerator(5),\n        root: root,\n      };\n\n      /**\n       * Expert module for initial completion\n       */\n      if (self.store.expert) {\n        const { expert } = self.store;\n\n        node[\"createdBy\"] = `${expert.firstName} ${expert.lastName}`;\n      }\n\n      /**\n       *\n       */\n      const completion = self.addCompletion(node, \"initial\");\n\n      return completion;\n    }\n\n    function addUserCompletion() {\n      /**\n       * Convert config to model\n       */\n      const completionModel = Tree.treeToModel(self.store.config);\n\n      /**\n       * Get model by type of tag\n       */\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      /**\n       * Completion model init\n       */\n      let root = modelClass.create(completionModel);\n\n      const node = {\n        id: guidGenerator(5),\n        root: root,\n        userGenerate: true,\n      };\n\n      /**\n       * Expert module for initial completion\n       */\n      if (self.store.expert) {\n        const { expert } = self.store;\n\n        node[\"createdBy\"] = `${expert.firstName} ${expert.lastName}`;\n      }\n\n      /**\n       *\n       */\n      const completion = self.addCompletion(node, \"initial\");\n\n      self.selectCompletion(node.id);\n\n      return completion;\n    }\n\n    return {\n      selectCompletion,\n      selectPrediction,\n      addCompletion,\n      deleteCompletion,\n      destroyCompletion,\n      addInitialCompletion,\n      addSavedCompletion,\n      addUserCompletion,\n      addPrediction,\n      addPredictionItem,\n    };\n  });\n","import { types, getParent, getEnv, flow, destroy } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport Registry from \"../core/Registry\";\nimport Tree from \"../core/Tree\";\nimport TimeTraveller from \"../core/TimeTraveller\";\n\nimport RelationStore from \"./RelationStore\";\nimport NormalizationStore from \"./NormalizationStore\";\nimport RegionStore from \"./RegionStore\";\nimport { RectangleModel } from \"../interfaces/control/Rectangle\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nconst Prediction = types\n  .model(\"Prediction\", {\n    id: types.identifier,\n    selected: types.optional(types.boolean, false),\n\n    createdDate: types.optional(types.string, new Date().toISOString()),\n    createdAgo: types.maybeNull(types.string),\n    model: types.optional(types.string, \"Model\"),\n\n    root: Types.allModelsTypes(),\n    names: types.map(types.reference(Types.allModelsTypes())),\n    toNames: types.map(types.array(types.reference(Types.allModelsTypes()))),\n\n    history: types.optional(TimeTraveller, { targetPath: \"../root\" }),\n\n    dragMode: types.optional(types.boolean, false),\n\n    relationMode: types.optional(types.boolean, false),\n    relationStore: types.optional(RelationStore, {\n      relations: [],\n    }),\n\n    normalizationMode: types.optional(types.boolean, false),\n    normalizationStore: types.optional(NormalizationStore, {\n      normalizations: [],\n    }),\n\n    regionStore: types.optional(RegionStore, {\n      regions: [],\n    }),\n\n    highlightedNode: types.maybeNull(\n      types.union(\n        types.safeReference(HtxObjectModel.TextRegionModel),\n        types.safeReference(HtxObjectModel.RectRegionModel),\n        types.safeReference(HtxObjectModel.AudioRegionModel),\n        types.safeReference(HtxObjectModel.TextAreaRegionModel),\n        types.safeReference(HtxObjectModel.PolygonRegionModel),\n        types.safeReference(RectangleModel),\n      ),\n    ),\n  })\n  .views(self => ({\n    get store() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    reinitHistory() {\n      self.history = { targetPath: \"../root\" };\n    },\n\n    setDragMode(val) {\n      self.dragMode = val;\n    },\n\n    setNormalizationMode(val) {\n      self.normalizationMode = val;\n    },\n\n    setHighlightedNode(node) {\n      self.highlightedNode = node;\n    },\n\n    startRelationMode(node1) {\n      self._relationObj = node1;\n      self.relationMode = true;\n    },\n\n    stopRelationMode() {\n      self._relationObj = null;\n      self.relationMode = false;\n\n      self.regionStore.unhighlightAll();\n    },\n\n    unselectPrediction() {\n      self.selected = false;\n    },\n\n    addRegion(reg) {\n      self.regionStore.unselectAll();\n      self.regionStore.addRegion(reg);\n\n      if (self.relationMode) {\n        self.addRelation(reg);\n        self.stopRelationMode();\n      }\n    },\n\n    /**\n     * Add relation\n     * @param {*} reg\n     */\n    addRelation(reg) {\n      self.relationStore.addRelation(self._relationObj, reg);\n    },\n\n    addNormalization(normalization) {\n      self.normalizationStore.addNormalization();\n    },\n\n    /**\n     * Remove honeypot\n     */\n    removeHoneypot() {\n      self.honeypot = false;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    traverseTree(cb) {\n      let visitNode;\n\n      visitNode = function(node) {\n        cb(node);\n\n        if (node.children) {\n          node.children.forEach(chld => visitNode(chld));\n        }\n      };\n\n      visitNode(self.root);\n    },\n\n    /**\n     *\n     */\n    beforeSend() {\n      self.traverseTree(node => {\n        if (node && node.beforeSend) {\n          node.beforeSend();\n        }\n      });\n\n      self.stopRelationMode();\n      self.regionStore.unselectAll();\n    },\n\n    /**\n     * Delete region\n     * @param {*} region\n     */\n    deleteRegion(region) {\n      destroy(region);\n    },\n\n    /**\n     * Deserialize predictions of models\n     */\n    deserializePrediction(json) {\n      json.forEach(obj => {\n        if (obj[\"type\"] !== \"relation\") {\n          const names = obj.to_name.split(\",\");\n          names.forEach(name => {\n            const toModel = self.store.store.completionStore.selected.names.get(name);\n            if (!toModel) throw new Error(\"No model found for \" + obj.to_name);\n\n            const fromModel = self.store.store.completionStore.selected.names.get(obj.from_name);\n            if (!fromModel) throw new Error(\"No model found for \" + obj.from_name);\n\n            toModel.fromStateJSON(obj, fromModel);\n          });\n        } else {\n          self.relationStore.deserializeRelation(\n            self.regionStore.findRegion(obj.from_id),\n            self.regionStore.findRegion(obj.to_id),\n          );\n        }\n      });\n    },\n  }));\n\nexport default types\n  .model(\"PredictionStore\", {\n    predictions: types.array(Prediction),\n    selected: types.maybeNull(types.reference(Prediction)),\n  })\n  .views(self => ({\n    /**\n     * Get current completion\n     */\n    get currentPrediction() {\n      return self.selected && self.predictions.find(c => c.id === self.selected.id);\n    },\n\n    /**\n     * Get parent\n     */\n    get store() {\n      return getParent(self);\n    },\n\n    /**\n     * Get only those that were saved\n     */\n    get savedPredictions() {\n      return self.predictions.filter(c => c);\n    },\n  }))\n  .actions(self => {\n    /**\n     *\n     * @param {*} id\n     */\n    function selectPrediction(id) {\n      self.store.completionStore.selected && self.store.completionStore.selected.unselectCompletion();\n\n      self.predictions.map(c => (c.selected = false));\n      const c = self.predictions.find(c => c.id === id);\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    /**\n     * Adding new completion\n     * @param {object} node\n     * @param {string} type\n     */\n    function addPredictionItem(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdPrediction = Prediction.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && type === \"initial\") {\n        createdPrediction.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.predictions.push(createdPrediction);\n\n      return createdPrediction;\n    }\n\n    /**\n     * Initial Completion\n     * @returns {object}\n     */\n    function addInitialPrediction() {\n      /**\n       * Convert config to model\n       */\n      const predictionModel = Tree.treeToModel(self.store.config);\n\n      /**\n       * Get model by type of tag\n       */\n      const modelClass = Registry.getModelByTag(predictionModel.type);\n\n      /**\n       * Completion model init\n       */\n      let root = modelClass.create(predictionModel);\n\n      const node = {\n        id: guidGenerator(),\n        root: root,\n      };\n\n      /**\n       *\n       */\n      const prediction = self.addPrediction(node, \"initial\");\n\n      return prediction;\n    }\n\n    /**\n     *\n     * @param {*} c\n     */\n    function addPrediction(c) {\n      const predictionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(predictionModel.type);\n\n      let root = modelClass.create(predictionModel);\n\n      const node = {\n        pk: c.id,\n        id: c.id || guidGenerator(),\n        createdAgo: c.created_ago,\n        model: c.model_version,\n        root: root,\n      };\n\n      const prediction = self.addPredictionItem(node, \"list\");\n\n      console.log(prediction);\n\n      return prediction;\n    }\n\n    function destroyPrediction(prediction) {\n      destroy(prediction);\n\n      self.selected = null;\n      if (self.predictions.length > 0) self.selectPrediction(self.predictions[0].id);\n    }\n\n    return {\n      selectPrediction,\n      addPredictionItem,\n      addPrediction,\n      addInitialPrediction,\n      destroyPrediction,\n    };\n  });\n","export const API_URL = {\n  MAIN: \"/api\",\n  TASKS: \"/tasks\",\n  COMPLETIONS: \"/completions\",\n  CANCEL: \"/cancel\",\n  PROJECTS: \"/projects\",\n  NEXT: \"/next\",\n  EXPERT_INSRUCTIONS: \"/expert_instruction\",\n};\n","import { types, getEnv, flow, getSnapshot } from \"mobx-state-tree\";\n\nimport Task from \"./TaskStore\";\nimport User from \"./UserStore\";\nimport Settings from \"./SettingsStore\";\nimport CompletionStore from \"./CompletionStore\";\nimport PredictionStore from \"./PredictionStore\";\nimport Hotkey from \"../core/Hotkey\";\nimport { API_URL } from \"../constants/Api\";\nimport Utils from \"../utils\";\n\nexport default types\n  .model(\"AppStore\", {\n    /**\n     *\n     */\n    config: types.string,\n\n    /**\n     * Task with data, id and project\n     */\n    task: types.maybeNull(Task),\n    /**\n     * ID of task\n     */\n    taskID: types.maybeNull(types.number),\n\n    /**\n     * Interfaces for configure Label Studio\n     */\n    interfaces: types.array(types.string),\n    /**\n     * Flag fo labeling of tasks\n     */\n    explore: types.optional(types.boolean, false),\n\n    /**\n     * Completions Store\n     */\n    completionStore: types.optional(CompletionStore, {\n      completions: [],\n      predictions: [],\n    }),\n\n    /**\n     * Predictions Store\n     */\n    // predictionStore: types.optional(PredictionStore, {\n    //   predictions: [],\n    // }),\n\n    /**\n     * Project ID from platform\n     */\n    projectID: types.integer,\n\n    /**\n     * Expert of Label Studio\n     */\n    expert: User,\n\n    /**\n     * Debug for development environment\n     */\n    debug: types.optional(types.boolean, true),\n\n    /**\n     * Settings of Label Studio\n     */\n    settings: types.optional(Settings, {}),\n\n    /**\n     * Flag for settings\n     */\n    showingSettings: types.optional(types.boolean, false),\n    /**\n     * Flag\n     * Description of task in Label Studio\n     */\n    showingDescription: types.optional(types.boolean, false),\n    /**\n     * Data of description flag\n     */\n    description: types.maybeNull(types.string),\n    /**\n     * Loading of Label Studio\n     */\n    isLoading: types.optional(types.boolean, false),\n    /**\n     * Flag for disable task in Label Studio\n     */\n    noTask: types.optional(types.boolean, false),\n    /**\n     * Finish of labeling\n     */\n    labeledSuccess: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    /**\n     * Get fetch request\n     */\n    get fetch() {\n      return getEnv(self).fetch;\n    },\n    /**\n     * Get alert\n     */\n    get alert() {\n      return getEnv(self).alert;\n    },\n    /**\n     * Get pot request\n     */\n    get post() {\n      return getEnv(self).post;\n    },\n  }))\n  .actions(self => {\n    /**\n     * Update description of task\n     * @param {string} text\n     */\n    function setDescription(text) {\n      self.description = text;\n    }\n\n    /**\n     * Update settings display state\n     */\n    function toggleSettings() {\n      self.showingSettings = !self.showingSettings;\n    }\n\n    /**\n     * Request to get description of this task\n     */\n    const openDescription = flow(function* openDescription() {\n      let url = `${API_URL.MAIN}${API_URL.PROJECTS}/${self.projectID}${API_URL.EXPERT_INSRUCTIONS}`;\n\n      const res = yield self.fetch(url);\n\n      if (res.status === 200) {\n        res.text().then(function(text) {\n          if (text.length) {\n            self.setDescription(text);\n          } else {\n            /**\n             * Default message if description is missing in Platform\n             */\n            self.setDescription(\"No instructions for this task.\");\n          }\n        });\n      } else {\n        self.setDescription(\"No instructions for this task.\");\n      }\n\n      /**\n       * Show description\n       */\n      self.showingDescription = true;\n    });\n\n    /**\n     * Close description of Label Studio\n     */\n    function closeDescription() {\n      self.showingDescription = false;\n    }\n\n    function markLoading(loading) {\n      self.isLoading = loading;\n    }\n\n    /**\n     * Check for interfaces\n     * @param {string} name\n     * @returns {string | undefined}\n     */\n    function hasInterface(name) {\n      return self.interfaces.find(i => name === i);\n    }\n\n    /**\n     * Function\n     */\n    const afterCreate = function() {\n      self.loadTask();\n\n      /**\n       * Hotkey for submit\n       */\n      Hotkey.addKey(\"ctrl+enter\", self.sendTask);\n\n      /**\n       * Hotkey for skip task\n       */\n      if (self.hasInterface(\"skip\")) Hotkey.addKey(\"ctrl+space\", self.skipTask);\n\n      /**\n       * Hotkey for update completion\n       */\n      if (self.hasInterface(\"update\")) Hotkey.addKey(\"alt+enter\", self.updateTask);\n\n      /**\n       * Hotkey for delete\n       */\n      Hotkey.addKey(\"ctrl+backspace\", function() {\n        const { selected } = self.completionStore;\n        selected.deleteAllRegions();\n      });\n\n      Hotkey.addKey(\"ctrl+z\", function() {\n        const { history } = self.completionStore.selected;\n        history && history.canUndo && history.undo();\n      });\n\n      Hotkey.addKey(\"escape\", function() {\n        const c = self.completionStore.selected;\n        if (c && c.relationMode) {\n          c.stopRelationMode();\n        }\n      });\n\n      Hotkey.addKey(\"backspace\", function() {\n        const c = self.completionStore.selected;\n        if (c && c.highlightedNode) {\n          c.highlightedNode.deleteRegion();\n        }\n      });\n    };\n\n    /**\n     * Load task from API\n     */\n    function loadTask() {\n      if (self.taskID) {\n        return loadTaskAPI(`${API_URL.MAIN}${API_URL.TASKS}/${self.taskID}/`);\n      } else if (self.explore && self.projectID) {\n        return loadTaskAPI(`${API_URL.MAIN}${API_URL.PROJECTS}/${self.projectID}${API_URL.NEXT}`);\n      }\n    }\n\n    /**\n     *\n     * @param {*} taskObject\n     */\n    function addTask(taskObject) {\n      if (taskObject && !Utils.Checkers.isString(taskObject.data)) {\n        taskObject = {\n          ...taskObject,\n          [taskObject.data]: JSON.stringify(taskObject.data),\n        };\n      }\n      self.task = Task.create(taskObject);\n    }\n\n    /**\n     * Reset completion store\n     */\n    function resetState() {\n      self.completionStore = CompletionStore.create({ completions: [] });\n      const c = self.completionStore.addInitialCompletion();\n\n      self.completionStore.selectCompletion(c.id);\n    }\n\n    /**\n     * Load task from API\n     */\n    const loadTaskAPI = flow(function*(url) {\n      try {\n        const res = yield self.fetch(url);\n\n        if (res instanceof Response && res.status === 404) {\n          self.markLoading(false);\n          self.noTask = true;\n          return;\n        }\n\n        res.json().then(function(r) {\n          r.data = JSON.stringify(r.data);\n\n          self.addTask(r);\n          self.markLoading(false);\n\n          if (self.hasInterface(\"completions\") && r.completions) {\n            self.completionStore.destroyCompletion(self.completionStore.selected);\n\n            for (var i = 0; i < r.completions.length; i++) {\n              const c = r.completions[i];\n\n              if (c.was_cancelled === true) continue;\n\n              const comp = self.completionStore.addSavedCompletion(c);\n              comp.traverseTree(node => node.updateValue && node.updateValue(self));\n              self.completionStore.selectCompletion(comp.id);\n              comp.deserializeCompletion(c.result);\n              comp.reinitHistory();\n            }\n          } else {\n            if (self.completionStore.selected)\n              self.completionStore.selected.traverseTree(node => node.updateValue && node.updateValue(self));\n\n            // self.addGeneratedCompletion(r);\n          }\n\n          if (self.hasInterface(\"predictions\") && r.predictions) {\n            if (r.predictions && r.predictions.length) {\n              for (let i = 0; i < r.predictions.length; i++) {\n                const pred = self.completionStore.addPrediction(r.predictions[i]);\n                pred.traverseTree(node => node.updateValue && node.updateValue(self));\n                self.completionStore.selectPrediction(pred.id);\n                pred.deserializeCompletion(r.predictions[i].result);\n                pred.reinitHistory();\n              }\n            }\n          }\n        });\n      } catch (err) {\n        console.error(\"Failed to load next task \", err);\n      }\n    });\n\n    /**\n     * Skip current task\n     */\n    const skipTask = flow(function* skipTask() {\n      self.markLoading(true);\n\n      try {\n        const json = yield self.post(\n          `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.CANCEL}`,\n          JSON.stringify({ data: JSON.stringify({ error: \"cancelled\" }) }),\n        );\n\n        self.resetState();\n\n        return loadTask();\n      } catch (err) {\n        console.error(\"Failed to skip task \", err);\n      }\n    });\n\n    /**\n     * Wrapper of completion send\n     * @param {string} requestType {patch or post}\n     */\n    const sendToServer = requestType => {\n      return flow(function*() {\n        const c = self.completionStore.selected;\n\n        c.beforeSend();\n\n        const res = c.serializeCompletion();\n\n        if (self.hasInterface(\"check-empty\") && res.length === 0) {\n          alert(\"You need to label at least something!\");\n          return;\n        }\n\n        self.markLoading(true);\n\n        try {\n          const state = getSnapshot(c);\n\n          const body = JSON.stringify({\n            state: JSON.stringify(state),\n            result: res,\n          });\n\n          if (requestType === \"patch\") {\n            yield getEnv(self).patch(\n              `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.COMPLETIONS}/${c.pk}/`,\n              body,\n            );\n          } else if (requestType === \"post\") {\n            const responseCompletion = yield self.post(\n              `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.COMPLETIONS}/`,\n              body,\n            );\n\n            const data = yield responseCompletion.json();\n            if (data && data.id) {\n              self.completionStore.selected.updatePersonalKey(data.id.toString());\n            }\n          }\n\n          if (hasInterface(\"load\")) {\n            self.resetState();\n            return loadTask();\n          } else {\n            self.markLoading(false);\n            self.completionStore.selected.sendUserGenerate();\n\n            if (self.explore && self.projectID) {\n              self.labeledSuccess = true;\n            }\n          }\n\n          // delete state.history;\n        } catch (err) {\n          console.error(\"Failed to send task \", err);\n        }\n      });\n    };\n\n    /**\n     * Update current completion\n     */\n    const updateTask = sendToServer(\"patch\");\n\n    /**\n     * Send current completion\n     */\n    const sendTask = sendToServer(\"post\");\n\n    /**\n     * Function to initilaze completion store\n     */\n    function initializeStore({ completions, predictions }) {\n      /**\n       * Array of generated completions\n       */\n      let generatedCompletions = [];\n\n      if (predictions && predictions.length) {\n        for (let i = 0; i < predictions.length; i++) {\n          const pred = self.completionStore.addPrediction(predictions[i]);\n          pred.traverseTree(node => node.updateValue && node.updateValue(self));\n          self.completionStore.selectPrediction(pred.id);\n\n          pred.deserializeCompletion(predictions[i].result);\n          pred.reinitHistory();\n        }\n      }\n\n      /**\n       * Completions in initialize\n       */\n      if (completions && completions.length) {\n        for (let i = 0; i < completions.length; i++) {\n          const itemOfCompletion = completions[i];\n\n          /**\n           * If user skip task, we skip completion state\n           */\n          if (itemOfCompletion.was_cancelled === true) continue;\n\n          /**\n           * Add to array new completion\n           */\n          generatedCompletions.push(itemOfCompletion);\n        }\n      }\n\n      if (!completions || completions.length === 0) {\n        const c = self.completionStore.addInitialCompletion();\n        self.completionStore.selectCompletion(c.id);\n\n        if (generatedCompletions.length > 0) {\n          self.completionStore.destroyCompletion(self.completionStore.selected);\n\n          for (let iC = 0; iC < generatedCompletions.length; iC++) {\n            const comp = self.completionStore.addSavedCompletion(generatedCompletions[iC]);\n            comp.traverseTree(node => node.updateValue && node.updateValue(self));\n            self.completionStore.selectCompletion(comp.id);\n\n            comp.deserializeCompletion(generatedCompletions[iC].result);\n            comp.reinitHistory();\n          }\n        }\n      } else {\n        for (let iC = 0; iC < generatedCompletions.length; iC++) {\n          const comp = self.completionStore.addSavedCompletion(generatedCompletions[iC]);\n          comp.traverseTree(node => node.updateValue && node.updateValue(self));\n          self.completionStore.selectCompletion(comp.id);\n\n          comp.deserializeCompletion(generatedCompletions[iC].result);\n          comp.reinitHistory();\n        }\n      }\n    }\n\n    return {\n      afterCreate,\n      loadTask,\n      addTask,\n      hasInterface,\n      skipTask,\n      sendTask,\n      updateTask,\n      markLoading,\n      resetState,\n      openDescription,\n      closeDescription,\n      setDescription,\n      toggleSettings,\n      initializeStore,\n    };\n  });\n","function getData() {\n  /**\n   * TODO\n   * Remove, this is here because MST either takes string or a fully features typed tree\n   */\n  if (window.taskData && window.taskData.data) {\n    window.taskData.data = JSON.stringify(window.taskData.data);\n  }\n\n  const data = {\n    /**\n     * Project ID\n     */\n    projectID: window.projectID,\n    /**\n     * Loading of LS\n     */\n    isLoading: false,\n    /**\n     * Config in XML format\n     */\n    config: window.editorAppConfig,\n    /**\n     * Task ID\n     */\n    taskID: window.taskID,\n    /**\n     * Task data\n     */\n    task: window.taskData,\n    /**\n     * Expert\n     */\n    expert: window.expertData,\n    /**\n     * Debug mode of LS\n     */\n    debug: window.debugEditor,\n    /**\n     * Interfaces of LS\n     */\n    interfaces: window.editorInterfaces ? window.editorInterfaces : [\"basic\", \"completions\"],\n    /**\n     * Flag for display completions of task\n     */\n    explore: window.explore,\n  };\n\n  /**\n   * This is here to make project_render_editor to work because it expects static config\n   */\n  if (window.preRender) {\n    data[\"task\"] = window.taskData;\n  }\n\n  /**\n   * window.explore used for display completions\n   */\n  if (window.explore) {\n    data[\"interfaces\"] = window.editorInterfaces ? window.editorInterfaces : [\"completions\"];\n  } else {\n    data[\"interfaces\"] = window.editorInterfaces ? window.editorInterfaces : [\"submit\", \"skip\"];\n  }\n\n  return data;\n}\n\n/**\n * LS will render in this part\n * TODO: Change #root to #L\n */\nfunction rootElement() {\n  const el = document.createElement(\"div\");\n\n  let root = document.getElementById(\"label-studio\");\n\n  root.innerHTML = \"\";\n  root.appendChild(el);\n\n  return el;\n}\n\n/**\n * Get current state of LS\n */\nfunction getState() {\n  const completions = window.taskData && window.taskData.completions ? window.taskData.completions : null;\n  const predictions = window.taskData && window.taskData.predictions ? window.taskData.predictions : null;\n\n  return {\n    completions: completions,\n    predictions: predictions,\n  };\n}\n\nexport default { getData, getState, rootElement };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const Sentiment = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const AudioClassification = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const AudioRegions = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const ChatbotAnalysis = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const ImageBbox = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const ImagePolygons = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const ImageKeyPoint = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const ImageMultilabel = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const NamedEntity = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const References = { config, tasks, completion };\n","import { Sentiment } from \"../examples/sentiment_analysis\";\nimport { AudioClassification } from \"../examples/audio_classification\";\nimport { AudioRegions } from \"../examples/audio_regions\";\nimport { ChatbotAnalysis } from \"../examples/chatbot_analysis\";\nimport { ImageBbox } from \"../examples/image_bbox\";\nimport { ImagePolygons } from \"../examples/image_polygons\";\nimport { ImageKeyPoint } from \"../examples/image_keypoints\";\nimport { ImageMultilabel } from \"../examples/image_multilabel\";\nimport { NamedEntity } from \"../examples/named_entity\";\nimport { References } from \"../examples/references\";\nimport { TranscribeAudio } from \"../examples/transcribe_audio\";\n\n/**\n * Choose labeling scheme\n */\nlet dataType = Sentiment;\n\nfunction templateDynamicData() {\n  let settings = {\n    /**\n     * For development environment\n     */\n    developmentEnv: true,\n    /**\n     * Project ID\n     */\n    projectID: 1,\n    /**\n     * Flag to display completion\n     */\n    viewCompletion: true,\n    /**\n     * Loading of LS\n     */\n    isLoading: false,\n    /**\n     * Expert\n     */\n    expert: {\n      pk: 1,\n      lastName: \"Jones\",\n      firstName: \"Oliver\",\n    },\n    /**\n     * Debug\n     */\n    debug: window.location.search.indexOf(\"debug=true\") !== -1,\n    interfaces: window.editorInterfaces\n      ? window.editorInterfaces\n      : [\n          \"controls\",\n          \"predictions\",\n          \"completions\",\n          \"completions:menu\",\n          \"predictions:menu\",\n          \"panel\",\n          \"side-column\",\n          \"update\",\n          \"check-empty\",\n        ],\n    task: {\n      data: JSON.stringify(dataType.tasks[0]),\n      project: 10,\n      id: 100,\n      completions: [],\n      predictions: [],\n    },\n  };\n\n  if (settings.viewCompletion && dataType.completion) {\n    settings = {\n      ...settings,\n      task: {\n        ...settings.task,\n        completions: dataType.completion.completions,\n        predictions: dataType.completion.predictions,\n      },\n    };\n  }\n\n  let reqXML = () =>\n    fetch(dataType.config)\n      .then(resp => resp.text())\n      .then(r => {\n        settings = {\n          ...settings,\n          config: r,\n        };\n\n        return settings;\n      });\n\n  return reqXML();\n}\n\nfunction getData() {\n  return templateDynamicData();\n}\n\n/**\n * Get completions for task\n */\nasync function getState() {\n  const resp = await getData();\n  /**\n   * Completions\n   */\n  const resultCompletions = resp.task.completions ? resp.task.completions : null;\n  /**\n   * Predictions for Platform\n   */\n  const resultPredictions = resp.task.predictions ? resp.task.predictions : null;\n\n  return {\n    completions: resultCompletions,\n    predictions: resultPredictions,\n  };\n}\n\n/**\n * Function to return Root element\n */\nfunction rootElement() {\n  const el = document.createElement(\"div\");\n\n  let root = document.getElementById(\"label-studio\");\n\n  root.innerHTML = \"\";\n  root.appendChild(el);\n\n  root.style.margin = \"0 auto\";\n\n  return el;\n}\n\nexport default { getState, getData, rootElement };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/1.json\";\n\nexport const TranscribeAudio = { config, tasks, completion };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./assets/styles/global.scss\";\n\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport AppStore from \"./stores/AppStore\";\nimport Requests from \"./core/Requests\";\n\nimport ProductionEnviroment from \"./env/production\";\nimport DevelopmentEnvironment from \"./env/development\";\n\nlet enviroment = DevelopmentEnvironment;\n\nif (process.env.NODE_ENV === \"production\") {\n  enviroment = ProductionEnviroment;\n\n  const app = AppStore.create(enviroment.getData(), {\n    fetch: Requests.fetcher,\n    patch: Requests.patch,\n    post: Requests.poster,\n    remove: Requests.remover,\n    alert: m => console.log(m), // Noop for demo: window.alert(m)\n  });\n\n  /**\n   * Initialize store\n   */\n  app.initializeStore(enviroment.getState());\n\n  window.Htx = app;\n\n  ReactDOM.render(\n    <Provider store={app}>\n      <App />\n    </Provider>,\n    enviroment.rootElement(),\n  );\n} else {\n  enviroment = DevelopmentEnvironment;\n\n  enviroment.getData().then(resp => {\n    const app = AppStore.create(resp, {\n      fetch: Requests.fetcher,\n      patch: Requests.patch,\n      post: Requests.poster,\n      remove: Requests.remover,\n      alert: m => console.log(m), // Noop for demo: window.alert(m)\n    });\n\n    /**\n     * Initialize store\n     */\n    enviroment.getState().then(state => {\n      app.initializeStore(state);\n    });\n\n    window.Htx = app;\n\n    ReactDOM.render(\n      <Provider store={app}>\n        <App />\n      </Provider>,\n      enviroment.rootElement(),\n    );\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Completions_buttons__2YII_\",\"completion\":\"Completions_completion__oF0zk\",\"completion_selected\":\"Completions_completion_selected__yEozY\",\"title\":\"Completions_title__mo6gq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Entity_block__2XspI\",\"button\":\"Entity_button__bWlfa\",\"labels\":\"Entity_labels__tjrgz\",\"tag\":\"Entity_tag__35G8T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"skip\":\"Controls_skip__10Js5\",\"task\":\"Controls_task__15i-O\",\"container\":\"Controls_container__3DhBP\",\"block\":\"Controls_block__1OeQq\",\"wrapper\":\"Controls_wrapper__GzSbP\",\"rewrite\":\"Controls_rewrite__3zE7C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Dialog_block__1YBml\",\"block_selected\":\"Dialog_block_selected__3zZ50\",\"name\":\"Dialog_name__3tjId\",\"tag\":\"Dialog_tag__1SHCG\",\"date\":\"Dialog_date__1mcxh\"};"],"sourceRoot":""}