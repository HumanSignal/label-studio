<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
  
  
    
    
    <entry>
      <title></title>
      <link href="/index.html"/>
      <url>/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/index.html"/>
      <url>/blog/index.html</url>
      
        <content type="html"><![CDATA[<style>  h1 {    margin-top: 2.5em !important;  }  .content {    max-width: 1200px !important;    width: unset !important;    margin: 60px auto 50px auto;    padding: 0;  }  .blog-body {    margin-bottom: 100px;  }  .grid {    display: -webkit-box;    display: -ms-flexbox;    display: flex;    -webkit-box-orient: horizontal;    -webkit-box-direction: normal;    -ms-flex-direction: row;    flex-direction: row;    -ms-flex-wrap: wrap;    flex-wrap: wrap;    -webkit-box-align: stretch;    -ms-flex-align: stretch;    align-items: stretch;    padding: 0;  }  .column {    width: 50% !important;  }  .highlight {      border: 2px solid rgba(244, 138, 66, 0.75);  }  .card {    margin: 2em 1em;  }  .card .image-wrap {    transition: linear 0.25s;    border-radius: 7px;    box-shadow: 0 0 2px rgba(0, 0, 0, 0.3);    padding: 5px;    opacity: 0.8;  }  .card .image-wrap:hover {    opacity: 1;    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);    transition: linear 0.25s;  }  .card .image-wrap .image {    margin: 0 auto;    width: 95%;    height: 250px;    background-size: contain;    background-repeat: no-repeat;    background-position: center center;  }  .card .category {    cursor: pointer;    display: inline-block;    color: $green;    margin-top: 18px;    font-size: 80%;    font-weight: 500;    letter-spacing: .08em;    text-transform: uppercase;  }  .card .title {    margin-top: 0.5em;    font-size: 130%;    font-weight: bold;    color: #555;  }  .card .desc {    float: right;    margin-top: 18px;    font-size: 80%;    font-weight: normal;    color: #777;  }  @media screen and (max-width: 900px) {    @media only screen and (max-width: 768px) {      .grid {        width: auto;        margin-left: 0 !important;        margin-right: 0 !important;      }      .column {        width: 100% !important;        margin: 0 0 !important;        -webkit-box-shadow: none !important;        box-shadow: none !important;        padding: 1rem 1rem !important;      }    }  }</style><div class="blog-body">  <div class="grid">    <!-- Transfer learning with PyTorch -->    <!-- <div class="column"> -->    <!--   <a href="/notebook/transfer-learning-tutorial.html"> -->    <!--     <div class="card"> -->    <!--       <div class="image-wrap"> -->    <!--         <div style="background-image: url(/images/release-050-views.png)" class="image"></div> -->    <!--       </div> -->    <!--       <div class="category">tutorial</div> -->    <!--       <div class="desc">31 Mar 2020, 5 min read</div> -->    <!--       <div class="title">Transfer learning with PyTorch</div> -->    <!--     </div> -->    <!--   </a> -->    <!-- </div> -->    <!-- Release 0.7.0 -->    <div class="column">      <a href="/blog/release-070-cloud-storage-enablement.html">        <div class="card">          <div class="image-wrap">            <div style="background-image: url(/images/release-070/s3-mascot-04.png); background-size:cover" class="image"></div>          </div>          <div class="category">release notes</div>          <div class="desc">29 May 2020, 5 min read</div>          <div class="title">Label Studio 0.7.0 Release - Cloud Storage Enablement</div>        </div>      </a>    </div>    <!-- News letters -->    <div class="column">      <div class="card">        <div class="image-wrap highlight">          <center>            <div class="title">Label Studio Newsletter</div>            <p>We send a periodic newsletter announcing new features as well as some ML-related papers, label techniques that are innovative and funny stories.</p>            <iframe src="https://labelstudio.substack.com/embed" frameborder="0" scrolling="no" style="width:90%"></iframe>          </center>        </div>      </div>          </div>        <!-- Release 0.6.0 -->    <div class="column">      <a href="/blog/release-060-nested-data-labeling.html">        <div class="card">          <div class="image-wrap">            <div style="background-image: url(/images/release-060/nested_labeling.gif); background-size:cover" class="image"></div>          </div>          <div class="category">release notes</div>          <div class="desc">8 May 2020, 7 min read</div>          <div class="title">Label Studio 0.6.0 Release - Nested Data Labeling</div>        </div>      </a>    </div>        <!-- Release 0.5.0 -->    <div class="column">      <a href="/blog/release-050.html">        <div class="card">          <div class="image-wrap">            <div style="background-image: url(/images/release-050-views.png)" class="image"></div>          </div>          <div class="category">release notes</div>          <div class="desc">9 Mar 2020, 5 min read</div>          <div class="title">Label Studio 0.5.0 Release - Relations</div>        </div>      </a>    </div>    <!-- Bert -->    <div class="column">      <a href="https://towardsdatascience.com/how-to-finetune-bert-to-classify-your-slack-chats-without-coding-3a7002936bcf" target="_blank" rel="noopener">        <div class="card">          <div class="image-wrap">            <div class="image" style="background-image: url(/images/ls-bert-slack.jpg)"></div>          </div>          <div class="category">tutorial</div>          <div class="desc">18 Feb 2020, 5 min read</div>          <div class="title">How to fine-tune BERT to classify your Slack chats without coding</div>        </div>      </a>    </div>    <!-- Intro LS -->    <div class="column">      <a href="https://towardsdatascience.com/introducing-label-studio-a-swiss-army-knife-of-data-labeling-140c1be92881" target="_blank" rel="noopener">        <div class="card">          <div class="image-wrap">            <div class="image" style="background-image: url(/images/annotation_examples.gif)"></div>          </div>          <div class="category">article</div>          <div class="desc">28 Jan 2020, 8 min read</div>          <div class="title">Introducing Label Studio, a swiss army knife of data labeling</div>        </div>      </a>    </div>    <!-- AL -->    <div class="column">      <a href="https://towardsdatascience.com/learn-faster-with-smarter-data-labeling-15d0272614c4" target="_blank" rel="noopener">        <div class="card">          <div class="image-wrap">            <div class="image" style="background-image: url(/images/AL-learn-fast.png)"></div>          </div>          <div class="category">article</div>          <div class="desc">21 Aug 2019, 8 min read</div>          <div class="title">Learn faster with smarter data labeling</div>        </div>      </a>    </div>  </div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Label Studio Release Notes 0.5.0</title>
      <link href="/blog/release-050.html"/>
      <url>/blog/release-050.html</url>
      
        <content type="html"><![CDATA[<p>A month in the making, this new release brings a lot of bugfixes, updated documentation, and of course, a set of new features that have been requested. </p><h2 id="Label-Studio-Frontend"><a href="#Label-Studio-Frontend" class="headerlink" title="Label Studio Frontend"></a>Label Studio Frontend</h2><h3 id="Relations-labeling"><a href="#Relations-labeling" class="headerlink" title="Relations labeling"></a>Relations labeling</h3><p>You can create relations between labeled regions. For example, if you put two bounding boxes, you can connect them with a relation. We’ve extended the functionality to include the direction of the relation, and the possibly label the relation. Here is an example config for that:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Relations</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Is A"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Has Function"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Involved In"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Related To"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Relations</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lbl-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Subject"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Object"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Named-Entity-Recognition-performance"><a href="#Named-Entity-Recognition-performance" class="headerlink" title="Named Entity Recognition performance"></a>Named Entity Recognition performance</h3><p>NER got an update, nested entities representation is more apparent now, and it’s optimized to support large texts.</p><br><img src="/images/release-050-ner.png"><h3 id="Image-Segmentation"><a href="#Image-Segmentation" class="headerlink" title="Image Segmentation"></a>Image Segmentation</h3><p>Initial implementation of the image segmentation using masks. You get two controls, brush with configurable size, and eraser. The output format is RLE implemented by <a href="https://www.npmjs.com/package/@thi.ng/rle-pack" target="_blank" rel="noopener">rle-pack</a> library.</p><p>There is a <a href="/templates/image_segmentation.html">new template</a> available that provides more information about the setup.</p><h3 id="Changing-the-labels"><a href="#Changing-the-labels" class="headerlink" title="Changing the labels"></a>Changing the labels</h3><p>Changing the labels of the existing regions is now easy and supported for any of the data types.</p><h3 id="Validate-labeling-before-submitting"><a href="#Validate-labeling-before-submitting" class="headerlink" title="Validate labeling before submitting"></a>Validate labeling before submitting</h3><p>Simple validation to protect you from empty results. When choices or labels are required you can specify <code>required=true</code> parameter for the <labels> or <choices> tag.</choices></labels></p><h3 id="Labels-and-Choices-now-support-more-markup"><a href="#Labels-and-Choices-now-support-more-markup" class="headerlink" title="Labels and Choices now support more markup"></a>Labels and Choices now support more markup</h3><p>That enables you to build more complex interfaces. Here is an example that puts labels into different groups:</p><br><img src="/images/release-050-views.png" style="max-width: 732px"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"label"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">required</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"multiple"</span> &gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: flex; flex-direction: row; padding-left: 2em; padding-right: 2em; margin-bottom: 3em"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"padding: 1em 4em; background: rgba(255,0,0,0.1)"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Speaker Gender"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Business"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Politics"</span> /&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"padding: 1em 4em; background: rgba(255,255,0,0.1)"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Speach Type"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Legible"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Slurred"</span> /&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"padding: 1em 4em; background: rgba(0,0,255,0.1)"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Additional"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Echo"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Noises"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Music"</span> /&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Audio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$url"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Image-Ellipses-labeling"><a href="#Image-Ellipses-labeling" class="headerlink" title="Image Ellipses labeling"></a>Image Ellipses labeling</h3><p>A significant contribution from <a href="https://github.com/lrlunin" target="_blank" rel="noopener">@lrlunin</a>, implementing ellipses labeling for the images, checkout the <a href="/templates/image_ellipse.html">template</a>.</p><img src="/images/screens/image_ellipse.png" class="img-template-example" title="Images Ellipse"><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><ul><li><p><strong>zoomControl, brightnessControl and contrastControl for the image tag</strong> - zoom has been available for sometime, but now there is an additional toolbar that can be created if one of the above params is provided to the <image> tag.</image></p></li><li><p><strong>select each region with shift+alt+number</strong> - hotkeys to quickly navigate the regions</p></li><li><p><strong>settings now show the hotkeys</strong> - show the defined and available hotkeys inside the Hotkeys tab in the Settings</p></li><li><p><strong>simplifying the creation of concave polygons</strong> - polygons are not closed unless fully defined, that enables you to create concave polygons easily</p></li><li><p><strong>HyperText works with its body</strong> now you can put in HTML right into the HyperText tag, here is an example config:</p></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">HyperText</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HyperText</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h2 id="Label-Studio-Backend"><a href="#Label-Studio-Backend" class="headerlink" title="Label Studio Backend"></a>Label Studio Backend</h2><h3 id="Multiplatform"><a href="#Multiplatform" class="headerlink" title="Multiplatform"></a>Multiplatform</h3><p>Support for Windows, MacOSX, Linux with Python 3.5 or greater</p><h3 id="Extended-import-possibilities"><a href="#Extended-import-possibilities" class="headerlink" title="Extended import possibilities"></a>Extended import possibilities</h3><p>There are now several ways on how you can import your tasks for labeling:</p><ul><li>uploading files via <a href="http://localhost:8080/import" target="_blank" rel="noopener">web UI</a></li><li>by <a href="/guide/tasks.html#Import-formats">specifying path</a> to a file or directory with images, audios or text files on Label Studio initialization</li><li>using <a href="/guide/tasks.html#Import-using-API">import API</a></li></ul><h3 id="On-the-fly-labeling-config-validation"><a href="#On-the-fly-labeling-config-validation" class="headerlink" title="On-the-fly labeling config validation"></a>On-the-fly labeling config validation</h3><p>Previously changing a config after importing or labeling tasks could be dangerous because of created tasks/completions invalidation, therefore this was switched off. Now you should not worry about that - labeling config validation is taken on the fly considering the data already created. You can freely change the appearance of your project on <a href="http://localhost:8080/setup" target="_blank" rel="noopener">setup page</a> and even add new labels - when you modify something crucial, you’ll be alerted about.</p><h3 id="Exporting-with-automatic-converters"><a href="#Exporting-with-automatic-converters" class="headerlink" title="Exporting with automatic converters"></a>Exporting with automatic converters</h3><p>When finishing your project - go to the <a href="http://localhost:8080/export" target="_blank" rel="noopener">export page</a> and choose in between the <a href="/guide/export.html#Export-formats">common export formats</a> valid for your current project configuration.</p><h3 id="Connection-to-running-Machine-Learning-backend"><a href="#Connection-to-running-Machine-Learning-backend" class="headerlink" title="Connection to running Machine Learning backend"></a>Connection to running Machine Learning backend</h3><p><a href="/guide/ml.html">Connecting to a running machine learning backend</a> allows you to retrain your model continually and visually inspect how its predictions behave on tasks. Just specify ML backend URL when launching Label Studio, and start labeling.</p><h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><h3 id="Docker-support"><a href="#Docker-support" class="headerlink" title="Docker support"></a>Docker support</h3><p>Now Label Studio is also maintained and distributed as Docker container - <a href="/guide/index.html#Running-with-Docker">run one-liner</a> to build your own cloud labeling solution.</p><h3 id="Multisession-mode"><a href="#Multisession-mode" class="headerlink" title="Multisession mode"></a>Multisession mode</h3><p>You can launch Label Studio in <a href="/guide/#Multisession-mode">multisession mode</a> - then each browser session dynamically creates its own project. </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Label Studio Release Notes 0.6.0 - Nested Data Labeling</title>
      <link href="/blog/release-060-nested-data-labeling.html"/>
      <url>/blog/release-060-nested-data-labeling.html</url>
      
        <content type="html"><![CDATA[<p>Two months in the baking, this release features the evolution of the labeling interface into supporting not only multiple data types and labeling scenarios, but also exploring the path of bringing additional dimensions into the labeling task. Along with that purely UI work a major update to the model assisted labeling.</p><p>We’ve had a panel for the predictions for a while, the idea behind it is to provide a set of predictions possibly coming from different models to explore and adjust, and now there is a new models page to easier manage what is connected and used for generating those predictions.</p><p>Here is more on the results of this update: </p><h2 id="Nested-Labeling"><a href="#Nested-Labeling" class="headerlink" title="Nested Labeling"></a>Nested Labeling</h2><p>Nested labeling enables you to specify multiple classification options that show up after you’ve selected a connected parent class:</p><br><img src="/images/release-060/nested_labeling.gif" class="gif-border"><br><p>It can match based on the selected Choice or Label value, and works with a <code>required</code> attribute too, smart selecting the region that you’ve not labeled. To try it out check <a href="/tags/choices.html">Choices</a> documentation and look for the following attributes: <code>visibleWhen</code>, <code>whenTagName</code>, <code>whenLabelValue</code>, <code>whenChoiceValue</code>.</p><h2 id="Per-region-labeling"><a href="#Per-region-labeling" class="headerlink" title="Per region labeling"></a>Per region labeling</h2><p>With per region labeling you can now provide additional attributes to the labeled regions. For example, when doing audio segmentation you can further classify the region. Per region is available for any data type and the following control tags: <a href="/tags/choices.html">Choices</a>, <a href="/tags/textarea.html">TextArea</a>, and <a href="/tags/rating.html">Rating</a>.</p><br><img src="/images/release-060/per-region.gif" class="gif-border"><p>It nicely integrates with the nested labeling, for example, you can provide multiple levels of classification for any particular region. </p><h2 id="Machine-Learning-Updates"><a href="#Machine-Learning-Updates" class="headerlink" title="Machine Learning Updates"></a>Machine Learning Updates</h2><p>New ML page in UI, where you can specify URLs to connect ML backends, manually trigger model training, explore training statuses, and quickly check predictions by drag-n-dropping tasks.</p><br><img src="/images/release-060/model_page.png" class="gif-border"><h3 id="Multiple-Backends"><a href="#Multiple-Backends" class="headerlink" title="Multiple Backends"></a>Multiple Backends</h3><p>Label Studio now supports multiple ML backends connected together. You can simultaneously get multiple predictions for each task and do comparative performance analysis for different models or different hyperparameters of a single model. It’s possible to connect as many backends as you want by using <code>--ml-backend url1 url2 ...</code> command-line option or adding them via UI.</p><h3 id="Connecting-models"><a href="#Connecting-models" class="headerlink" title="Connecting models"></a>Connecting models</h3><p>Creating &amp; connecting machine learning backend becomes way easier - simply define your model.py script with <code>.fit()</code> / <code>.predict()</code> methods and run ML backend with <code>label-studio-ml start --init --script=model.py</code>. Check quickstart and tutorials on how to connect sklearn and PyTorch models</p><h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><p>When the number of labels or choices is big, looking for a particular one becomes tedious. New <filter> tag to the rescue. It works with any list of Labels / Choices, and is keyboard-driven. Here is an example of the interaction: </filter></p><br> <img src="/images/release-060/filtering.gif" class="gif-border"><p>Hitting <code>shift+f</code> puts focus, then hitting Enter key selects the first matching item.</p><h2 id="Display-Label-Names"><a href="#Display-Label-Names" class="headerlink" title="Display Label Names"></a>Display Label Names</h2><p>Displaying labels on top of the labeled regions proved to be a useful feature if you’d like to do a verification of the labeling. Visually inspecting the regions takes smaller amounts of time than doing so through switching between regions.</p><br><img src="/images/release-060/show-labels.gif" class="gif-border"><h3 id="Models-Scores"><a href="#Models-Scores" class="headerlink" title="Models Scores"></a>Models Scores</h3><p>Along with the names of the labels you can provide a prediction score for specific regions. That score may either come from the data that you upload or from the model that you’ve connected. When it’s available you can <strong>Sort by the score</strong>, and quickly verify/adjust the labeling for the most “uncertain” regions. </p><h2 id="Keeping-the-label-active"><a href="#Keeping-the-label-active" class="headerlink" title="Keeping the label active"></a>Keeping the label active</h2><p>If you label the same type of data it may be cumbersome to keep selecting the same label over and over again, now you can choose to keep the last label active and use it for new labeling. </p><br><img src="/images/release-060/keep-label-active.gif" class="gif-border"><p>Don’t forget to unselect the region when you want to select a new label, otherwise, you’d change the label of the existing region.</p><h2 id="Bug-fixes-amp-improvements"><a href="#Bug-fixes-amp-improvements" class="headerlink" title="Bug fixes &amp; improvements"></a>Bug fixes &amp; improvements</h2><ul><li>–host argument now available via command-line argument (thanks to <a href="https://github.com/hachreak" target="_blank" rel="noopener">@hachreak</a>)</li><li>fixed upload with plain text tasks (thanks to <a href="https://github.com/gauthamsuresh09" target="_blank" rel="noopener">@gauthamsuresh09</a>)</li><li>fixed one-click deploy on Google Cloud (thanks to <a href="https://github.com/iCorv" target="_blank" rel="noopener">@iCorv</a>)</li><li>fixed URL paths for proxy safety (thanks to <a href="https://github.com/ezavesky" target="_blank" rel="noopener">ezavesky</a>)</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Label Studio Release Notes 0.7.0 - Cloud Storage Enablement</title>
      <link href="/blog/release-070-cloud-storage-enablement.html"/>
      <url>/blog/release-070-cloud-storage-enablement.html</url>
      
        <content type="html"><![CDATA[<p>Just a couple of weeks after our 0.6.0 release, we’re happy to announce a new big release. We’ve started the discussion about the cloud months ago, and as the first step in simplifying the integration, we’re happy to introduce cloud storage connectors, like AWS S3. </p><p>We’re also very interested to learn more from you about your ML pipelines, if you’re interested in having a conversation, please ping us on <a href="https://join.slack.com/t/label-studio/shared_invite/zt-cr8b7ygm-6L45z7biEBw4HXa5A2b5pw" target="_blank" rel="noopener">Slack</a>.</p><br><img src="/images/release-070/s3-mascot-04.png"><h2 id="Connecting-cloud-storage"><a href="#Connecting-cloud-storage" class="headerlink" title="Connecting cloud storage"></a>Connecting cloud storage</h2><p>You can configure label studio to synchronize labeling tasks with your s3 or gcp bucket, potentially filtering by a specific prefix or a file extension. Label Studio will take that list and generate pre-signed URLs each time the task is shown to the annotator. </p><br><img src="/images/release-070/configure-s3.gif" class="gif-border"><p>There are several ways how label studio can load the file, either as a URL or as a blob therefore, you can store the list of tasks or the assets themselves and load that.</p><br><img src="/images/release-070/s3-config.png" class="gif-border"><p>You can configure it to store the results back to s3/gcp, making Label Studio a part of your data processing pipeline. Read more about the configuration in the docs <a href="/guide/storage.html">here</a>.</p><h2 id="Frontend-package-updates"><a href="#Frontend-package-updates" class="headerlink" title="Frontend package updates"></a>Frontend package updates</h2><p>Finally with a lot of <a href="https://github.com/heartexlabs/label-studio-frontend/pull/75" target="_blank" rel="noopener">work</a> from <a href="https://github.com/hlomzik" target="_blank" rel="noopener">Andrew</a> there is an implementation of frontend testing. This will make sure that we don’t break things when we introduce new features. Along with that another  Important part — improved building and publishing process, configured CI. Now the npm frontend package will be published along with the pip package.</p><h2 id="Labeling-Paragraphs-and-Dialogues"><a href="#Labeling-Paragraphs-and-Dialogues" class="headerlink" title="Labeling Paragraphs and Dialogues"></a>Labeling Paragraphs and Dialogues</h2><p>Introducing a new object tag called “Paragraphs”. A paragraph is a piece of text with potentially additional metadata like the author and the timestamp. With this tag we’re also experimenting now with an idea of providing predefined layouts. For example to label the dialogue you can use the following config: <code>&lt;Paragraphs name=“conversation” value=“$conv” layout=“dialogue” /&gt;</code></p><br><img src="/images/release-070/dialogues.png" class="gif-border"><p>This feature is available in the <a href="https://heartex.ai/" target="_blank" rel="noopener">enterprise version</a> only</p><h2 id="Different-shapes-on-the-same-image"><a href="#Different-shapes-on-the-same-image" class="headerlink" title="Different shapes on the same image"></a>Different shapes on the same image</h2><p>One limitation label studio had was the ability to use only one shape on the same image, for example, you were able to put either bounding boxes or polygons. Now this limitation is waived and you can define different label groups and connect those to the same image.</p><br><img src="/images/release-070/multiple-tools.gif" class="gif-border"><h2 id="maxUsages"><a href="#maxUsages" class="headerlink" title="maxUsages"></a>maxUsages</h2><p>There are a couple of ways how you can make sure that the annotation is being performed in full. One of these concepts is a <code>required</code> flag, and we’ve created a new one called <code>maxUsages</code>. For some datasets you know how much objects of a particular type there is, therefore you can limit the usage of specific labels.</p><h2 id="Bugfixes-and-Enhancements"><a href="#Bugfixes-and-Enhancements" class="headerlink" title="Bugfixes and Enhancements"></a>Bugfixes and Enhancements</h2><ul><li>Allow different types of shapes to be used in the same image. For example you can label the same image using both rectangles and ellipses. </li><li>Fixing double text deserialization <a href="https://github.com/heartexlabs/label-studio-frontend/pull/85" target="_blank" rel="noopener">https://github.com/heartexlabs/label-studio-frontend/pull/85</a></li><li>Fix bug with groups of required choices <a href="https://github.com/heartexlabs/label-studio-frontend/pull/74" target="_blank" rel="noopener">https://github.com/heartexlabs/label-studio-frontend/pull/74</a></li><li>Several fixes for NER labeling — empty captured text, double clicks, labels appearance</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Export results</title>
      <link href="/guide/export.html"/>
      <url>/guide/export.html</url>
      
        <content type="html"><![CDATA[<p>Your annotations are stored in <a href="#Completion-format">raw completion format</a> inside <code>my_project_name/completions</code> directory, one file per labeled task named as <code>task_id.json</code>.</p><p>You can optionally convert and export raw completions to a more common format by doing one of the following:</p><ul><li>From <a href="http://localhost:8080/export" target="_blank" rel="noopener">/export</a> page by choosing target format</li><li>Applying <a href="https://github.com/heartexlabs/label-studio-converter" target="_blank" rel="noopener">converter tool</a> to <code>my_project_name/completions</code> directory</li><li>By using <a href="#Export-using-API">Export API</a></li></ul><h2 id="Basic-format"><a href="#Basic-format" class="headerlink" title="Basic format"></a>Basic format</h2><p>The output data is stored in <em>completions</em> - JSON formatted files, one per each completed task saved in project directory in <code>completions</code> folder or in the <a href="setup.html#Structure"><code>&quot;output_dir&quot;</code> option</a> The example structure of <em>completion</em> is the following:</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">"completions"</span>: [        &#123;            <span class="hljs-attr">"id"</span>: <span class="hljs-string">"1001"</span>,            <span class="hljs-attr">"lead_time"</span>: <span class="hljs-number">15.053</span>,            <span class="hljs-attr">"result"</span>: [                &#123;                    <span class="hljs-attr">"from_name"</span>: <span class="hljs-string">"tag"</span>,                    <span class="hljs-attr">"id"</span>: <span class="hljs-string">"Dx_aB91ISN"</span>,                    <span class="hljs-attr">"source"</span>: <span class="hljs-string">"$image"</span>,                    <span class="hljs-attr">"to_name"</span>: <span class="hljs-string">"img"</span>,                    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"rectanglelabels"</span>,                    <span class="hljs-attr">"value"</span>: &#123;                        <span class="hljs-attr">"height"</span>: <span class="hljs-number">10.458911419423693</span>,                        <span class="hljs-attr">"rectanglelabels"</span>: [                            <span class="hljs-string">"Moonwalker"</span>                        ],                        <span class="hljs-attr">"rotation"</span>: <span class="hljs-number">0</span>,                        <span class="hljs-attr">"width"</span>: <span class="hljs-number">12.4</span>,                        <span class="hljs-attr">"x"</span>: <span class="hljs-number">50.8</span>,                        <span class="hljs-attr">"y"</span>: <span class="hljs-number">5.869797225186766</span>                    &#125;                &#125;            ]        &#125;    ],    <span class="hljs-attr">"data"</span>: &#123;        <span class="hljs-attr">"image"</span>: <span class="hljs-string">"https://htx-misc.s3.amazonaws.com/opensource/label-studio/examples/images/nick-owuor-astro-nic-visuals-wDifg5xc9Z4-unsplash.jpg"</span>    &#125;,    <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">"predictions"</span>: [        &#123;            <span class="hljs-attr">"created_ago"</span>: <span class="hljs-string">"3 hours"</span>,            <span class="hljs-attr">"model_version"</span>: <span class="hljs-string">"model 1"</span>,            <span class="hljs-attr">"result"</span>: [                &#123;                    <span class="hljs-attr">"from_name"</span>: <span class="hljs-string">"tag"</span>,                    <span class="hljs-attr">"id"</span>: <span class="hljs-string">"t5sp3TyXPo"</span>,                    <span class="hljs-attr">"source"</span>: <span class="hljs-string">"$image"</span>,                    <span class="hljs-attr">"to_name"</span>: <span class="hljs-string">"img"</span>,                    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"rectanglelabels"</span>,                    <span class="hljs-attr">"value"</span>: &#123;                        <span class="hljs-attr">"height"</span>: <span class="hljs-number">11.612284069097889</span>,                        <span class="hljs-attr">"rectanglelabels"</span>: [                            <span class="hljs-string">"Moonwalker"</span>                        ],                        <span class="hljs-attr">"rotation"</span>: <span class="hljs-number">0</span>,                        <span class="hljs-attr">"width"</span>: <span class="hljs-number">39.6</span>,                        <span class="hljs-attr">"x"</span>: <span class="hljs-number">13.2</span>,                        <span class="hljs-attr">"y"</span>: <span class="hljs-number">34.702495201535505</span>                    &#125;                &#125;            ]        &#125;,        &#123;            <span class="hljs-attr">"created_ago"</span>: <span class="hljs-string">"4 hours"</span>,            <span class="hljs-attr">"model_version"</span>: <span class="hljs-string">"model 2"</span>,            <span class="hljs-attr">"result"</span>: [                &#123;                    <span class="hljs-attr">"from_name"</span>: <span class="hljs-string">"tag"</span>,                    <span class="hljs-attr">"id"</span>: <span class="hljs-string">"t5sp3TyXPo"</span>,                    <span class="hljs-attr">"source"</span>: <span class="hljs-string">"$image"</span>,                    <span class="hljs-attr">"to_name"</span>: <span class="hljs-string">"img"</span>,                    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"rectanglelabels"</span>,                    <span class="hljs-attr">"value"</span>: &#123;                        <span class="hljs-attr">"height"</span>: <span class="hljs-number">33.61228406909789</span>,                        <span class="hljs-attr">"rectanglelabels"</span>: [                            <span class="hljs-string">"Moonwalker"</span>                        ],                        <span class="hljs-attr">"rotation"</span>: <span class="hljs-number">0</span>,                        <span class="hljs-attr">"width"</span>: <span class="hljs-number">39.6</span>,                        <span class="hljs-attr">"x"</span>: <span class="hljs-number">13.2</span>,                        <span class="hljs-attr">"y"</span>: <span class="hljs-number">54.702495201535505</span>                    &#125;                &#125;            ]        &#125;    ]&#125;</code></pre><h3 id="completions"><a href="#completions" class="headerlink" title="completions"></a>completions</h3><p>That’s where the list of labeling results per one task is stored.</p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>Unique completion identifier</p><h4 id="lead-time"><a href="#lead-time" class="headerlink" title="lead_time"></a>lead_time</h4><p>Time in seconds spent to create this completion</p><h4 id="result"><a href="#result" class="headerlink" title="result"></a>result</h4><p>Completion result data</p><h5 id="id-1"><a href="#id-1" class="headerlink" title="id"></a>id</h5><p>Unique completion result identifier</p><h5 id="from-name"><a href="#from-name" class="headerlink" title="from_name"></a>from_name</h5><p>Name of the tag that was used to label region (<a href="/tags">control tags</a>)</p><h5 id="to-name"><a href="#to-name" class="headerlink" title="to_name"></a>to_name</h5><p>Name of the object tag that provided the region to be labeled (<a href="/tags">object tags</a>)</p><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p>Type of the labeling/tag</p><h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><p>Tag specific value that includes the labeling result details. The exact structure of value depends on the chosen labeling tag.<br><a href="/tags">Explore each tag</a> for more details.</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>Data copied from <a href="tasks.html#Basic-format">input task</a></p><h3 id="id-2"><a href="#id-2" class="headerlink" title="id"></a>id</h3><p>Task identifier</p><h3 id="predictions"><a href="#predictions" class="headerlink" title="predictions"></a>predictions</h3><p>Machine learning predictions (aka <em>pre-labeling results</em>). Follows the <a href="export.html#completions">same format</a> as completion, with some additional fields related to machine learning inference:</p><ul><li><strong>score</strong> - the overall result score (probabilistic output, confidence level, etc.)</li></ul><h2 id="Export-formats"><a href="#Export-formats" class="headerlink" title="Export formats"></a>Export formats</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>List of items in <a href="#Completion-format">raw completion format</a> stored in JSON file</p><h3 id="JSON-MIN"><a href="#JSON-MIN" class="headerlink" title="JSON_MIN"></a>JSON_MIN</h3><p>List of items where only <code>&quot;from_name&quot;, &quot;to_name&quot;</code> values from <a href="#Completion-format">raw completion format</a> are kept:</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">"image"</span>: <span class="hljs-string">"https://htx-misc.s3.amazonaws.com/opensource/label-studio/examples/images/nick-owuor-astro-nic-visuals-wDifg5xc9Z4-unsplash.jpg"</span>,  <span class="hljs-attr">"tag"</span>: [&#123;    <span class="hljs-attr">"height"</span>: <span class="hljs-number">10.458911419423693</span>,    <span class="hljs-attr">"rectanglelabels"</span>: [        <span class="hljs-string">"Moonwalker"</span>    ],    <span class="hljs-attr">"rotation"</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">"width"</span>: <span class="hljs-number">12.4</span>,    <span class="hljs-attr">"x"</span>: <span class="hljs-number">50.8</span>,    <span class="hljs-attr">"y"</span>: <span class="hljs-number">5.869797225186766</span>  &#125;]&#125;</code></pre><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p>Results are stored in comma-separated tabular file with column names specified by <code>&quot;from_name&quot;</code> <code>&quot;to_name&quot;</code> values</p><h3 id="TSV"><a href="#TSV" class="headerlink" title="TSV"></a>TSV</h3><p>Results are stored in tab-separated tabular file with column names specified by <code>&quot;from_name&quot;</code> <code>&quot;to_name&quot;</code> values</p><h3 id="CONLL2003"><a href="#CONLL2003" class="headerlink" title="CONLL2003"></a>CONLL2003</h3><p>Popular format used for <a href="https://www.clips.uantwerpen.be/conll2003/ner/" target="_blank" rel="noopener">CoNLL-2003 named entity recognition challenge</a></p><h3 id="COCO"><a href="#COCO" class="headerlink" title="COCO"></a>COCO</h3><p>Popular machine learning format used by <a href="http://cocodataset.org/#home" target="_blank" rel="noopener">COCO dataset</a> for object detection and image segmentation tasks</p><h3 id="Pascal-VOC-XML"><a href="#Pascal-VOC-XML" class="headerlink" title="Pascal VOC XML"></a>Pascal VOC XML</h3><p>Popular XML-formatted task data used for object detection and image segmentation tasks</p><h2 id="Export-using-API"><a href="#Export-using-API" class="headerlink" title="Export using API"></a>Export using API</h2><p>You can use an API to request a file with exported results, e.g.</p><pre><code class="hljs bash">curl http://localhost:8080/api/<span class="hljs-built_in">export</span>?format=JSON &gt; exported_results.tar.gz</code></pre><p>The <code>format</code> parameter could be one of available <a href="#Export-formats">export formats</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Frontend library</title>
      <link href="/guide/frontend.html"/>
      <url>/guide/frontend.html</url>
      
        <content type="html"><![CDATA[<p>Frontend, as its name suggests, is the frontend library based on React and mobx-state-tree, distributed as an NPM package. You can include it in your applications and provide data annotation support to your users. It can be granularly customized and extended.</p><p>Its repository is located at <a href="https://github.com/heartexlabs/label-studio-frontend" target="_blank" rel="noopener">https://github.com/heartexlabs/label-studio-frontend</a></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><pre><code class="hljs bash">npm install label-studio</code></pre><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><pre><code class="hljs xhtml"><span class="hljs-comment">&lt;!-- Theme included stylesheets --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://unpkg.com/browse/label-studio@0.4.0/build/static/css/main.14acfaa5.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><span class="hljs-comment">&lt;!-- Main Label Studio library --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/browse/label-studio@0.4.0/build/static/js/main.0249ea16.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a>Quickstart</h2><p>Instantiate a new Label Studio object with a selector for the div that should become the editor.</p><pre><code class="hljs xhtml"><span class="hljs-comment">&lt;!-- Include Label Studio stylesheet --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://unpkg.com/label-studio@0.4.0/build/static/css/main.14acfaa5.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><span class="hljs-comment">&lt;!-- Create the Label Studio container --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"label-studio"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- Include the Label Studio library --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/label-studio@0.4.0/build/static/js/main.0249ea16.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!-- Initialize Label Studio --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="xml">  var labelStudio = new LabelStudio('editor', &#123;    config: `      <span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">RectangleLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"World"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">RectangleLabels</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>    `,    interfaces: [      "panel",      "update",      "controls",      "side-column",      "completions:menu",      "completions:add-new",      "completions:delete",      "predictions:menu",    ],    user: &#123;      pk: 1,      firstName: "James",      lastName: "Dean"    &#125;,    task: &#123;      completions: [],      predictions: [],      id: 1,      data: &#123;        image: "https://htx-misc.s3.amazonaws.com/opensource/label-studio/examples/images/nick-owuor-astro-nic-visuals-wDifg5xc9Z4-unsplash.jpg"      &#125;    &#125;,        onLabelStudioLoad: function(LS) &#123;      var c = LS.completionStore.addCompletion(&#123;        userGenerate: true      &#125;);      LS.completionStore.selectCompletion(c.id);    &#125;  &#125;);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><blockquote><p>You can use <a href="/playground">Playground</a> to test out different types of config.</p></blockquote><p>To see all the available options for the initialization of <strong>LabelStudio</strong>, please check the <a href="frontend_reference.html">Reference</a>.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Frontend reference</title>
      <link href="/guide/frontend_reference.html"/>
      <url>/guide/frontend_reference.html</url>
      
        <content type="html"><![CDATA[<pre><code class="hljs javascript"><span class="hljs-keyword">var</span> labelStudio = <span class="hljs-keyword">new</span> LabelStudio(<span class="hljs-string">'editor'</span>, options);</code></pre><p>The following options are recognized when initializing <strong>LabelStudio</strong> instance:</p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>Default: <code>null</code></p><p>Type data: <code>string</code></p><p>XML configuration of task. Whitelist of formats to allow in the editor.</p><h3 id="interfaces"><a href="#interfaces" class="headerlink" title="interfaces"></a>interfaces</h3><p>Default: <code>null</code></p><p>Type data: <code>array</code></p><p>Collection of UI elements to show:</p><pre><code class="hljs javascript">[    <span class="hljs-string">"completions:add-new"</span>,    <span class="hljs-string">"completions:delete"</span>,    <span class="hljs-string">"completions:menu"</span>,    <span class="hljs-string">"controls"</span>,    <span class="hljs-string">"panel"</span>,    <span class="hljs-string">"predictions:menu"</span>,    <span class="hljs-string">"side-column"</span>,    <span class="hljs-string">"skip"</span>,    <span class="hljs-string">"submit"</span>    <span class="hljs-string">"update"</span>,]</code></pre><ul><li><code>completions:add-new</code> - show add new completions button</li><li><code>completions:delete</code> - show delete current completion button</li><li><code>completions:menu</code> - show completions menu</li><li><code>controls</code> - enable panel with controls (submit, update, skip)</li><li><code>panel</code> - navigation panel of current task with buttons: undo, redo and reset</li><li><code>predictions:menu</code> - show predictions menu</li><li><code>side-column</code> - enable panel with entities</li><li><code>skip</code> - show button of skip current task</li><li><code>submit</code> - show button of submit or update current completion</li><li><code>update</code> - show button of update current task after submitting</li></ul><h3 id="messages"><a href="#messages" class="headerlink" title="messages"></a>messages</h3><p>Default: <code>null</code></p><p>Type data: <code>object</code></p><p>Messaging used for different actions</p><pre><code class="hljs javascript">&#123;  <span class="hljs-attr">DONE</span>: <span class="hljs-string">"Done!"</span>,  <span class="hljs-attr">NO_COMP_LEFT</span>: <span class="hljs-string">"No more completions"</span>,  <span class="hljs-attr">NO_NEXT_TASK</span>: <span class="hljs-string">"No more data available for labeling"</span>,  <span class="hljs-attr">NO_ACCESS</span>: <span class="hljs-string">"You don't have access to this task"</span>&#125;</code></pre><ul><li><code>DONE</code> - Shown after the task was submitted to the server</li><li><code>NO_COMP_LEFT</code> - Shown if there are no more completions</li><li><code>NO_NEXT_TASK</code> - No next task to load</li><li><code>NO_ACCESS</code> - Can’t access the provided task</li></ul><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>Default: <code>No description</code></p><p>Type data: <code>string</code></p><p>Description of the current task.</p><h3 id="task"><a href="#task" class="headerlink" title="task"></a>task</h3><p>Task data</p><p>Default: <code>null</code></p><p>Type data: <code>object</code></p><pre><code class="hljs json">&#123;  id: 1,  load: false,  auth: &#123;    enable: true,    to: "text",    username: "user",    password: "pass"  &#125;,  data: &#123;    text: "Labeling text..."  &#125;,  completions: [],  predictions: [],&#125;</code></pre><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>Type data: <code>integer</code></p><p>Default: <code>null</code></p><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><h4 id="completions"><a href="#completions" class="headerlink" title="completions"></a>completions</h4><p>Type data: <code>array</code></p><p>Array of completions. See <a href="/guide/export.html#Basic-format">Completions Documentation</a> for more information.</p><h4 id="predictions"><a href="#predictions" class="headerlink" title="predictions"></a>predictions</h4><p>Type data: <code>array</code></p><p>Array of predictions. Every object as completion. See <a href="/guide/export.html#Basic-format">Completions Documentation</a> for more information.</p><h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><p>User data</p><p>Type data: <code>object</code></p><pre><code class="hljs json">&#123;  pk: 1,  firstName: "Stanley",  lastName: "Kubrick"&#125;</code></pre><h4 id="pk"><a href="#pk" class="headerlink" title="pk"></a>pk</h4><p>Type data: <code>number</code></p><h4 id="firstName"><a href="#firstName" class="headerlink" title="firstName"></a>firstName</h4><p>Type data: <code>string</code></p><h4 id="lastName"><a href="#lastName" class="headerlink" title="lastName"></a>lastName</h4><p>Type data: <code>string</code></p><h2 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h2><p>Callbacks can be used to execute actions based on user interaction with the interface. For example label-studio server is using it to communicate with an API. Pass them along with other options when initiating the instance.</p><h3 id="onSubmitCompletion"><a href="#onSubmitCompletion" class="headerlink" title="onSubmitCompletion"></a>onSubmitCompletion</h3><p>Type data: <code>function</code></p><p>Called when a button <code>submit</code> is pressed. <code>ls</code> is label studio instance, <code>completion</code> is value of current completion.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><pre><code class="hljs javascript">onSubmitCompletion: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ls, completion</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(completion)&#125;</code></pre><h3 id="onUpdateCompletion"><a href="#onUpdateCompletion" class="headerlink" title="onUpdateCompletion"></a>onUpdateCompletion</h3><p>Type data: <code>function</code></p><p>Called when a button <code>update</code> is pressed. <code>ls</code> is label studio instance, <code>completion</code> is value of current completion.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><pre><code class="hljs javascript">updateCompletion: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ls, completion</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(result)&#125;</code></pre><h3 id="onDeleteCompletion"><a href="#onDeleteCompletion" class="headerlink" title="onDeleteCompletion"></a>onDeleteCompletion</h3><p>Type data: <code>function</code></p><p>Called when a button <code>delete</code> is pressed. <code>ls</code> is label studio instance, <code>completion</code> is value of current completion.</p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><pre><code class="hljs javascript">onDeleteCompletion: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ls, completion</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(result)&#125;</code></pre><h3 id="onEntityCreate"><a href="#onEntityCreate" class="headerlink" title="onEntityCreate"></a>onEntityCreate</h3><p>Type data: <code>function</code></p><p>Called when a new region gets labeled, for example a new bbox is created. <code>region</code> is the object that got created</p><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h4><pre><code class="hljs javascript">onEntityCreate: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">region</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(region)&#125;</code></pre><h3 id="onEntityDelete"><a href="#onEntityDelete" class="headerlink" title="onEntityDelete"></a>onEntityDelete</h3><p>Type data: <code>function</code></p><p>Called when an existing region got deleted. <code>region</code> is the object itself.</p><h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h4><pre><code class="hljs javascript">onEntityDelete: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">region</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(region)&#125;</code></pre><h3 id="onSkipTask"><a href="#onSkipTask" class="headerlink" title="onSkipTask"></a>onSkipTask</h3><p>Type data: <code>function</code></p><p>Called when a button <code>skip</code> is pressed. <code>ls</code> is label studio instance.</p><h4 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h4><pre><code class="hljs javascript">onSkipTask: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ls</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(result)&#125;</code></pre><h3 id="onLabelStudioLoad"><a href="#onLabelStudioLoad" class="headerlink" title="onLabelStudioLoad"></a>onLabelStudioLoad</h3><p>Type data: <code>function</code></p><p>Called when label studio has fully loaded and is ready, <code>ls</code> is the label studio instance</p><h4 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h4><pre><code class="hljs javascript">onLabelStudioLoad: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ls</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(result)&#125;</code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Getting started</title>
      <link href="/guide/index.html"/>
      <url>/guide/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Label Studio is a self-contained Web application for multi-typed data labeling and exploration. The <em>backend</em> is written in pure Python powered by <a href="https://github.com/pallets/flask" target="_blank" rel="noopener">Flask</a>. The <em>frontend</em> part is a backend-agnostic <a href="https://reactjs.org/" target="_blank" rel="noopener">React</a> + <a href="https://github.com/mobxjs/mobx-state-tree" target="_blank" rel="noopener">MST</a> app, included as a precompiled script.</p><p>Here are the main concepts behind Label Studio’s workflow:</p><div style="margin:auto; text-align:center; width:100%"><img src="/images/label-studio-ov.jpg" style="opacity: 0.7"></div><ul><li><strong>Tasks</strong> represent an individual dataset items. Label Studio is a multi-type labeling tool - you can <a href="tasks.html">import</a> either text, image, audio URL, HTML text or any number and combination of these data resources.</li><li><strong>Completions</strong> are the labeling results in <a href="export.html#Completion-fields">JSON format</a>. They could be <a href="export.html">exported</a> in various common formats, ready to use in machine learning pipelines.</li><li><strong>Predictions</strong> are the optional labeling results in <a href="export.html#Completion-fields">the same format</a>, but unlike completions they are used for generating pre-labeling during the annotation process, or validating the model predictions.</li><li><a href="ml.html"><strong>Machine learning backend</strong> connects</a> popular machine learning frameworks to Label Studio for active learning &amp; generating model predictions on-the-fly.</li><li><strong>Labeling config</strong> is a simple <a href="setup.html#Labeling-config">XML tree with <strong>tags</strong></a> used to configure UI elements, connect input data to output labeling scheme.</li><li><strong>Project</strong> encompasses tasks, config, predictions and completions all-in-one in an isolated directory</li><li><strong>Frontend Labeling UI</strong> is accessible from any browser, distributed as precompiled js/css scripts and could be <a href="frontend.html">easily extendable with new labeling tags</a>. You can also <a href="frontend.html#Quickstart">embed Label Studio UI into your applications</a>.</li></ul><h2 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a>Quickstart</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>Label Studio is supported for Python 3.5 or greater, running on Linux, Windows and MacOSX.</p><blockquote><p>Note: for Windows users the default installation may fail to build <code>lxml</code> package. Consider manually installing it from <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml" target="_blank" rel="noopener">unofficial Windows binaries</a> e.g. if you are running on x64 with Python 3.8, run <code>pip install lxml‑4.5.0‑cp38‑cp38‑win_amd64.whl</code>.</p></blockquote><h3 id="Running-with-pip"><a href="#Running-with-pip" class="headerlink" title="Running with pip"></a>Running with pip</h3><p>To install Label Studio via pip, you need Python&gt;=3.5 and run:</p><pre><code class="hljs bash">pip install label-studio</code></pre><p>Then launch a new project which stores all labeling data in a local directory <code>my_labeling_project</code>:</p><pre><code class="hljs bash">label-studio start my_labeling_project --init</code></pre><p>The default browser opens automatically at <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>.</p><h3 id="Running-with-Docker"><a href="#Running-with-Docker" class="headerlink" title="Running with Docker"></a>Running with Docker</h3><p>Label Studio is also distributed as a docker container. Make sure you have <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> installed on your local machine.</p><p>Install and start Label Studio at <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> storing all labeling data in <code>./my_labeling_project</code> directory:</p><pre><code class="hljs bash">docker run --rm -p 8080:8080 -v `<span class="hljs-built_in">pwd</span>`/my_labeling_project:/label-studio/my_labeling_project --name label-studio heartexlabs/label-studio:latest</code></pre><blockquote><p>Note: if <code>./my_labeling_project</code> the folder exists, an exception will be thrown. Please delete this folder or use <code>--force</code> option.<br>Note: for Windows, you have to modify the volumes paths set by <code>-v</code> option</p></blockquote><p>You can override the default startup command by appending any of <a href>available command line arguments</a>:</p><pre><code class="hljs bash">docker run -p 8080:8080 -v `<span class="hljs-built_in">pwd</span>`/my_project:/label-studio/my_project --name label-studio heartexlabs/label-studio:latest label-studio start my_project --init --force --template image_mixedlabel</code></pre><p>If you want to build a local image, run:</p><pre><code class="hljs bash">docker build -t heartexlabs/label-studio:latest .</code></pre><h3 id="Running-from-source"><a href="#Running-from-source" class="headerlink" title="Running from source"></a>Running from source</h3><p>If you want to use nightly builds, or extend the functionality, consider to download the source code using Git and run Label Studio locally:</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/heartexlabs/label-studio.git<span class="hljs-built_in">cd</span> label-studiopython setup.py develop</code></pre><p>Then create a new project, it stores all labeling data in a local directory <code>my_labeling_project</code>:</p><pre><code class="hljs bash">label-studio start my_labeling_project --init</code></pre><p>The default browser will open automatically at <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>.</p><h3 id="Multisession-mode"><a href="#Multisession-mode" class="headerlink" title="Multisession mode"></a>Multisession mode</h3><p>You can start Label Studio in <em>multisession mode</em> - each browser session creates it’s own project with associated session ID as a name.</p><p>In order to launch Label Studio in multisession mode and keep all projects in a separate directory <code>session_projects</code>, run</p><pre><code class="hljs bash">label-studio start-multi-session --root-dir ./session_projects</code></pre><h2 id="Command-line-arguments"><a href="#Command-line-arguments" class="headerlink" title="Command line arguments"></a>Command line arguments</h2><p>You can specify input tasks, project config, machine learning backend and other options via the command line interface. Run <code>label-studio start --help</code> to see all available options.</p><h3 id="Auth-with-login-and-password"><a href="#Auth-with-login-and-password" class="headerlink" title="Auth with login and password"></a>Auth with login and password</h3><p>You can restrict the access for LS instance with the basic HTTP auth.</p><pre><code class="hljs undefined">label-studio start my_labeling_project --username user --password pwd</code></pre><p>Or put <code>username</code> and <code>password</code> in the project config.json.</p><pre><code class="hljs undefined">&#123;  ... &quot;username&quot;: &quot;user&quot;,  &quot;password&quot;: &quot;pwd&quot;, ...&#125;</code></pre><p>It will be the same username and password for all the users.  </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Machine learning backend</title>
      <link href="/guide/ml.html"/>
      <url>/guide/ml.html</url>
      
        <content type="html"><![CDATA[<p>You can easily connect your favorite machine learning framework with Label Studio Machine Learning SDK. </p><p>That gives you the opportunities to use:</p><ul><li><strong>Pre-labeling</strong>: Use model predictions for pre-labeling (e.g. make use on-the-fly model predictions for creating rough image segmentations for further manual refinements)</li><li><strong>Autolabeling</strong>: Create automatic annotations</li><li><strong>Online Learning</strong>: Simultaneously update (retrain) your model while new annotations are coming</li><li><strong>Active Learning</strong>: Perform labeling in active learning mode - select only most complex examples</li><li><strong>Prediction Service</strong>: Instantly create running production-ready prediction service</li></ul><h2 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h2><ul><li><a href="/tutorials/dummy_model.html">Create the simplest ML backend</a></li><li><a href="/tutorials/sklearn-text-classifier.html">Text classification with Scikit-Learn</a></li><li><a href="/tutorials/pytorch-image-transfer-learning.html">Transfer learning for images with PyTorch</a></li></ul><h2 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a>Quickstart</h2><p>Here is a quick example tutorial on how to run the ML backend with a simple text classifier:</p><ol start="0"><li>Clone repo<pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/heartexlabs/label-studio</code></pre></li></ol><ol><li>Setup environment<pre><code class="hljs bash"><span class="hljs-built_in">cd</span> label-studiopip install -e .<span class="hljs-built_in">cd</span> label_studio/ml/examplespip install -r requirements.txt</code></pre></li></ol><ol start="2"><li>Create new ML backend<pre><code class="hljs bash">label-studio-ml init my_ml_backend --script label-studio/ml/examples/simple_text_classifier.py</code></pre></li></ol><ol start="3"><li>Start ML backend server<pre><code class="hljs bash">label-studio-ml start my_ml_backend</code></pre></li></ol><ol start="4"><li>Run Label Studio connecting it to the running ML backend: <pre><code class="hljs bash">label-studio start text_classification_project --init --template text_sentiment --ml-backend-url http://localhost:9090</code></pre></li></ol><h2 id="Start-with-docker-compose"><a href="#Start-with-docker-compose" class="headerlink" title="Start with docker compose"></a>Start with docker compose</h2><p>Label Studio ML scripts include everything you need to create production ready ML backend server, powered by docker. It uses <a href="https://uwsgi-docs.readthedocs.io/en/latest/" target="_blank" rel="noopener">uWSGI</a> + <a href="http://supervisord.org/" target="_blank" rel="noopener">supervisord</a> stack, and handles background training jobs using <a href="https://python-rq.org/" target="_blank" rel="noopener">RQ</a>.</p><p>After running this command:</p><pre><code class="hljs bash">label-studio-ml init my-ml-backend --script label_studio/ml/examples/simple_text_classifier.py</code></pre><p>you’ll see configs in <code>my-ml-backend/</code> directory needed to build and run docker image using docker-compose. </p><p>Some preliminaries:</p><ol><li><p>Ensure all requirements are specified in <code>my-ml-backend/requirements.txt</code> file, e.g. place</p> <pre><code class="hljs requirements.txt">scikit-learn</code></pre></li></ol><ol start="2"><li>There are no services currently running on ports 9090, 6379 (otherwise change default ports in <code>my-ml-backend/docker-compose.yml</code>)</li></ol><p>Then from <code>my-ml-backend/</code> directory run</p><pre><code class="hljs bash">docker-compose up</code></pre><p>The server starts listening on port 9090, and you can connect it to Label Studio by specifying <code>--ml-backend http://localhost:9090</code><br> or via UI on <strong>Model</strong> page.</p><h2 id="Create-your-own-ML-backend"><a href="#Create-your-own-ML-backend" class="headerlink" title="Create your own ML backend"></a>Create your own ML backend</h2><p>Check examples in <code>label-studio/ml/examples</code> directory.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Labeling</title>
      <link href="/guide/labeling.html"/>
      <url>/guide/labeling.html</url>
      
        <content type="html"><![CDATA[<p>Let’s explore the complex example of multi-task labeling which includes text + image + audio data objects:<br><br></p><img src="/images/labeling.png"><ul><li><p>Labeling interface is implemented using JavaScript + React and placed to separated repository <a href="https://github.com/heartexlabs/label-studio-frontend" target="_blank" rel="noopener">Label Studio Frontend</a>. Label Studio has integrated Label Studio Frontend build. </p></li><li><p>Labeling interface is highly configurable: you can enable or disable some parts of it (completions panel, predictions panel, results panel, controls, submit &amp; skip buttons).  </p></li></ul><h2 id="Key-concepts"><a href="#Key-concepts" class="headerlink" title="Key concepts"></a>Key concepts</h2><p>Here you can see relations among labeling objects: tasks, completions, results, etc.</p><p>One user provides one completion, it’s atomic, and it consists of the result items. Result items can have relations between themselves with the specified direction of three types: left-right, right-left, or bidirectional. Normalizations are additional information in the custom string format about the current result item.</p><br><center><img src="/images/labeling-scheme.png" style="max-width: 600px; opacity: 0.6"></center><br>Completions and Predictions are very similar. But predictions must be generated automatically by ML models.   <h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p>Most of the actions described in this section are similar for all the data objects (images, audio, text, etc.).</p><h3 id="Choices-TextArea-and-other-simple-tags"><a href="#Choices-TextArea-and-other-simple-tags" class="headerlink" title="Choices, TextArea and other simple tags"></a>Choices, TextArea and other simple tags</h3><p>Such tags have straightforward labeling mechanics. It’s intuitive for users, so let’s talk about more complex things below :-) </p><h3 id="Add-region"><a href="#Add-region" class="headerlink" title="Add region"></a>Add region</h3><ol><li>Select label you want to add (if you use Tag without labels like Polygon, just go to 2)</li><li>Click on your data object (image, audio, text, etc) </li></ol><h3 id="Change-label"><a href="#Change-label" class="headerlink" title="Change label"></a>Change label</h3><p>You can change the label of the existing region:</p><ol><li>Select entity (span, bounding box, image segment, audio region, etc)</li><li>Select a new label</li></ol><h3 id="Delete-entity"><a href="#Delete-entity" class="headerlink" title="Delete entity"></a>Delete entity</h3><ol><li>Select entity </li><li>Press Backspace or go to Results panel and remove selected item </li></ol><h3 id="Add-relation"><a href="#Add-relation" class="headerlink" title="Add relation"></a>Add relation</h3><p>You can create relations between two results with  </p><ul><li>direction </li><li>and labels (<a href="/tags/relations.html">read more about relations with labels</a>)</li></ul><br><img src="/images/screens/relations.png"><ol><li>Select a first region (bounding box, text span, etc)</li><li>Click on “Create Relation” button</li><li>Select the second region</li><li><strong>Optionally</strong>: After the relation is created you can change the direction by click on the direction button</li><li><strong>Optionally</strong>: <a href="/tags/relations.html">If you’ve configured labels</a>, click on the triple dots button and add your predefined labels</li></ol><h2 id="Hotkeys"><a href="#Hotkeys" class="headerlink" title="Hotkeys"></a>Hotkeys</h2><p>Use hotkeys to improve your labeling performance. Hotkeys help is available in the labeling settings dialog.</p><table><tr><th>Key</th><th>Description</th></tr><tr><td>ctrl+enter</td><td>Submit a task</td></tr><tr><td>ctrl+backspace</td><td>Delete all regions</td></tr><tr><td>escape</td><td>Exit relation mode</td></tr><tr><td>backspace</td><td>Delete selected region</td></tr><tr><td>alt+shift+$n</td><td>Select a region</td></tr></table>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Project setup</title>
      <link href="/guide/setup.html"/>
      <url>/guide/setup.html</url>
      
        <content type="html"><![CDATA[<p><strong>Project</strong> is a directory where all annotation assets are located. It is a self-contained entity: when you start Label Studio for the first time e.g. <code>label-studio start ./my_project --init</code>,<br>it creates a directory <code>./my_project</code> from where its launched.</p><p>If you want to start another project, just remove <code>./my_project</code> directory, or create a new one by running <code>label-studio start /path/to/new/project --init</code>.</p><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p><strong>Project directory</strong> is structured as follows:</p><pre><code class="hljs bash">├── my_project│   ├── config.json     // project settings│   ├── tasks.json      // all imported tasks <span class="hljs-keyword">in</span> a dict like &#123;task_id: task&#125;│   ├── config.xml      // current project labeling config│   ├── completions     // directory with one completion per task_id stored <span class="hljs-keyword">in</span> one file│   │   ├── &lt;task_id&gt;.json│   ├── <span class="hljs-built_in">export</span>          // stores archives with all results exported form web UI │   │   ├── 2020-03-06-15-23-47.zip</code></pre><blockquote><p>Warning: It is not recommended to modify any of the internal project files. For importing tasks, exporting completions or changing label config please use web UI or command line arguments (see <code>label-studio start --help</code> for details)</p></blockquote><h2 id="Labeling-config"><a href="#Labeling-config" class="headerlink" title="Labeling config"></a>Labeling config</h2><p>Project labeling config is an XML file that consists of:</p><ul><li><strong>object tags</strong> specifying input data sources from imported tasks,</li><li><strong>control tags</strong> for configuring labeling schema (how annotation result looks like),</li><li><strong>visual tags</strong> applying different user interface styles.</li></ul><p><a class="button" href="/tags">Check Available Tags</a></p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Here an example config for classifying images provided by <code>image_url</code> key into two classes:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image_object"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image_url"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image_classes"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"image_object"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Cat"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Dog"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Setup-labeling-config-from-file"><a href="#Setup-labeling-config-from-file" class="headerlink" title="Setup labeling config from file"></a>Setup labeling config from file</h3><p>It is possible to initialize a new project with predefined <code>config.xml</code>:</p><pre><code class="hljs bash">label-studio my_new_project start --init --label-config config.xml</code></pre><h3 id="Setup-labeling-config-from-UI"><a href="#Setup-labeling-config-from-UI" class="headerlink" title="Setup labeling config from UI"></a>Setup labeling config from UI</h3><p>You can also use the web interface at <a href="http://localhost:8080/setup" target="_blank" rel="noopener"><code>/setup</code></a> to paste your labeling config. Using web UI you also get a live update while you’re editting the config.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Cloud storages</title>
      <link href="/guide/storage.html"/>
      <url>/guide/storage.html</url>
      
        <content type="html"><![CDATA[<p>You can integrate the popular cloud storage with Label Studio, collect new tasks uploaded to your buckets, and sync back annotation results to use them in your machine learning pipelines.</p><p>You can configure storage type, bucket and prefixes during the start of the server or during the runtime via UI on <strong>Tasks</strong> page.</p><p>You can configure one or both:</p><ul><li><em>source storage</em> (where tasks are stored)</li><li><em>target storage</em> (where completions are stored)</li></ul><p>The connection to both storages is synced, so you can see new tasks after uploading them to the bucket without restarting Label Studio.</p><p>The parameters like prefix or matching filename regex could be changed any time from the webapp interface.</p><blockquote><p>Note: Choose target storage carefully: be sure it’s empty when you just start labeling project, or it contains completions that match previously created/import tasks from source storage. Tasks are synced with completions based on internal ids (keys in <code>source.json</code>/<code>target.json</code> files in your project directory), so if you accidentally connect to the target storage with existed completions with the same ids, you may fail with undefined behaviour.  </p></blockquote><h2 id="Amazon-S3"><a href="#Amazon-S3" class="headerlink" title="Amazon S3"></a>Amazon S3</h2><p>To connect your <a href="https://aws.amazon.com/s3" target="_blank" rel="noopener">S3</a> bucket with Label Studio, be sure you have programmatic access enabled. <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html#configuration" target="_blank" rel="noopener">Check this link</a> to learn more how to set up access to your S3 bucket.</p><h3 id="Create-connection-on-startup"><a href="#Create-connection-on-startup" class="headerlink" title="Create connection on startup"></a>Create connection on startup</h3><p>The following commands launch Label Studio, configure the connection to your S3 bucket, scan for existing tasks, and load them into the labeling app.</p><h4 id="Read-bucket-with-JSON-formatted-tasks"><a href="#Read-bucket-with-JSON-formatted-tasks" class="headerlink" title="Read bucket with JSON-formatted tasks"></a>Read bucket with JSON-formatted tasks</h4><pre><code class="hljs bash">label-studio start my_project --init --<span class="hljs-built_in">source</span> s3 --<span class="hljs-built_in">source</span>-path my-s3-bucket</code></pre><h4 id="Write-completions-to-bucket"><a href="#Write-completions-to-bucket" class="headerlink" title="Write completions to bucket"></a>Write completions to bucket</h4><pre><code class="hljs bash">label-studio start my_project --init --target s3-completions --target-path my-s3-bucket</code></pre><h3 id="Working-with-Binary-Large-OBjects-BLOBs"><a href="#Working-with-Binary-Large-OBjects-BLOBs" class="headerlink" title="Working with Binary Large OBjects (BLOBs)"></a>Working with Binary Large OBjects (BLOBs)</h3><p>When you are storing BLOBs in your S3 bucket (like images or audio files), you might want to use then as is, by generating URLs pointing to those objects (e.g. <code>gs://my-s3-bucket/image.jpg</code>)<br>Label Studio allows you to generate input tasks with corresponding URLs automatically on-the-fly. You can to this either specifying <code>--source-params</code> when launching app:</p><pre><code class="hljs bash">label-studio start my_project --init --<span class="hljs-built_in">source</span> s3 --<span class="hljs-built_in">source</span>-path my-s3-bucket --<span class="hljs-built_in">source</span>-params <span class="hljs-string">"&#123;\"data_key\": \"my-object-tag-<span class="hljs-variable">$value</span>\", \"use_blob_urls\": true, \"regex\": "</span>.*<span class="hljs-string">"&#125;"</span></code></pre><p>You can leave <code>&quot;data_key&quot;</code> empty (or skip it at all) then LS generates it automatically with the first task key from label config (it’s useful when you have only one object tag exposed).</p><h3 id="Optional-parameters"><a href="#Optional-parameters" class="headerlink" title="Optional parameters"></a>Optional parameters</h3><p>You can specify additional parameters with the command line escaped JSON string via <code>--source-params</code> / <code>--target-params</code> or from UI.</p><h4 id="prefix"><a href="#prefix" class="headerlink" title="prefix"></a>prefix</h4><p>Bucket prefix (typically used to specify internal folder/container)</p><h4 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h4><p>A regular expression for filtering bucket objects. Default is skipping all bucket objects (Use “.*” explicitly to collect all objects)</p><h4 id="create-local-copy"><a href="#create-local-copy" class="headerlink" title="create_local_copy"></a>create_local_copy</h4><p>If set true, the local copy of the remote storage will be created.</p><h4 id="use-blob-urls"><a href="#use-blob-urls" class="headerlink" title="use_blob_urls"></a>use_blob_urls</h4><p>Generate task data with URLs pointed to your bucket objects(for resources like jpg, mp3, etc). If not selected, bucket objects will be interpreted as tasks in Label Studio JSON format, one object per task.</p><h2 id="Google-Cloud-Storage"><a href="#Google-Cloud-Storage" class="headerlink" title="Google Cloud Storage"></a>Google Cloud Storage</h2><p>To connect your <a href="https://cloud.google.com/storage" target="_blank" rel="noopener">GCS</a> bucket with Label Studio, be sure you have enabled programmatic access. <a href="https://cloud.google.com/storage/docs/reference/libraries" target="_blank" rel="noopener">Check this link</a> to learn more about how to set up access to your GCS bucket.</p><h3 id="Create-connection-on-startup-1"><a href="#Create-connection-on-startup-1" class="headerlink" title="Create connection on startup"></a>Create connection on startup</h3><p>The following commands launch Label Studio, configure the connection to your GCS bucket, scan for existing tasks, and load them into the app for the labeling.</p><h4 id="Read-bucket-with-JSON-formatted-tasks-1"><a href="#Read-bucket-with-JSON-formatted-tasks-1" class="headerlink" title="Read bucket with JSON-formatted tasks"></a>Read bucket with JSON-formatted tasks</h4><pre><code class="hljs bash">label-studio start my_project --init --<span class="hljs-built_in">source</span> gcs --<span class="hljs-built_in">source</span>-path my-gcs-bucket</code></pre><h4 id="Write-completions-to-bucket-1"><a href="#Write-completions-to-bucket-1" class="headerlink" title="Write completions to bucket"></a>Write completions to bucket</h4><pre><code class="hljs bash">label-studio start my_project --init --target gcs-completions --<span class="hljs-built_in">source</span>-path my-gcs-bucket</code></pre><h3 id="Working-with-Binary-Large-OBjects-BLOBs-1"><a href="#Working-with-Binary-Large-OBjects-BLOBs-1" class="headerlink" title="Working with Binary Large OBjects (BLOBs)"></a>Working with Binary Large OBjects (BLOBs)</h3><p>When you are storing BLOBs in your GCS bucket (like images or audio files), you might want to use then as is, by generating URLs pointing to those objects (e.g. <code>gs://my-gcs-bucket/image.jpg</code>)<br>Label Studio allows you to generate input tasks with corresponding URLs automatically on-the-fly. You can to this either specifying <code>--source-params</code> when launching app:</p><pre><code class="hljs bash">label-studio start my_project --init --<span class="hljs-built_in">source</span> gcs --<span class="hljs-built_in">source</span>-path my-gcs-bucket --<span class="hljs-built_in">source</span>-params <span class="hljs-string">"&#123;\"data_key\": \"my-object-tag-<span class="hljs-variable">$value</span>\", \"use_blob_urls\": true, \"regex\": "</span>.*<span class="hljs-string">"&#125;"</span></code></pre><p>You can leave <code>&quot;data_key&quot;</code> empty (or skip it at all) then LS generates it automatically with the first task key from label config (it’s useful when you have only one object tag exposed).</p><h3 id="Optional-parameters-1"><a href="#Optional-parameters-1" class="headerlink" title="Optional parameters"></a>Optional parameters</h3><p>You can specify additional parameters with the command line escaped JSON string via <code>--source-params</code> / <code>--target-params</code> or from UI.</p><h4 id="prefix-1"><a href="#prefix-1" class="headerlink" title="prefix"></a>prefix</h4><p>Bucket prefix (typically used to specify internal folder/container)</p><h4 id="regex-1"><a href="#regex-1" class="headerlink" title="regex"></a>regex</h4><p>A regular expression for filtering bucket objects. Default is skipping all bucket objects (Use “.*” explicitly to collect all objects)</p><h4 id="create-local-copy-1"><a href="#create-local-copy-1" class="headerlink" title="create_local_copy"></a>create_local_copy</h4><p>If set true, the local copy of the remote storage will be created.</p><h4 id="use-blob-urls-1"><a href="#use-blob-urls-1" class="headerlink" title="use_blob_urls"></a>use_blob_urls</h4><p>Generate task data with URLs pointed to your bucket objects(for resources like jpg, mp3, etc). If not selected, bucket objects will be interpreted as tasks in Label Studio JSON format, one object per task.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tasks</title>
      <link href="/guide/tasks.html"/>
      <url>/guide/tasks.html</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-format"><a href="#Basic-format" class="headerlink" title="Basic format"></a>Basic format</h2><p>Label Studio expects the JSON-formatted list of <em>tasks</em> as input. Each <em>task</em> is a dictionary-like structure, with some specific keys reserved for internal use:</p><ul><li><strong>data</strong> - task body is represented as a dictionary <code>{&quot;key&quot;: &quot;value&quot;}</code>. It is possible to store any number of key-value pairs within task data, but there should be <em>source keys</em> defined by <a href="/guide/setup.html#Labeling-config">label config</a> (i.e. what is defined by object tag’s attribute <code>value=&quot;$key&quot;</code>).<br>  Depending on the object tag type, field values are interpreted differently:<ul><li><code>&lt;Text value=&quot;$key&quot;&gt;</code>: <code>value</code> is taken as plain text</li><li><code>&lt;HyperText value=&quot;$key&quot;&gt;</code>: <code>value</code> is a HTML markup</li><li><code>&lt;HyperText value=&quot;$key&quot; encoding=&quot;base64&quot;&gt;</code>: <code>value</code> is a base64 encoded HTML markup</li><li><code>&lt;Audio value=&quot;$key&quot;&gt;</code>: <code>value</code> is taken as a valid URL to audio file</li><li><code>&lt;AudioPlus value=&quot;$key&quot;&gt;</code>: <code>value</code> is taken as a valid URL to an audio file with CORS policy enabled on the server side</li><li><code>&lt;Image value=&quot;$key&quot;&gt;</code>: <code>value</code> is a valid URL to an image file</li></ul></li><li>(optional) <strong>id</strong> - integer task ID</li><li>(optional) <strong>completions</strong> - list of output annotation results, where each result is saved using <a href="/guide/export.html#completions">Label Studio’s completion format</a>. You can import annotation results in order to use them in consequent labeling task.</li><li>(optional) <strong>predictions</strong> - list of model prediction results, where each result is saved using <a href="/guide/export.html#predictions">Label Studio’s prediction format</a>. Importing predictions is useful for automatic task prelabeling &amp; active learning &amp; exploration.</li></ul><blockquote><p>Note: in case <code>&quot;data&quot;</code> field is missing in imported task object, the whole task body is interpreted as <code>task[&quot;data&quot;]</code>, i.e. <code>[{&quot;my_key&quot;: &quot;my_value&quot;}]</code> will be internally converted to <code>[{&quot;data&quot;: {&quot;my_key&quot;: &quot;my_value&quot;}}]</code></p></blockquote><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Here is an example of a config and tasks list composed of one element, for text classification project:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$my_text"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sentiment_class"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"message"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Positive"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Neutral"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Negative"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><pre><code class="hljs yaml"><span class="hljs-string">[&#123;</span>  <span class="hljs-comment"># "id" is a reserved field, avoid using it when importing tasks</span><span class="hljs-attr">  "id":</span> <span class="hljs-number">123</span><span class="hljs-string">,</span>  <span class="hljs-comment"># "data" requires to contain "my_text" field defined by labeling config,</span>  <span class="hljs-comment"># and can optionally include other fields</span><span class="hljs-attr">  "data":</span> <span class="hljs-string">&#123;</span><span class="hljs-attr">    "my_text":</span> <span class="hljs-string">"Opossum is great"</span><span class="hljs-string">,</span><span class="hljs-attr">    "ref_id":</span> <span class="hljs-number">456</span><span class="hljs-string">,</span><span class="hljs-attr">    "meta_info":</span> <span class="hljs-string">&#123;</span><span class="hljs-attr">      "timestamp":</span> <span class="hljs-string">"2020-03-09 18:15:28.212882"</span><span class="hljs-string">,</span><span class="hljs-attr">      "location":</span> <span class="hljs-string">"North Pole"</span>    <span class="hljs-string">&#125;</span>   <span class="hljs-string">&#125;,</span>  <span class="hljs-comment"># completions are the list of annotation results matched labeling config schema</span><span class="hljs-attr">  "completions":</span> <span class="hljs-string">[&#123;</span><span class="hljs-attr">    "result":</span> <span class="hljs-string">[&#123;</span><span class="hljs-attr">      "from_name":</span> <span class="hljs-string">"sentiment_class"</span><span class="hljs-string">,</span><span class="hljs-attr">      "to_name":</span> <span class="hljs-string">"message"</span><span class="hljs-string">,</span><span class="hljs-attr">      "type":</span> <span class="hljs-string">"choices"</span><span class="hljs-string">,</span><span class="hljs-attr">      "value":</span> <span class="hljs-string">&#123;</span><span class="hljs-attr">        "choices":</span> <span class="hljs-string">["Positive"]</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;]</span>  <span class="hljs-string">&#125;],</span>  <span class="hljs-comment"># "predictions" are pretty similar to "completions" </span>  <span class="hljs-comment"># except that they also include some ML related fields like prediction "score"</span><span class="hljs-attr">  "predictions":</span> <span class="hljs-string">[&#123;</span><span class="hljs-attr">    "result":</span> <span class="hljs-string">[&#123;</span><span class="hljs-attr">      "from_name":</span> <span class="hljs-string">"sentiment_class"</span><span class="hljs-string">,</span><span class="hljs-attr">      "to_name":</span> <span class="hljs-string">"message"</span><span class="hljs-string">,</span><span class="hljs-attr">      "type":</span> <span class="hljs-string">"choices"</span><span class="hljs-string">,</span><span class="hljs-attr">      "value":</span> <span class="hljs-string">&#123;</span><span class="hljs-attr">        "choices":</span> <span class="hljs-string">["Neutral"]</span>      <span class="hljs-string">&#125;</span>    <span class="hljs-string">&#125;],</span>  <span class="hljs-comment"># score is used for active learning sampling mode</span><span class="hljs-attr">    "score":</span> <span class="hljs-number">0.95</span>  <span class="hljs-string">&#125;]</span><span class="hljs-string">&#125;]</span></code></pre><h2 id="Import-formats"><a href="#Import-formats" class="headerlink" title="Import formats"></a>Import formats</h2><p>There are a few possible ways to import data files to your labeling project:</p><ul><li><p>Start Label Studio without specifying input path and then import through the web interfaces available at <a href="http://localhost:8080/import" target="_blank" rel="noopener">http://localhost:8080/import</a></p></li><li><p>Initialize Label Studio project and directly specify the paths, e.g. <code>label-studio init --input-path my_tasks.json --input-format json</code></p></li></ul><p>The <code>--input-path</code> argument points to a file or a directory where your labeling tasks reside. By default it expects <a href="tasks.html#JSON">JSON-formatted tasks</a>, but you can also specify all other formats listed bellow by using <code>--input-format</code> option.</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><pre><code class="hljs bash">label-studio init --input-path=my_tasks.json</code></pre><p><code>tasks.json</code> contains tasks in a <a href="tasks.html#Basic-format">basic Label Studio JSON format</a></p><h3 id="Directory-with-JSON-files"><a href="#Directory-with-JSON-files" class="headerlink" title="Directory with JSON files"></a>Directory with JSON files</h3><pre><code class="hljs bash">label-studio init --input-path=dir/with/json/files --input-format=json-dir</code></pre><p>Instead of putting all tasks into one file, you can split your input data into several <em>tasks.json</em>, and specify the directory path. Each JSON file contains tasks in a <a href="tasks.html#Basic-format">basic Label Studio JSON format</a>.</p><blockquote><p>Note: that if you add more files into the directory then you need to restart Label Studio server.</p></blockquote><h3 id="CSV-TSV"><a href="#CSV-TSV" class="headerlink" title="CSV / TSV"></a>CSV / TSV</h3><p>When CSV / TSV formatted text file is used, column names are interpreted as task data keys: </p><pre><code class="hljs csv">my_text,optional_fieldthis is a first task,123this is a second task,456</code></pre><blockquote><p>Note: Currently CSV / TSV files could be imported only in UI.</p></blockquote><h3 id="Plain-text"><a href="#Plain-text" class="headerlink" title="Plain text"></a>Plain text</h3><pre><code class="hljs bash">label-studio init --input-path=my_tasks.txt --input-format=text --label-config=config.xml</code></pre><p>In a typical scenario, you may use only one input data stream (or in other words only one <a href="/tags">object tag</a> specified in label config). In this case, you don’t need to use JSON format, but simply write down your values in a plain text file, line by line, e.g.</p><pre><code class="hljs text">this is a first taskthis is a second task</code></pre><h3 id="Directory-with-plain-text-files"><a href="#Directory-with-plain-text-files" class="headerlink" title="Directory with plain text files"></a>Directory with plain text files</h3><pre><code class="hljs bash">label-studio init --input-path=dir/with/text/files --input-format=text-dir --label-config=config.xml</code></pre><p>You can split your input data into several plain text files, and specify the directory path. Then Label Studio scans each file line-by-line, creating one task per line. Each plain text file is formatted the same as above.</p><h3 id="Directory-with-image-files"><a href="#Directory-with-image-files" class="headerlink" title="Directory with image files"></a>Directory with image files</h3><pre><code class="hljs bash">label-studio init --input-path=dir/with/images --input-format=image-dir --label-config=config.xml --allow-serving-local-files</code></pre><blockquote><p>WARNING: “–allow-serving-local-files” is intended to use only for locally running instances: avoid using it for remote servers unless you are sure what you’re doing.</p></blockquote><p>You can point to a local directory, which is scanned recursively for image files. Each file is used to create one task. Since Label Studio works only with URLs, a web link is created for each task, pointing to your local directory as follows:</p><pre><code class="hljs undefined">http://&lt;host:port&gt;/data/filename?d=&lt;path/to/the/local/directory&gt;</code></pre><p>Supported formats are: <code>.png</code> <code>.jpg</code> <code>.jpeg</code> <code>.tiff</code> <code>.bmp</code> <code>.gif</code></p><h3 id="Directory-with-audio-files"><a href="#Directory-with-audio-files" class="headerlink" title="Directory with audio files"></a>Directory with audio files</h3><pre><code class="hljs bash">label-studio init --input-path=my/audios/dir --input-format=audio-dir --label-config=config.xml --allow-serving-local-files</code></pre><blockquote><p>WARNING: “–allow-serving-local-files” is intended to use only for locally running instances: avoid using it for remote servers unless you are sure what you’re doing.</p></blockquote><p>You can point to a local directory, which is scanned recursively for audio files. Each file is used to create one task. Since Label Studio works only with URLs, a web link is created for each task, pointing to your local directory as follows:</p><pre><code class="hljs undefined">http://&lt;host:port&gt;/data/filename?d=&lt;path/to/the/local/directory&gt;</code></pre><p>Supported formats are: <code>.wav</code> <code>.aiff</code> <code>.mp3</code> <code>.au</code> <code>.flac</code></p><h3 id="Upload-resource-files-on-Import-page"><a href="#Upload-resource-files-on-Import-page" class="headerlink" title="Upload resource files on Import page"></a>Upload resource files on Import page</h3><p>For label configs with one data key (e.g.: one input image) Label Studio supports a file uploading via GUI,<br>just drag &amp; drop your files (or select them from file dialog) on “Import” page.<br>This option is suitable for limited file number.     </p><h2 id="Import-using-API"><a href="#Import-using-API" class="headerlink" title="Import using API"></a>Import using API</h2><p>Use API to import tasks in <a href="tasks.html#Basic-format">Label Studio basic format</a> if for any reason you can’t access either a local filesystem nor Web UI (e.g. if you are creating a data stream)</p><pre><code class="hljs bash">curl -X POST -H Content-Type:application/json http://localhost:8080/api/import \--data <span class="hljs-string">"[&#123;\"my_key\": \"my_value_1\"&#125;, &#123;\"my_key\": \"my_value_2\"&#125;]"</span></code></pre><h2 id="Retrieve-tasks-using-API"><a href="#Retrieve-tasks-using-API" class="headerlink" title="Retrieve tasks using API"></a>Retrieve tasks using API</h2><p>You can retrieve project settings including total task count using API in JSON format: </p><pre><code class="hljs json">http://&lt;host:port&gt;/api/project</code></pre><p>Response example: </p><pre><code class="hljs json">&#123;  ...   "task_count": 3,  ...&#125;</code></pre><p>To get tasks with pagination in JSON format:</p><pre><code class="hljs undefined">http://&lt;host:port&gt;/api/tasks?page=1&amp;page_size=10&amp;order=&#123;-&#125;[id|completed_at]</code></pre><p>Response example:</p><pre><code class="hljs json">[  &#123;    <span class="hljs-attr">"completed_at"</span>: <span class="hljs-string">"2020-05-29 03:31:15"</span>,     <span class="hljs-attr">"completions"</span>: [      &#123;        <span class="hljs-attr">"created_at"</span>: <span class="hljs-number">1590712275</span>,         <span class="hljs-attr">"id"</span>: <span class="hljs-number">10001</span>,         <span class="hljs-attr">"lead_time"</span>: <span class="hljs-number">4.0</span>,         <span class="hljs-attr">"result"</span>: [ ... ]      &#125;    ],     <span class="hljs-attr">"data"</span>: &#123;      <span class="hljs-attr">"image"</span>: <span class="hljs-string">"s3://htx-dev/dataset/training_set/dogs/dog.102.jpg"</span>    &#125;,     <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,     <span class="hljs-attr">"predictions"</span>: []  &#125;]</code></pre><h2 id="Sampling"><a href="#Sampling" class="headerlink" title="Sampling"></a>Sampling</h2><p>You can define the way of how your imported tasks are exposed to annotators. Several options are available. To enable one of them, specify <code>--sampling=&lt;option&gt;</code> as command line option.</p><h4 id="sequential"><a href="#sequential" class="headerlink" title="sequential"></a>sequential</h4><p>Tasks are ordered ascending by their <code>&quot;id&quot;</code> fields. This is default mode.</p><h4 id="uniform"><a href="#uniform" class="headerlink" title="uniform"></a>uniform</h4><p>Tasks are sampled with equal probabilities.</p><h4 id="prediction-score-min"><a href="#prediction-score-min" class="headerlink" title="prediction-score-min"></a>prediction-score-min</h4><p>Task with minimum average prediction score is taken. When this option is set, <code>task[&quot;predictions&quot;]</code> list should be presented along with <code>&quot;score&quot;</code> field within each prediction.</p><h4 id="prediction-score-max"><a href="#prediction-score-max" class="headerlink" title="prediction-score-max"></a>prediction-score-max</h4><p>Task with maximum average prediction score is taken. When this option is set, <code>task[&quot;predictions&quot;]</code> list should be presented along with <code>&quot;score&quot;</code> field within each prediction.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/playground/js.cookie.js"/>
      <url>/playground/js.cookie.js</url>
      
        <content type="html"><![CDATA[/*! * JavaScript Cookie v2.2.0 * https://github.com/js-cookie/js-cookie * * Copyright 2006, 2015 Klaus Hartl & Fagner Brack * Released under the MIT license */;(function (factory) {var registeredInModuleLoader = false;if (typeof define === 'function' && define.amd) {define(factory);registeredInModuleLoader = true;}if (typeof exports === 'object') {module.exports = factory();registeredInModuleLoader = true;}if (!registeredInModuleLoader) {var OldCookies = window.Cookies;var api = window.Cookies = factory();api.noConflict = function () {window.Cookies = OldCookies;return api;};}}(function () {function extend () {var i = 0;var result = {};for (; i < arguments.length; i++) {var attributes = arguments[ i ];for (var key in attributes) {result[key] = attributes[key];}}return result;}function init (converter) {function api (key, value, attributes) {var result;if (typeof document === 'undefined') {return;}// Writeif (arguments.length > 1) {attributes = extend({path: '/'}, api.defaults, attributes);if (typeof attributes.expires === 'number') {var expires = new Date();expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);attributes.expires = expires;}// We're using "expires" because "max-age" is not supported by IEattributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';try {result = JSON.stringify(value);if (/^[\{\[]/.test(result)) {value = result;}} catch (e) {}if (!converter.write) {value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);} else {value = converter.write(value, key);}key = encodeURIComponent(String(key));key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);key = key.replace(/[\(\)]/g, escape);var stringifiedAttributes = '';for (var attributeName in attributes) {if (!attributes[attributeName]) {continue;}stringifiedAttributes += '; ' + attributeName;if (attributes[attributeName] === true) {continue;}stringifiedAttributes += '=' + attributes[attributeName];}return (document.cookie = key + '=' + value + stringifiedAttributes);}// Readif (!key) {result = {};}// To prevent the for loop in the first place assign an empty array// in case there are no cookies at all. Also prevents odd result when// calling "get()"var cookies = document.cookie ? document.cookie.split('; ') : [];var rdecode = /(%[0-9A-Z]{2})+/g;var i = 0;for (; i < cookies.length; i++) {var parts = cookies[i].split('=');var cookie = parts.slice(1).join('=');if (!this.json && cookie.charAt(0) === '"') {cookie = cookie.slice(1, -1);}try {var name = parts[0].replace(rdecode, decodeURIComponent);cookie = converter.read ?converter.read(cookie, name) : converter(cookie, name) ||cookie.replace(rdecode, decodeURIComponent);if (this.json) {try {cookie = JSON.parse(cookie);} catch (e) {}}if (key === name) {result = cookie;break;}if (!key) {result[name] = cookie;}} catch (e) {}}return result;}api.set = api;api.get = function (key, default_value) {var value = api.call(api, key);return value === undefined ? default_value: value;};api.getJSON = function () {return api.apply({json: true}, [].slice.call(arguments));};api.defaults = {};api.remove = function (key, attributes) {api(key, '', extend(attributes, {expires: -1}));};api.withConverter = init;return api;}return init(function () {});}));]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Audio</title>
      <link href="/tags/audio.html"/>
      <url>/tags/audio.html</url>
      
        <content type="html"><![CDATA[<p>Audio tag plays a simple audio file</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td>name of the element</td></tr><tr><td>value</td><td><code>string</code></td><td>value of the element</td></tr><tr><td>hotkey</td><td><code>string</code></td><td>hotkey used to play/pause audio</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Audio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$audio"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>Audio classification</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Audio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$audio"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ch"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"audio"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Positive"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Negative"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>Audio transcription</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Audio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$audio"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">TextArea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ta"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"audio"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/playground/index.html"/>
      <url>/playground/index.html</url>
      
        <content type="html"><![CDATA[<style>  .content {     max-width: none !important;     margin-left: 0 !important;     padding: 1em 0 0 0;  }    .validation {     margin-top: 1em;     margin-left: 1em;     color: red;     text-transform: capitalize;  }    .CodeMirror {     min-height: 500px !important;  }    h1 {    margin-bottom: 0.5em !important;  }    h3 {    margin: 1em !important;    width: unset;    height: unset;  }    iframe {     border: 0;     margin: 0 !important;  }    #render-editor {     width: 100%;  }    #editor-wrap {     background-color: rgb(252,252,252);     padding: 0;     margin: 0;     display: none;  }    .preview {     padding: 5px;     overflow: auto;  }   .editor-row {      display: flex;       margin-bottom: 1em;       width: 100% !important;  }     .data-row {      display: flex;   }     .preview-col {      width: 60%;       flex: 1;       background: rgb(252,252,252);   }    .editor-area {      border: 1px solid #f48a4259;  }     .config-col {      color: rgba(0,0,0,.6);       background: rgb(252,252,252);       margin-right: 2em;       width: 40%;   }    .input-col {      width: 49%;      padding-right: 2%;  }    .output-col {      width: 49%;  }  .hidden {      display: none !important;  }    .message {    width: 90%;    max-width: 1000px;    margin: 1em auto 3em auto;      }   .grid {     display: -webkit-box;    display: -ms-flexbox;    display: flex;    -webkit-box-orient: horizontal;    -webkit-box-direction: normal;        -ms-flex-direction: row;            flex-direction: row;    -ms-flex-wrap: wrap;        flex-wrap: wrap;    -webkit-box-align: stretch;        -ms-flex-align: stretch;            align-items: stretch;    padding: 0;  }    .column {    width: 20% !important;  }  .use-template {    font-weight: normal!important;  }  .use-template:hover {    border-bottom: 1px dashed darkorange;  }  @font-face {    font-family: 'Icons';    src: url("/fonts/icons.eot");    src: url("/fonts/icons.eot?#iefix") format('embedded-opentype'), url("/fonts/icons.woff2") format('woff2'), url("/fonts/icons.woff") format('woff'), url("/fonts/icons.ttf") format('truetype'), url("/fonts/icons.svg#icons") format('svg');    font-style: normal;    font-weight: normal;    font-variant: normal;    text-decoration: inherit;    text-transform: none;  }  i.icon {    opacity: 0.75;    display: inline-block;    margin: 0 0.25rem 0 0;    width: 1.18em;    height: 1em;    font-family: 'Icons';    font-style: normal;    font-weight: normal;    text-decoration: inherit;    text-align: center;    speak: none;    -moz-osx-font-smoothing: grayscale;    -webkit-font-smoothing: antialiased;    -webkit-backface-visibility: hidden;            backface-visibility: hidden;  }  i.icon:before {    background: none !important;  }  i.icon.sound:before {    content: "\f025";  }  i.icon.image:before {    content: "\f03e";  }  i.icon.code:before {    content: "\f121";  }  i.icon.font:before {    content: "\f031";  }  i.icon.video:before {    content: "\f03d";  }  i.icon.share:before {    content: "\f064"  }  i.icon.copy.outline:before {    content: "\f0c5"  }  i.icon.archive:before {    content: "\f187";  }  i.icon.eye:before {    content: "\f06e";  }  i.icon.bullseye:before {    content: "\f140";  }  i.icon.vector.square:before {    content: "\f5cb";  }  .share-buttons {    float:right;    margin: 1.2em 1em 1em 1em;  }  .share-buttons i {    cursor: pointer;    opacity: 0.5 !important;    color: #f58a48;    transition: 0.25s;  }  .share-buttons i:hover {    opacity: 1 !important;    transition: 0.25s;  }  .intro {     max-width: 700px;     margin: 0 auto;      margin-top: 1.5em;  }@media screen and (max-width: 900px) {@media only screen and (max-width: 767.98px) {    .intro {      padding-left: 0;    }    .grid {      width: auto;      margin-left: 0 !important;      margin-right: 0 !important;    }    .column {      width: 100% !important;      margin: 0 0 !important;      -webkit-box-shadow: none !important;              box-shadow: none !important;      padding: 1rem 1rem !important;    }    .editor-row {        flex-direction: column;    }    .data-row {        flex-direction: column;    }    .preview-col {        width: 100%;    }    .config-col {        width: 100%;    }    .input-col, .output-col {         width: 100%;     }}</style><script src="js.cookie.js"></script><!-- html --><div class="intro">    <h1>Playground</h1>    Start typing in the config, and you can quickly preview the labeling interface. At the bottom of the page, you have live serialization updates of what Label Studio expects as an input and what it gives you as a result of your labeling work.</div><!-- Templates --><div class="ui message" style="margin-bottom: 1.5em">  <div class="active content" style="margin-top:-8px">    <!-- Templates categories -->    <div class="ui grid stackable" style="margin: 0 auto;">      <div class="three wide column category">        <i class="icon sound" title="Audio sources"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="15">Audio classification</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="17">Emotion segmentation</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="16">Speaker diarization</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="19">Transcription per region</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="18">Transcription whole audio</a>        </div>      </div>      <div class="three wide column category">        <i class="icon image" title="Image sources"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="26">Image classification</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="24">Bbox object detection</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="25">Circular object detector</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="27">Keypoints and landmarks</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="29">Polygon segmentation</a>        </div>      </div>      <div class="three wide column category">        <i class="icon font" title="Text sources"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="34">Text classification</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="35">Multi classification</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="36">Named entity recognition</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="37">Text summarization</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="33">Word alignment</a>        </div>      </div>      <div class="three wide column category">        <i class="icon code" title="HTML sources"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="20">HTML classification</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="0">HTML NER tagging</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="21">Dialogues &amp; conversations</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="23">Rate website</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="22">Rate PDF</a>        </div>      </div>      <div class="three wide column category">        <i class="icon archive" title="Other sources"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="30">Pairwise comparison</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="31">Relations among entities</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="32">Video classifier</a>        </div>      </div>    </div>  </div></div><div class="ui message" id="accordion">  <center>    <h4 style="color: #555">Advanced config examples</h4>  </center>  <div class="content" style="margin-top:-20px">    <!-- Templates categories -->    <div class="ui grid stackable" style="margin: 0 auto;">      <div class="three wide column category">        <i class="icon eye" title="View layout examples"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="3">Long text with scrollbar</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="14">Pretty choices</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="4">Sticky header</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="5">Sticky left column</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="2">Three columns</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="1">Two columns</a>        </div>      </div>      <div class="three wide column category">        <i class="icon bullseye" title="Nested examples with conditional behaviour"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="8">Conditional classification</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="7">Three level classification</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="6">Two level classification</a>        </div>      </div>      <div class="three wide column category">        <i class="icon vector square" title="Per region examples"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="13">Audio regions labeling</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="11">Image bboxes labeling</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="12">Text spans labeling</a>        </div>      </div>      <div class="three wide column category">        <i class="icon archive" title="Other sources"></i>        <!-- Template -->        <div class="ui item">          <a class="use-template no-go" href="#" data-value="9">Filtering long labels list</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="28">Image &amp; Audio &amp; Text</a>        </div>        <div class="ui item">          <a class="use-template no-go" href="#" data-value="10">Multi-image classification</a>        </div>      </div>    </div>  </div></div><div>  <div class="editor-row">    <div class="config-col">      <div>        <h3 style="display: inline-block">Label config</h3>        <span class="share-buttons">          <i class="icon copy outline" style="cursor: pointer" title="Copy label config"></i>          <i class="icon share" style="cursor: pointer" title="Copy link to this playground"></i>        </span>      </div>      <div class="editor-area">      <!-- Textarea -->      <textarea name="label_config" cols="40" rows="10" class="project-form htx-html-editor" id="id_label_config"></textarea>      </div>    </div>    <div class="preview-col">      <h3>Interface preview</h3>      <div class="validation"></div>      <div id="editor-wrap">      </div>      <div class="preview" id="preload-editor">        <div class="loading" style="margin: 20px; opacity: 0.8">            <img width="40px" src="/images/loading.gif">            <span style="position: relative; top: -14px">&nbsp;&nbsp;&nbsp;Loading Label Studio, please wait ...</span>        </div>      </div>    </div>  </div></div><!-- Preview in two cols --><div class="data-row">  <div class="input-col">    <h3>Input preview</h3>    <pre class="preview" id="upload-data-example">...</pre>  </div>  <div class="output-col">    <h3>Output preview</h3>    <pre class="preview" id="data-results">...</pre>  </div></div><!-- Hidden template codes --><empty>  <!-- Starting template -->  <script id="start-template" type="text"><View>  <!-- Image with Polygons -->  <View style="padding: 25px;               box-shadow: 2px 2px 8px #AAA">    <Header value="Label the image with polygons"/>    <Image name="img" value="$image"/>    <Text name="text1"          value="Select label, start to click on image"/>    <PolygonLabels name="tag" toName="img">      <Label value="Airbus" background="blue"/>      <Label value="Boeing" background="red"/>    </PolygonLabels>  </View>  <!-- Text with multi-choices -->  <View style="margin-top: 20px; padding: 25px;               box-shadow: 2px 2px 8px #AAA;">    <Header value="Classify the text"/>    <Text name="text2" value="$text"/>    <Choices name="" toName="img" choice="multiple">      <Choice alias="wisdom" value="Wisdom"/>      <Choice alias="long" value="Long"/>    </Choices>  </View>  </View>  </script>                <script data-template-pk="15" type="text"><View>  <Header value="Listen to the audio"/>  <Audio name="audio" value="$audio"/>  <Header value="Select its topic"/>  <Choices name="topic" toName="audio"           choice="single-radio" showInline="true">    <Choice value="Politics"/>    <Choice value="Business"/>    <Choice value="Education"/>    <Choice value="Other"/>  </Choices></View></script>          <script data-template-pk="17" type="text"><View>  <Labels name="emotion" toName="audio" choice="multiple">    <Label value="Fear" background="#ff0000" />    <Label value="Anger" background="#d50000" />    <Label value="Sadness" background="#5050ff" />    <Label value="Joy" background="#ffff53" />    <Label value="Disgust" background="#ff53ff" />    <Label value="Surprise" background="#58beff" />    <Label value="Trust" background="#009700" />    <Label value="Anticipation" background="#ffa953" />  </Labels>  <AudioPlus name="audio" value="$audio"/></View></script>          <script data-template-pk="16" type="text"><View>  <Labels name="label" toName="audio" choice="multiple">    <Label value="Speaker 1" />    <Label value="Speaker 2" />  </Labels>  <AudioPlus name="audio" value="$audio"/></View></script>          <script data-template-pk="19" type="text"><View>  <Labels name="labels" toName="audio">    <Label value="Speaker 1" />    <Label value="Speaker 2" />  </Labels>  <AudioPlus name="audio" value="$audio"/>  <View visibleWhen="region-selected">    <Header value="Provide Transcription" />  </View>  <TextArea name="transcription" toName="audio"            rows="2" editable="true"            perRegion="true" required="true" /></View></script>          <script data-template-pk="18" type="text"><View>  <Header value="Listen to the audio" />  <Audio name="audio" value="$audio" />  <Header value="Write the transcription" />  <TextArea name="transcription" toName="audio"            rows="4" editable="true" maxSubmissions="1" /></View></script>          <script data-template-pk="26" type="text"><View>  <Image name="image" value="$image"/>  <Choices name="choice" toName="image" showInLine="true">    <Choice value="Boeing" background="blue"/>    <Choice value="Airbus" background="green" />  </Choices></View></script>          <script data-template-pk="24" type="text"><View>  <Image name="image" value="$image"/>  <RectangleLabels name="label" toName="image">    <Label value="Airplane" background="green"/>    <Label value="Car" background="blue"/>  </RectangleLabels></View></script>          <script data-template-pk="25" type="text"><View>  <Image name="image" value="$image"/>  <EllipseLabels name="tag" toName="image">    <Label value="Airplane" background="green"/>    <Label value="Car" background="blue"/>  </EllipseLabels></View></script>          <script data-template-pk="27" type="text"><View>  <Image name="image" value="$image" zoom="true" zoomControl="true"/>  <KeyPointLabels name="label" toName="image"                  strokewidth="2" opacity="1" >      <Label value="Engine" background="red"/>      <Label value="Tail" background="blue"/>  </KeyPointLabels></View></script>          <script data-template-pk="29" type="text"><View>  <Header value="Select label and start to click on image"/>  <Image name="image" value="$image"/>  <PolygonLabels name="label" toName="image"                 strokeWidth="3" pointSize="small"                 opacity="0.9">    <Label value="Airplane" background="red"/>    <Label value="Car" background="blue"/>  </PolygonLabels></View></script>          <script data-template-pk="34" type="text"><View>  <Text name="text" value="$text"/>  <Choices name="sentiment" toName="text" choice="single">    <Choice value="Positive"/>    <Choice value="Negative"/>    <Choice value="Neutral"/>  </Choices></View></script>          <script data-template-pk="35" type="text"><View>  <Text name="text" value="$text" />  <Choices name="sentiment" toName="text" choice="multiple">    <View style="display: flex; justify-content: space-between">      <View style="width: 50%">        <Header value="Select Topics" />        <Choice value="Politics"/>    <Choice value="Business"/>    <Choice value="Sport"/>      </View>      <View>        <Header value="Select Moods" />        <Choice value="Cheerful"/>    <Choice value="Melancholy"/>    <Choice value="Romantic"/>      </View>    </View>  </Choices></View></script>          <script data-template-pk="36" type="text"><View>  <Labels name="label" toName="text">    <Label value="Person" background="red"/>    <Label value="Organization" background="darkorange"/>    <Label value="Fact" background="orange"/>    <Label value="Money" background="green"/>    <Label value="Date" background="darkblue"/>    <Label value="Time" background="blue"/>    <Label value="Ordinal" background="purple"/>    <Label value="Percent" background="#842"/>    <Label value="Product" background="#428"/>    <Label value="Language" background="#482"/>    <Label value="Location" background="rgba(0,0,0,0.8)"/>  </Labels>  <Text name="text" value="$text"/></View></script>          <script data-template-pk="37" type="text"><View>  <Header value="Please read the text" />  <Text name="text" value="$text" />  <Header value="Provide one sentence summary" />  <TextArea name="answer" toName="text"            showSubmitButton="true" maxSubmissions="1" editable="true"            required="true" /></View></script>          <script data-template-pk="33" type="text"><View>  <Labels name="label" toName="text">    <Label value="Person" />    <Label value="Organization" />  </Labels>  <Text name="text" value="$text" granularity="word" /></View></script>          <script data-template-pk="20" type="text"><View>  <Choices name="toxicity" toName="web_page" choice="multiple" showInline="true">    <Choice value="Toxic" background="red"/>    <Choice value="Severe Toxic" background="brown"/>    <Choice value="Obsene" background="green"/>    <Choice value="Threat" background="blue"/>    <Choice value="Insult" background="orange"/>    <Choice value="Identity Hate" background="grey"/>  </Choices>  <View style="border: 1px solid #CCC;               border-radius: 10px;               padding: 5px">    <HyperText name="web_page" value="$text"/>  </View></View></script>          <script data-template-pk="0" type="text"><View>  <HyperTextLabels name="ner" toName="text">    <Label value="Person" background="green"/>    <Label value="Organization" background="blue"/>  </HyperTextLabels>  <View style="border: 1px solid #CCC;               border-radius: 10px;               padding: 5px">    <HyperText name="text" value="$text"/>  </View></View></script>          <script data-template-pk="21" type="text"><View>  <HyperText name="dialog" value="$dialogs"/>  <Header value="Rate last answer"/>  <Choices name="rating" choice="single-radio" toName="dialog" showInline="true">    <Choice value="Bad answer"/>    <Choice value="Neutral answer"/>    <Choice value="Good answer"/>  </Choices>  <Header value="Write your answer and press Enter"/>  <TextArea name="answer"/></View></script>          <script data-template-pk="22" type="text"><View>  <HyperText name="pdf" value="$pdf"/>  <Header value="Rate this article"/>  <Rating name="rating" toName="pdf" maxRating="10" icon="star" size="medium" />  <Choices name="choices" choice="single-radio" toName="pdf" showInline="true">    <Choice value="Important article"/>    <Choice value="Yellow press"/>  </Choices></View></script>          <script data-template-pk="23" type="text"><View>  <HyperText name="website" value="$website"/>  <Header value="Rate this website"/>  <Rating name="rating" toName="website" maxRating="10" icon="star" size="medium" />  <Choices name="choices" choice="single-radio" toName="website" showInline="true">    <Choice value="Important article"/>    <Choice value="Yellow press"/>  </Choices></View></script>          <script data-template-pk="30" type="text"><View>  <Header>Select one of two items</Header>  <Pairwise name="pw" toName="text1,text2" />  <Text name="text1" value="$text1" />  <Text name="text2" value="$text2" /></View></script>          <script data-template-pk="31" type="text"><View>  <Header value="Note: To manage relations you need Label Studio entity panel to be shown" />  <Relations>    <Relation value="Is A" />    <Relation value="Has Function" />    <Relation value="Involved In" />    <Relation value="Related To" />  </Relations>  <Labels name="label" toName="text">    <Label value="Subject" />    <Label value="Object" />  </Labels>  <Text name="text" value="$text" /></View></script>          <script data-template-pk="32" type="text"><View>  <HyperText name="video" value="$video"/>  <Choices name="type" toName="video" choice="single-radio">    <Choice value="Awesome" />    <Choice value="Groove" />  </Choices></View></script>          <script data-template-pk="3" type="text"><View style="display: flex;">  <View style="padding: 0em 1em; background: #f1f1f1; margin-right: 1em; border-radius: 3px">    <View style="position: sticky; top: 0">      <Labels name="label" toName="text">        <Label value="Person" />        <Label value="Organization" />      </Labels>    </View>  </View>  <View style="height: 300px; overflow: auto;">    <Text name="text" value="$longText" />  </View></View></script>          <script data-template-pk="14" type="text"><View>  <Text name="text" value="$text"/>  <View style="box-shadow: 2px 2px 5px #999;               padding: 20px; margin-top: 2em;               border-radius: 5px;">    <Header value="Choose text sentiment"/>    <Choices name="sentiment" toName="text"             choice="single" showInLine="true">      <Choice value="Positive"/>      <Choice value="Negative"/>      <Choice value="Neutral"/>    </Choices>  </View></View></script>          <script data-template-pk="4" type="text"><View>  <View style="padding: 0 1em; margin: 1em 0; background: #f1f1f1; position: sticky; top: 0; border-radius: 3px">    <Labels name="label" toName="text" showInline="true">      <Label value="Person" />      <Label value="Organization" />    </Labels>  </View>  <View>    <Text name="text" value="$text" />  </View></View></script>          <script data-template-pk="5" type="text"><View style="display: flex;">  <View style="padding: 0em 1em; background: #f1f1f1; margin-right: 1em; border-radius: 3px">    <View style="position: sticky; top: 0">      <Labels name="label" toName="text">        <Label value="Person" />        <Label value="Organization" />      </Labels>    </View>  </View>  <View>    <Text name="text" value="$text" />  </View></View></script>          <script data-template-pk="2" type="text"><View style="display: flex;">  <View style="width: 150px; padding: 0 1em; margin-right: 0.5em; background: #f1f1f1; border-radius: 3px">    <Labels name="label" toName="text">      <Label value="Person" />      <Label value="Organization" />    </Labels>  </View>  <View>    <Text name="text" value="$text" />  </View>  <View style="padding: 0 1em; margin-left: 0.5em; background: #f1f1f1; border-radius: 3px">    <Choices name="importance" toName="text">      <Header value="Text Importance" />      <Choice value="High" />      <Choice value="Medium" />      <Choice value="Low" />    </Choices>  </View></View></script>          <script data-template-pk="1" type="text"><View style="display: flex;">  <View style="width: 150px; padding-left: 2em; margin-right: 2em; background: #f1f1f1; border-radius: 3px">    <Labels name="label" toName="text">      <Label value="Person" />      <Label value="Organization" />    </Labels>  </View>  <View>    <Text name="text" value="$text" />  </View></View></script>          <script data-template-pk="8" type="text"><View>  <Text name="text1" value="$text1" />  <Choices name="sentiment" toName="text1" showInLine="true">    <Choice value="Positive" />    <Choice value="Negative" />    <Choice value="Neutral" />  </Choices>  <View visibleWhen="choice-selected"        whenTagName="sentiment" whenChoiceValue="Positive">    <Header value="What about this text?" />    <Text name="text2" value="$text2" />  </View>  <Choices name="sentiment2" toName="text2"     choice="single" showInLine="true"           visibleWhen="choice-selected"           whenTagName="sentiment"           whenChoiceValue="Positive">    <Choice value="Positive" />    <Choice value="Negative" />    <Choice value="Neutral" />  </Choices></View></script>          <script data-template-pk="7" type="text"><View>  <Text name="text" value="$text" />  <Choices name="sentiment" toName="text" showInLine="true">    <Choice value="Positive" />    <Choice value="Negative" />    <Choice value="Neutral" />  </Choices>  <Choices name="other-props" toName="text"     choice="single" showInLine="true"           visibleWhen="choice-selected"           whenTagName="sentiment">    <View style="width: 100%">      <Header value="Other properties of the text" />    </View>    <Choice value="Descriptive" />    <Choice value="Emotional" />  </Choices>  <Choices name="emotion" toName="text"     choice="single" showInLine="true"           visibleWhen="choice-selected"           whenTagName="other-props"           whenChoiceValue="Emotional">    <View style="width: 100%">      <Header value="What emotion?" />    </View>    <Choice value="Sadness" />    <Choice value="Disgust" />    <Choice value="Fear" />    <Choice value="Surprise" />  </Choices></View></script>          <script data-template-pk="6" type="text"><View>  <Text name="text" value="$text" />  <Choices name="sentiment" toName="text" showInLine="true">    <Choice value="Positive" />    <Choice value="Negative" />    <Choice value="Neutral" />  </Choices>  <Choices name="other-props" toName="text"     choice="single" showInLine="true"           visibleWhen="choice-selected"           whenTagName="sentiment">    <View style="width:100%">      <Header value="Other properties of the text" />    </View>    <Choice value="Descriptive" />    <Choice value="Emotional" />  </Choices></View></script>          <script data-template-pk="13" type="text"><View style="display: flex;">  <View style="width: 100%; margin-left: 1em;">    <Labels name="label" toName="audio">      <Label value="Speaker 1" />      <Label value="Speaker 2" />    </Labels>    <AudioPlus name="audio" value="$audio"/>    <View style="padding: 10px 20px; margin-top: 2em; box-shadow: 2px 2px 8px #AAA; margin-right: 1em;"          visibleWhen="region-selected">      <Header value="Provide Transcription" />      <TextArea name="transcription" toName="audio"                rows="2" editable="true" perRegion="true"                required="true" />    </View>    <View style="padding: 10px 20px; margin-top: 2em; box-shadow: 2px 2px 8px #AAA; margin-right: 1em;"          visibleWhen="region-selected">      <Header value="Select Gender" />      <Choices name="gender" toName="audio"               perRegion="true" required="true">        <Choice value="Male" />        <Choice value="Female" />      </Choices>    </View>    <View style="width: 100%; display: block">      <Header value="Select region after creation to go next"/>    </View>  </View></View></script>          <script data-template-pk="11" type="text"><View>  <Image name="image" value="$image"/>  <RectangleLabels name="label" toName="image">    <Label value="Airplane" background="green"/>    <Label value="Car" background="blue"/>  </RectangleLabels>  <View visibleWhen="region-selected">    <Header value="Describe object" />    <TextArea name="answer" toName="image" editable="true"              perRegion="true" required="true" />    <Choices name="choices" toName="image"             perRegion="true">      <Choice value="Correct"/>      <Choice value="Broken"/>    </Choices>  </View>  <View style="width: 100%; display: block">    <Header value="Select bbox after creation to go next"/>  </View></View></script>          <script data-template-pk="12" type="text"><View style="display: flex;">  <View style="width: 150px; padding-left: 2em; margin-right: 2em; background: #f1f1f1; border-radius: 3px">    <Labels name="ner" toName="text">      <Label value="Person" />      <Label value="Organization" />    </Labels>  </View>  <View>    <View style="height: 200px; overflow-y: auto">      <Text name="text" value="$text" />    </View>    <View>      <Choices name="relevance" toName="text" perRegion="true">      <Choice value="Relevant" />        <Choice value="Non Relevant" />      </Choices>      <View visibleWhen="region-selected">      <Header value="Your confidence" />      </View>      <Rating name="confidence" toName="text" perRegion="true" />    </View>    <View style="width: 100%; display: block">      <Header value="Select span after creation to go next"/>    </View>  </View></View></script>          <script data-template-pk="9" type="text"><View style="display: flex;">  <View style="width: 350px; padding-right: 1em; height: 400px; overflow-y: auto">    <Filter name="fl" toName="ner" hotkey="shift+f" minlength="1" />    <Labels name="ner" toName="text" showInline="false">      <Label value="Person" />      <Label value="Organization" />    </Labels>  </View>  <View style="height: 400px; overflow: auto">    <Text name="text" value="$text" />  </View></View></script>          <script data-template-pk="28" type="text"><View>  <!-- Image with bounding boxes -->  <View style="padding: 25px;             box-shadow: 2px 2px 8px #AAA">    <Header value="Label the image with bounding boxes"/>    <Image name="img" value="$image"/>    <Text name="text1"          value="Select label, click and drag on image"/>    <RectangleLabels name="tag" toName="img"                     canRotate="false">      <Label value="Airplane" background="red"/>      <Label value="Car" background="blue"/>    </RectangleLabels>  </View>  <!-- Audio with single choice -->  <View style="margin-top: 20px; padding: 25px;             box-shadow: 2px 2px 8px #AAA;">    <Header value="Do you like this music?"/>    <Audio name="audio" value="$url"/>    <Choices name="choices1" toName="audio"             choice="single">      <Choice alias="yes" value="Yes"/>      <Choice alias="no" value="No"/>      <Choice alias="unknown" value="Don't know"/>    </Choices>  </View>  <!-- Text with multi-choices -->  <View style="margin-top: 20px; padding: 25px;             box-shadow: 2px 2px 8px #AAA;">    <Header value="Classify the text"/>    <Text name="text2" value="$text"/>    <Choices name="choices2" toName="text2"             choice="multiple">      <Choice alias="wisdom" value="Wisdom"/>      <Choice alias="long" value="Long"/>    </Choices>  </View></View></script>          <script data-template-pk="10" type="text"><View>  <Header value="Please select everything you see on the image" />  <View style="display: flex;">    <View style="width: 49%; margin-right: 1.99%">      <Image name="img-left" value="$image1"/>      <Choices name="class-left" toName="img-left" choice="multiple">        <Choice value="People" />        <Choice value="Trees" />        <Choice value="Animals" />      </Choices>    </View>    <View style="width: 49%;">      <Image name="img-right" value="$image2"/>      <Choices name="class-right" toName="img-right" choice="multiple">        <Choice value="Food" />        <Choice value="Cars" />        <Choice value="Buildings" />      </Choices>    </View>  </View>  <View>    <Header value="Which one is clearer to you?" />    <Choices name="comparison" toName="img-left" showInline="true">      <Choice value="Left" />      <Choice value="Right" />    </Choices>  </View></View></script></empty><script>  // copy to clipboard  var copyToClipboard = function (str) {    var el = document.createElement('textarea');  // Create a <textarea> element    el.value = str;                                 // Set its value to the string that you want copied    el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof    el.style.position = 'absolute';    el.style.left = '-9999px';                      // Move outside the screen to make it invisible    document.body.appendChild(el);                  // Append the <textarea> element to the HTML document    var selected =      document.getSelection().rangeCount > 0        // Check if there is any content selected previously        ? document.getSelection().getRangeAt(0)     // Store selection if found        : false;                                    // Mark as false to know no selection existed before    el.select();                                    // Select the <textarea> content    document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)    document.body.removeChild(el);                  // Remove the <textarea> element    if (selected) {                                 // If a selection existed before copying      document.getSelection().removeAllRanges();    // Unselect everything on the HTML document      document.getSelection().addRange(selected);   // Restore the original selection    }  };  function uuidv4() {    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);      return v.toString(16);    });  }  var confirm_already_shown = true;  var edit_count = 0;  var current_template_name = 'start';  var current_template_category = 'start';  var page_hash = uuidv4();  var user_hash = Cookies.get('user_hash');  if (user_hash === "null" || !user_hash) {      user_hash = uuidv4();      Cookies.set('user_hash', user_hash);  }  var lookup = {};  $.ajax({      url: 'https://extreme-ip-lookup.com/json/',      success: function(o) { lookup = o },      async: false  });  $(function () {    function addTemplateConfig($el) {      var template_pk = $el.data('value');      var value = $('[data-template-pk="' + template_pk + '"]').html();      labelEditor.setValue(value);    }    $('.use-template').on('click', function () {      var $el = $(this);      edit_count = 0;      current_template_name = $el.text();      current_template_category = $($el.parent().parent().find('i')[0]).attr('title');      if (labelEditor.getValue() !== '' && !confirm_already_shown) {        var dialog = $('#confirm-config-template-dialog');        dialog.modal({          closable: true,          keyboardShortcuts: true,          onApprove: function () {            addTemplateConfig($el);          }        }).modal('show');        // close on enter, unfortunately keyboardShortcuts doesn't work        dialog.on('keypress', function () {          if (event.keyCode === 13) {            dialog.modal('hide');            addTemplateConfig($el);          }        });        confirm_already_shown = true;      } else {        addTemplateConfig($el);      }      return false;    });    var iframeTimer = null;    function debounce(func, wait, immediate) {      let timeout;      return function () {        const context = this, args = arguments;        const later = () => {          timeout = null;          if (!immediate) func.apply(context, args);        };        const callNow = immediate && !timeout;        clearTimeout(timeout);        timeout = setTimeout(later, wait);        if (callNow) func.apply(context, args);      };    }    var prev_completion = null;    // serialize editor output by timer    setInterval(function () {      let iframe = document.getElementById('render-editor');      if (iframe !== null) {        let Htx = iframe.contentWindow.Htx;        if (typeof Htx !== 'undefined') {          var completion = JSON.stringify(Htx.completionStore.selected.serializeCompletion(), null, 4);          if (prev_completion !== completion) {            $('#data-results').text(completion);            prev_completion = completion;          }        }      }    }, 500);    var host = "https://app.heartex.ai";    var url_string = window.location.href;    var url = new URL(url_string);    // Label code mirror    let labelEditor = CodeMirror.fromTextArea(document.getElementById('id_label_config'), {      lineNumbers: true,      mode: "text/html",    });    labelEditor.focus();    var _c = url.searchParams.get("config");    if (_c && _c.length > 0) {      var config = url.searchParams.get("config");      config = config.replace(/[<][b][r][>]/gm, "\n");      labelEditor.setValue(config);    } else {      labelEditor.setValue($('#start-template').html());    }    validate_config(labelEditor);    // refresh for proper line numbers drawing    labelEditor.refresh();    // add validation    labelEditor.on('change', debounce(function (editor) {      validate_config(editor);    }, 500));    window.labelEditor = labelEditor;    function validate_name() {      let name = $('#id_title').val();      validation_message('', 0);      return 0;    }    function validation_message(msg, status) {      let o = $('.validation');      o.text(msg);      if (status === -1) {        o.removeClass('hidden');        o.addClass('visible');      }      if (status === 0) {        o.removeClass('visible');        o.addClass('hidden');      }    }    // storage of validation results    // let is_collection_ok = false;    let is_label_ok = false;    function editor_iframe(res) {      // generate new iframe      let iframe = $('<iframe><iframe>');      iframe.className = "editor-preview";      // add iframe to wrapper div      $('#editor-wrap').html(iframe);      $('#editor-wrap').fadeIn();      iframe.on('load', function () {        // remove old iframe        $('#render-editor').hide();        $('#render-editor').remove();        // assign id to new iframe        iframe.attr('id', 'render-editor');        // force to hide undo / redo / reset buttons        $('#render-editor').contents().find('head').append('<style>.ls-panel{display:none;}</style>');        iframe.show();        let obj = document.getElementById('render-editor');        // wait until all images and resources from iframe loading        clearTimeout(iframeTimer);        iframeTimer = setInterval(function () {          if (obj.contentWindow) {            obj.style.height = (obj.contentWindow.document.body.scrollHeight) + 'px';          }        }, 500);        // hide "..."        $('#preload-editor').hide();      });      // load new data into iframe      iframe.attr('srcdoc', res);    }    function show_render_editor(editor) {      let config = labelEditor.getValue();      edit_count++;      $.ajax({        url: host + '/demo/render-editor?full_editor=t&playground=1',        method: 'POST',        xhrFields: { withCredentials: true },        data: {            config: config,            lookup: lookup,            page_hash: page_hash,            user_hash: user_hash,            current_template_name : current_template_name,            current_template_category: current_template_category,            edit_count: edit_count        },        success: editor_iframe,        error: function () {          $('#preload-editor').show();        }      })    }    // send request to server with configs to validate    function validate_config(editor) {      // get current scheme type from current editor      let url = host + '/api/projects/validate/';      let val = labelEditor.getValue();      if (!val.length)        return;      // label config validation      $.ajax({        url: url,        method: 'POST',        data: {label_config: val},        success: function (res) {          is_label_ok = true;          validation_message('', 0);          $('#render-editor').show();          show_render_editor(editor);          // check_submit_button();        },        error: function (res) {          is_label_ok = false;          validation_message(res.responseJSON['label_config'][0], -1);          $('#render-editor').hide();          // check_submit_button();        }      });      // load sample task      $.post({        url: host + '/business/projects/upload-example/',        data: {label_config: val}      })        .fail(o => {          $('#upload-data-example').text('...')        })        .done(o => {          $('#upload-data-example').text(JSON.stringify(JSON.parse(o), null, 4))        })    }    $('.share-buttons .copy').on('click', function() {       copyToClipboard(labelEditor.getValue());        $(event.target).css('color', 'green');    });    $('.share-buttons .share').on('click', function() {        let config = labelEditor.getValue();        config = encodeURIComponent(config.replace(/(\r\n|\n|\r)/gm, "<br>"));        let link = window.location.origin + window.location.pathname + '?config=' + config;        copyToClipboard(link);        $(event.target).css('color', 'green');    });  });</script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>AudioPlus</title>
      <link href="/tags/audioplus.html"/>
      <url>/tags/audioplus.html</url>
      
        <content type="html"><![CDATA[<p>AudioPlus tag plays the audio and shows its wave making it available for region tagging</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>value</td><td><code>string</code></td><td></td><td>value of the element</td></tr><tr><td>[volume]</td><td><code>boolean</code></td><td><code>true</code></td><td>show the volume slider (from 0 to 1)</td></tr><tr><td>[speed]</td><td><code>boolean</code></td><td><code>true</code></td><td>show the speed slider (from 0.5 to 3)</td></tr><tr><td>[zoom]</td><td><code>boolean</code></td><td><code>true</code></td><td>show the zoom slider</td></tr><tr><td>[hotkey]</td><td><code>string</code></td><td></td><td>hotkey used to play/pause audio</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lbl-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"audio-1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"World"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Rating</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"rate-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"audio-1"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">AudioPlus</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$audio"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>BrushLabels</title>
      <link href="/tags/brushlabels.html"/>
      <url>/tags/brushlabels.html</url>
      
        <content type="html"><![CDATA[<p>BrushLabels tag creates segmented labeling</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td>name of the image to label</td></tr><tr><td>background</td><td><code>string</code></td><td>brush fill color, e.g.: rgba(255,0,0,0.5), 0.5 is opacity</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">BrushLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"labels"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"image"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Person"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Animal"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">BrushLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Ellipse</title>
      <link href="/tags/ellipse.html"/>
      <url>/tags/ellipse.html</url>
      
        <content type="html"><![CDATA[<p>Ellipse is used to add ellipse (elleptic Bounding Box) to an image</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the image to label</td></tr><tr><td>[opacity]</td><td><code>float</code></td><td><code>0.6</code></td><td>opacity of ellipse</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td></td><td>rectangle fill color, default is transparent</td></tr><tr><td>[strokeColor]</td><td><code>string</code></td><td><code>&quot;#f48a42&quot;</code></td><td>stroke color</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of the stroke</td></tr><tr><td>[canRotate]</td><td><code>boolean</code></td><td><code>true</code></td><td>show or hide rotation handle</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Ellipse</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ellipse1-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img-1"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$img"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Choices</title>
      <link href="/tags/choices.html"/>
      <url>/tags/choices.html</url>
      
        <content type="html"><![CDATA[<p>Choices tag, create a group of choices, radio, or checkboxes. Shall be used for a single or multi-class classification.</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the group</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the element that you want to label</td></tr><tr><td>[choice]</td><td><code>single</code> | <code>single-radio</code> | <code>multiple</code></td><td><code>single</code></td><td>single or multi-class</td></tr><tr><td>[showInline]</td><td><code>boolean</code></td><td><code>false</code></td><td>show items in the same visual line</td></tr><tr><td>[required]</td><td><code>boolean</code></td><td><code>false</code></td><td>validation if choice has been selected</td></tr><tr><td>[requiredMessage]</td><td><code>string</code></td><td></td><td>message to show if validation fails</td></tr><tr><td>[visibleWhen]</td><td><code>region-selected</code> | <code>choice-selected</code> | <code>no-region-selected</code></td><td></td><td>show the choices when condition is true</td></tr><tr><td>[whenTagName]</td><td><code>string</code></td><td></td><td>narrow down visibility by name of the tag, for regions use the name of the labels tag, for choices use the name of the choices tag</td></tr><tr><td>[whenLabelValue]</td><td><code>string</code></td><td></td><td>narrow down visibility by label value</td></tr><tr><td>[whenChoiceValue]</td><td><code>string</code></td><td></td><td>narrow down visibility by choice value</td></tr><tr><td>[perRegion]</td><td><code>boolean</code></td><td><code>false</code></td><td>use this tag for region labeling instead of the whole object labeling</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"single-radio"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"M"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Male"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"F"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Female"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"John went to see Marry"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Choice</title>
      <link href="/tags/choice.html"/>
      <url>/tags/choice.html</url>
      
        <content type="html"><![CDATA[<p>Choice tag represents a single choice</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>string</code></td><td>choice value</td></tr><tr><td>[selected]</td><td><code>boolean</code></td><td>if this label should be preselected</td></tr><tr><td>[alias]</td><td><code>string</code></td><td>alias for the label</td></tr><tr><td>[style]</td><td><code>style</code></td><td>css style of the checkbox element</td></tr><tr><td>[hotkey]</td><td><code>string</code></td><td>hotkey</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"single"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Male"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Female"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"John went to see Marry"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>EllipseLabels</title>
      <link href="/tags/ellipselabels.html"/>
      <url>/tags/ellipselabels.html</url>
      
        <content type="html"><![CDATA[<p>EllipseLabels tag creates labeled ellipses. Used to create an ellipse on the image </p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the image to label</td></tr><tr><td>[opacity]</td><td><code>float</code></td><td><code>0.6</code></td><td>opacity of rectangle</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td></td><td>ellipse fill color, default is transparent</td></tr><tr><td>[strokeColor]</td><td><code>string</code></td><td></td><td>stroke color</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of stroke</td></tr><tr><td>[canRotate]</td><td><code>boolean</code></td><td><code>true</code></td><td>show or hide rotation handle</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">EllipseLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"labels"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"image"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Person"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Animal"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">EllipseLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Filter</title>
      <link href="/tags/filter.html"/>
      <url>/tags/filter.html</url>
      
        <content type="html"><![CDATA[<p>Filter tag, show filter input to seek through classes</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the filter</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the labels/choices element it connects to</td></tr><tr><td>[casesensetive]</td><td><code>boolean</code></td><td><code>false</code></td><td>case sensetive or insensetive match</td></tr><tr><td>[cleanup]</td><td><code>boolean</code></td><td><code>true</code></td><td>remove the search if you click Enter</td></tr><tr><td>[placeholder]</td><td><code>string</code></td><td></td><td>placeholder for the empty filter</td></tr><tr><td>[minlength]</td><td><code>number</code></td><td><code>3</code></td><td>length of string after which to initiate the search</td></tr><tr><td>[hotkey]</td><td><code>string</code></td><td></td><td>hotkey that activate the search</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs js">&lt;View&gt;  &lt;Filter name="text-1" toName="labels" /&gt;  &lt;Labels name="labels" toName="text"&gt;    &lt;Label value="Hello" /&gt;    &lt;Label value="World" /&gt;  &lt;/Labels&gt;  &lt;Text name="text" value="$text" /&gt;&lt;/View&gt;</code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>HyperText</title>
      <link href="/tags/hypertext.html"/>
      <url>/tags/hypertext.html</url>
      
        <content type="html"><![CDATA[<p>HyperText tag shows an HyperText markup that can be labeled</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>value</td><td><code>string</code></td><td></td><td>value of the element</td></tr><tr><td>[showLabels]</td><td><code>boolean</code></td><td><code>false</code></td><td>show labels next to the region</td></tr><tr><td>[encoding]</td><td><code>string</code></td><td><code>&quot;string</code></td><td>base64&quot;</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">HyperText</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span> /&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Header</title>
      <link href="/tags/header.html"/>
      <url>/tags/header.html</url>
      
        <content type="html"><![CDATA[<p>Header tag, show header</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>string</code></td><td></td><td>text of header</td></tr><tr><td>[size]</td><td><code>number</code></td><td><code>4</code></td><td>size of header</td></tr><tr><td>[style]</td><td><code>string</code></td><td></td><td>css style string</td></tr><tr><td>[underline]</td><td><code>boolean</code></td><td><code>false</code></td><td>underline of header</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span> /&gt;</span></code></pre><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Please select the class"</span> /&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>HyperTextLabels</title>
      <link href="/tags/hypertextlabels.html"/>
      <url>/tags/hypertextlabels.html</url>
      
        <content type="html"><![CDATA[<p>HyperTextLabels tag creates labeled hyper text (HTML)</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td>name of the html element to label</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">HyperTextLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"labels"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"ht"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Face"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Nose"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">HyperTextLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">HyperText</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ht"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$html"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Image</title>
      <link href="/tags/image.html"/>
      <url>/tags/image.html</url>
      
        <content type="html"><![CDATA[<p>Image tag shows an image on the page</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>value</td><td><code>string</code></td><td></td><td>value</td></tr><tr><td>[width]</td><td><code>string</code></td><td><code>&quot;100%&quot;</code></td><td>image width</td></tr><tr><td>[maxWidth]</td><td><code>string</code></td><td><code>&quot;750px&quot;</code></td><td>image maximum width</td></tr><tr><td>[zoom]</td><td><code>boolean</code></td><td><code>false</code></td><td>enable zooming an image by the mouse wheel</td></tr><tr><td>[negativeZoom]</td><td><code>boolean</code></td><td><code>false</code></td><td>enable zooming out an image</td></tr><tr><td>[zoomBy]</td><td><code>float</code></td><td><code>1.1</code></td><td>scale factor</td></tr><tr><td>[grid]</td><td><code>boolean</code></td><td><code>false</code></td><td>show grid</td></tr><tr><td>[gridSize]</td><td><code>number</code></td><td><code>30</code></td><td>size of the grid</td></tr><tr><td>[gridColor]</td><td><code>string</code></td><td><code>&quot;&amp;quot;#EEEEF4&amp;quot;&quot;</code></td><td>color of the grid, opacity is 0.15</td></tr><tr><td>[zoomControl]</td><td><code>boolean</code></td><td><code>false</code></td><td>show zoom controls in toolbar</td></tr><tr><td>[brightnessControl]</td><td><code>boolean</code></td><td><code>false</code></td><td>show brightness control in toolbar</td></tr><tr><td>[contrastControl]</td><td><code>boolean</code></td><td><code>false</code></td><td>show contrast control in toolbar</td></tr><tr><td>[rotateControl]</td><td><code>boolean</code></td><td><code>false</code></td><td>show rotate control in toolbar</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-comment">&lt;!-- Take the image url from the url column in HTML/CSV --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"https://imgflip.com/s/meme/Leonardo-Dicaprio-Cheers.jpg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100%"</span> <span class="hljs-attr">maxWidth</span>=<span class="hljs-string">"750px"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<p>Editor configuration is based on XML-like tags. Tags can be divided into three categories:</p><ul><li>Visual tags used for visual only elements<br>(non-interactive), examples: <strong>View</strong>, <strong>Header</strong>. </li><li>Control tags used to label the objects, examples: <strong>Labels</strong>, <strong>Choices</strong>, <strong>Rating</strong>, <strong>TextArea</strong>. </li><li>Object tags used to show elements that can be labeled: <strong>Image</strong>, <strong>Text</strong>, <strong>Audio</strong>, <strong>AudioPlus</strong>.</li></ul><h2 id="Connecting-elements"><a href="#Connecting-elements" class="headerlink" title="Connecting elements"></a>Connecting elements</h2><p>The <strong>name</strong> attribute is mandatory for all control and object tags. Also, each control tag should have <strong>toName</strong> attribute that should match the <strong>name</strong> parameter in the object element. For example:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lbl"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Label 1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Label 2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><p>Note that in the case above, Label tags are used to label Text tag. There could be multiple control, and object tags in the same configuration, and names are used to connect them.</p><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>All object tags and some control and visual tags support variables inside their parameters. A variable shall be placed inside <code>value</code> property of the tag and start with a <code>$</code> sign. The idea is you configure Label Studio once and then provide different data objects for it to load. Here is an example config:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$header"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><p>And the example data you need to load into the studio looks like this:</p><pre><code class="hljs js">&#123; <span class="hljs-string">"header"</span>: <span class="hljs-string">"This is a header"</span>, <span class="hljs-string">"value"</span>: <span class="hljs-string">"This is the text"</span> &#125;</code></pre><h2 id="Styles"><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h2><p>Since <code>View</code> tag supports CSS styles, you can thoroughly configure the visual representation. Here is an example of a two-column labeling interface with multiple control and object elements:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: flex;"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"flex: 50%"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Choose:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chc"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Choice 1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Choice 2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"flex: 50%; margin-left: 1em"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Enter your question and rate text:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Rating</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"rating"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Rating</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">TextArea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"question"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextArea</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>KeyPoint</title>
      <link href="/tags/keypoint.html"/>
      <url>/tags/keypoint.html</url>
      
        <content type="html"><![CDATA[<p>KeyPoint is used to add a keypoint to an image</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the image to label</td></tr><tr><td>[opacity]</td><td><code>float</code></td><td><code>0.9</code></td><td>opacity of keypoint</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td><code>&quot;#8bad00&quot;</code></td><td>keypoint fill color</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of the stroke</td></tr><tr><td>[stokeColor]</td><td><code>string</code></td><td><code>&quot;#8bad00&quot;</code></td><td>keypoint stroke color</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">KeyPoint</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"kp-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img-1"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$img"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>KeypointLabels</title>
      <link href="/tags/keypointlabels.html"/>
      <url>/tags/keypointlabels.html</url>
      
        <content type="html"><![CDATA[<p>KeyPointLabels tag creates labeled keypoints</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the image to label</td></tr><tr><td>[opacity]</td><td><code>float</code></td><td><code>0.9</code></td><td>opacity of keypoint</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td></td><td>keypoint fill color, default is transparent</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of the stroke</td></tr><tr><td>[stokeColor]</td><td><code>string</code></td><td><code>&quot;#8bad00&quot;</code></td><td>keypoint stroke color</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">KeyPointLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"kp-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img-1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Face"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Nose"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">KeyPointLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$img"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Labels</title>
      <link href="/tags/labels.html"/>
      <url>/tags/labels.html</url>
      
        <content type="html"><![CDATA[<p>Labels tag, create a group of labels. Label piece of text for NER.</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the element that you want to label</td></tr><tr><td>[choice]</td><td><code>single</code> | <code>multiple</code></td><td><code>single</code></td><td>configure if you can select just one or multiple labels</td></tr><tr><td>[showInline]</td><td><code>boolean</code></td><td><code>true</code></td><td>show items in the same visual line</td></tr><tr><td>[required]</td><td><code>boolean</code></td><td><code>false</code></td><td>validation if choice has been selected</td></tr><tr><td>[requiredMessage]</td><td><code>string</code></td><td></td><td>message to show if validation fails</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"type"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"B"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Brand"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"P"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Product"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Label</title>
      <link href="/tags/label.html"/>
      <url>/tags/label.html</url>
      
        <content type="html"><![CDATA[<p>Label tag represents a single label</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>string</code></td><td></td><td>value of the label</td></tr><tr><td>[selected]</td><td><code>boolean</code></td><td><code>false</code></td><td>if this label should be preselected</td></tr><tr><td>[hotkey]</td><td><code>string</code></td><td></td><td>hotkey, if not specified then will be automatically generated</td></tr><tr><td>[alias]</td><td><code>string</code></td><td></td><td>label alias</td></tr><tr><td>[showAlias]</td><td><code>boolean</code></td><td><code>false</code></td><td>show alias inside label text</td></tr><tr><td>[aliasStyle]</td><td><code>string</code></td><td><code>&quot;opacity:0.6&quot;</code></td><td>alias CSS style</td></tr><tr><td>[size]</td><td><code>string</code></td><td><code>&quot;medium&quot;</code></td><td>size of text in the label</td></tr><tr><td>[background]</td><td><code>string</code></td><td></td><td>background color of an active label</td></tr><tr><td>[selectedColor]</td><td><code>string</code></td><td></td><td>color of text in an active label</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"type"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"B"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Brand"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"P"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Product"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tags/list.html"/>
      <url>/tags/list.html</url>
      
        <content type="html"><![CDATA[<p>List element, used for ranking results. Great choice for recomendation systems.</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>elementValue</td><td><code>string</code></td><td>lookup key for child object</td></tr><tr><td>elementTag</td><td><a href="#Text"><code>Text</code></a> | <a href="#Image"><code>Image</code></a> | <a href="#Audio"><code>Audio</code></a></td><td>element used to render children</td></tr><tr><td>value</td><td><code>string</code></td><td>list value</td></tr><tr><td>name</td><td><code>string</code></td><td>of group</td></tr><tr><td>[sortedHighlightColor]</td><td><code>string</code></td><td>color</td></tr><tr><td>[axis]</td><td><code>string</code></td><td>axis used for drag-n-drop</td></tr><tr><td>[lockAxis]</td><td><code>string</code></td><td>lock axis</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">HyperText</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$markup"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HyperText</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ranker"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$replies"</span> <span class="hljs-attr">elementValue</span>=<span class="hljs-string">"$text"</span> <span class="hljs-attr">elementTag</span>=<span class="hljs-string">"Text"</span> <span class="hljs-attr">ranked</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">sortedHighlightColor</span>=<span class="hljs-string">"#fcfff5"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">List</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Pairwise</title>
      <link href="/tags/pairwise.html"/>
      <url>/tags/pairwise.html</url>
      
        <content type="html"><![CDATA[<p>Pairwise element. Compare two different objects, works with any label studio object</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td>names of the elements you want to compare</td></tr><tr><td>[selectionStyle]</td><td><code>string</code></td><td>style of the selection</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Pairwise</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pairwise"</span> <span class="hljs-attr">leftClass</span>=<span class="hljs-string">"text1"</span> <span class="hljs-attr">rightClass</span>=<span class="hljs-string">"text2"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1,txt-2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Pairwise</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Text 1"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Text 2"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html">You can also style the appearence using the View tag:<span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Pairwise</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pw"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1,txt-2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Pairwise</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: flex;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 1em;"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text1"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text2"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Polygon</title>
      <link href="/tags/polygon.html"/>
      <url>/tags/polygon.html</url>
      
        <content type="html"><![CDATA[<p>Polygon is used to add polygons to an image. Just start to click on the image. </p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of tag</td></tr><tr><td>toname</td><td><code>string</code></td><td></td><td>name of image to label</td></tr><tr><td>[opacity]</td><td><code>number</code></td><td><code>0.6</code></td><td>opacity of polygon</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td></td><td>rectangle fill color, default is transparent</td></tr><tr><td>[strokeColor]</td><td><code>string</code></td><td></td><td>stroke color</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of stroke</td></tr><tr><td>[pointSize]</td><td><code>small</code> | <code>medium</code> | <code>large</code></td><td><code>medium</code></td><td>size of polygon handle points</td></tr><tr><td>[pointStyle]</td><td><code>rectangle</code> | <code>circle</code></td><td><code>circle</code></td><td>style of points</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Polygon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"rect-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img-1"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$img"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>PolygonLabels</title>
      <link href="/tags/polygonlabels.html"/>
      <url>/tags/polygonlabels.html</url>
      
        <content type="html"><![CDATA[<p>PolygonLabels tag, create labeled polygons</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of tag</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of image to label</td></tr><tr><td>[opacity]</td><td><code>number</code></td><td><code>0.6</code></td><td>opacity of polygon</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td></td><td>rectangle fill color, default is transparent</td></tr><tr><td>[strokeColor]</td><td><code>string</code></td><td></td><td>stroke color</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of stroke</td></tr><tr><td>[pointSize]</td><td><code>small</code> | <code>medium</code> | <code>large</code></td><td><code>medium</code></td><td>size of polygon handle points</td></tr><tr><td>[pointStyle]</td><td><code>rectangle</code> | <code>circle</code></td><td><code>rectangle</code></td><td>style of points</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">PolygonLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lables"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"image"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Car"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Sign"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">PolygonLabels</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tags/ranker.html"/>
      <url>/tags/ranker.html</url>
      
        <content type="html"><![CDATA[<p>Ranker tag, used to ranking models</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>of group</td></tr><tr><td>[axis]</td><td><code>y</code> | <code>x</code></td><td><code>y</code></td><td>axis direction</td></tr><tr><td>sortedHighlightColor</td><td><code>string</code></td><td></td><td>sorted color</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Ranker</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ranker"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$items"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Ranker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Rectangle</title>
      <link href="/tags/rectangle.html"/>
      <url>/tags/rectangle.html</url>
      
        <content type="html"><![CDATA[<p>Rectangle is used to add rectangle (Bounding Box) to an image</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the image to label</td></tr><tr><td>[opacity]</td><td><code>float</code></td><td><code>0.6</code></td><td>opacity of rectangle</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td></td><td>rectangle fill color, default is transparent</td></tr><tr><td>[strokeColor]</td><td><code>string</code></td><td><code>&quot;#f48a42&quot;</code></td><td>stroke color</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of the stroke</td></tr><tr><td>[canRotate]</td><td><code>boolean</code></td><td><code>true</code></td><td>show or hide rotation handle</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Rectangle</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"rect-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img-1"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$img"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Rating</title>
      <link href="/tags/rating.html"/>
      <url>/tags/rating.html</url>
      
        <content type="html"><![CDATA[<p>Rating adds rating selection</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>Name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>Name of the element that you want to label</td></tr><tr><td>[maxRating]</td><td><code>number</code></td><td><code>5</code></td><td>Maximum rating value</td></tr><tr><td>[defaultValue]</td><td><code>number</code></td><td><code>0</code></td><td>Default rating value</td></tr><tr><td>[size]</td><td><code>string</code></td><td><code>&quot;medium&quot;</code></td><td>One of: small, medium, large</td></tr><tr><td>[icon]</td><td><code>string</code></td><td><code>&quot;start&quot;</code></td><td>One of: star, heart, fire, smile</td></tr><tr><td>hotkey</td><td><code>string</code></td><td></td><td>HotKey for changing rating value</td></tr><tr><td>[required]</td><td><code>boolean</code></td><td><code>false</code></td><td>validation if rating is required</td></tr><tr><td>[requiredMessage]</td><td><code>string</code></td><td></td><td>message to show if validation fails</td></tr><tr><td>[perRegion]</td><td><code>boolean</code></td><td></td><td>use this tag for region labeling instead of the whole object labeling</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Rating</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"rating"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt"</span> <span class="hljs-attr">maxRating</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">"star"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"medium"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>RectangleLabels</title>
      <link href="/tags/rectanglelabels.html"/>
      <url>/tags/rectanglelabels.html</url>
      
        <content type="html"><![CDATA[<p>RectangleLabels tag creates labeled rectangles on the image</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the image to label</td></tr><tr><td>[opacity]</td><td><code>float</code></td><td><code>0.6</code></td><td>opacity of rectangle</td></tr><tr><td>[fillColor]</td><td><code>string</code></td><td></td><td>rectangle fill color, default is transparent</td></tr><tr><td>[strokeColor]</td><td><code>string</code></td><td></td><td>stroke color</td></tr><tr><td>[strokeWidth]</td><td><code>number</code></td><td><code>1</code></td><td>width of stroke</td></tr><tr><td>[canRotate]</td><td><code>boolean</code></td><td><code>true</code></td><td>show or hide rotation handle</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">RectangleLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"labels"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"image"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Person"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Animal"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">RectangleLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Shortcut</title>
      <link href="/tags/shortcut.html"/>
      <url>/tags/shortcut.html</url>
      
        <content type="html"><![CDATA[<p>Shortcut helps you predefine label objects that you can add in one click. Right now Shortcuts are supported only for the TextArea tag.</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>string</code></td><td>A value of the shortcut</td></tr><tr><td>[alias]</td><td><code>string</code></td><td>Shortcut alias</td></tr><tr><td>[hotkey]</td><td><code>string</code></td><td>Hotkey</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">TextArea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Shortcut</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"Silence"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"&lt;SILENCE&gt;"</span> <span class="hljs-attr">hotkey</span>=<span class="hljs-string">"ctrl+1"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">TextArea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Relation</title>
      <link href="/tags/relation.html"/>
      <url>/tags/relation.html</url>
      
        <content type="html"><![CDATA[<p>Relation tag represents a single relation label</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>string</code></td><td>value of the relation</td></tr><tr><td>[background]</td><td><code>string</code></td><td>background color of active label</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Relations</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Name 1"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Name 2"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Relations</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Relations</title>
      <link href="/tags/relations.html"/>
      <url>/tags/relations.html</url>
      
        <content type="html"><![CDATA[<p>Relations tag, create relations labels<br><br><img src="/images/screens/relations.png"></p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[choice]</td><td><code>single</code></td><td><code>multiple</code></td><td><code>single</code></td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Relations</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"friends"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Relation</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"enemies"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Relations</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lbl-1"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Opossum"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Raccoon"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Style</title>
      <link href="/tags/style.html"/>
      <url>/tags/style.html</url>
      
        <content type="html"><![CDATA[<p>Style tag, add css styles right through the config</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs js">&lt;View&gt;  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Style</span>&gt;</span> .cls-name &#123; background: red; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Style</span>&gt;</span></span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"cls-name"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Header"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Table</title>
      <link href="/tags/table.html"/>
      <url>/tags/table.html</url>
      
        <content type="html"><![CDATA[<p>Table tag, show object keys and values in a table</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><ul><li><code>value</code> <strong>[string]</strong> </li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Text</title>
      <link href="/tags/text.html"/>
      <url>/tags/text.html</url>
      
        <content type="html"><![CDATA[<p>Text tag shows an Text markup that can be labeled</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>value</td><td><code>string</code></td><td></td><td>value of the element</td></tr><tr><td>[selectionEnabled]</td><td><code>boolean</code></td><td><code>true</code></td><td>enable or disable selection</td></tr><tr><td>[highlightColor]</td><td><code>string</code></td><td></td><td>hex string with highlight color, if not provided uses the labels color</td></tr><tr><td>[granularity]</td><td><code>symbol</code> | <code>word</code></td><td><code>symbol</code></td><td>control per symbol or word selection</td></tr><tr><td>[showLabels]</td><td><code>boolean</code></td><td><code>true</code></td><td>show labels next to the region</td></tr><tr><td>[encoding]</td><td><code>string</code></td><td><code>&quot;string</code></td><td>base64&quot;</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span> <span class="hljs-attr">granularity</span>=<span class="hljs-string">"symbol"</span> <span class="hljs-attr">highlightColor</span>=<span class="hljs-string">"#ff0000"</span> /&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>TextArea</title>
      <link href="/tags/textarea.html"/>
      <url>/tags/textarea.html</url>
      
        <content type="html"><![CDATA[<p>TextArea tag shows the textarea for user input</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td></td><td>name of the element</td></tr><tr><td>toName</td><td><code>string</code></td><td></td><td>name of the element that you want to label if any</td></tr><tr><td>[label]</td><td><code>string</code></td><td></td><td>label text</td></tr><tr><td>[placeholder]</td><td><code>string</code></td><td></td><td>placeholder text</td></tr><tr><td>[maxSubmissions]</td><td><code>string</code></td><td></td><td>maximum number of submissions</td></tr><tr><td>[editable]</td><td><code>boolean</code></td><td><code>false</code></td><td>editable textarea results</td></tr><tr><td>[rows]</td><td><code>number</code></td><td></td><td>number of rows in the textarea</td></tr><tr><td>[required]</td><td><code>boolean</code></td><td><code>false</code></td><td>validation if textarea is required</td></tr><tr><td>[requiredMessage]</td><td><code>string</code></td><td></td><td>message to show if validation fails</td></tr><tr><td>[showSubmitButton]</td><td><code>boolean</code></td><td></td><td>show submit button or hide it, it’s shown by default when rows value is larger than one (i.e. textarea mode)</td></tr><tr><td>[perRegion]</td><td><code>boolean</code></td><td></td><td>use this tag for region labeling instead of the whole object labeling</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">TextArea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ta"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextArea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>View</title>
      <link href="/tags/view.html"/>
      <url>/tags/view.html</url>
      
        <content type="html"><![CDATA[<p>View element. It’s analogous to div element in html and can be used to visual configure display of blocks</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>display</td><td><code>block</code> | <code>inline</code></td><td></td></tr><tr><td>[style]</td><td><code>string</code></td><td>css style string</td></tr><tr><td>[className]</td><td><code>string</code></td><td>class name of the css style to apply</td></tr><tr><td>[visibleWhen]</td><td><code>region-selected</code> | <code>choice-selected</code> | <code>no-region-selected</code></td><td>show the contents of a view when condition is true</td></tr><tr><td>[whenTagName]</td><td><code>string</code></td><td>narrow down visibility by name of the tag, for regions use the name of the object tag, for choices use the name of the choices tag</td></tr><tr><td>[whenLabelValue]</td><td><code>string</code></td><td>narrow down visibility by label value</td></tr><tr><td>[whenChoiceValue]</td><td><code>string</code></td><td>narrow down visibility by choice value</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: flex;"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"flex: 50%"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Facts:"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$fact"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"flex: 50%; margin-left: 1em"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Enter your question:"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">TextArea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"question"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Audio Classification</title>
      <link href="/templates/audio_classification.html"/>
      <url>/templates/audio_classification.html</url>
      
        <content type="html"><![CDATA[<p>Listen to the audio file and classify</p><img src="/images/screens/audio_classification.png" class="img-template-example" title="Audio Classification"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">python server.py -c config.json -l ../examples/audio_classification/config.xml -i ../examples/audio_classification/tasks.json -o output_audio_classes</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Listen to the audio:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Audio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Audio</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Select its topic:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"label"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"single-radio"</span> <span class="hljs-attr">showInline</span>=<span class="hljs-string">"true"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Politics"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Business"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Education"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Other"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Audio Regions</title>
      <link href="/templates/audio_regions.html"/>
      <url>/templates/audio_regions.html</url>
      
        <content type="html"><![CDATA[<p>Listen to the audio file and classify</p><img src="/images/screens/audio_regions.png" class="img-template-example" title="Audio Regions"><p class="tip">For audio regions to work when you have remote URLs, you need to configure CORS to be wide-open</p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=audio_regions audio_regions_projectlabel-studio start audio_regions_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Select its topic:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"label"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"multiple"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Politics"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"yellow"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Business"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"red"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Education"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"blue"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Other"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Listen to the audio:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">AudioPlus</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">AudioPlus</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Image Object Detection</title>
      <link href="/templates/image_bbox.html"/>
      <url>/templates/image_bbox.html</url>
      
        <content type="html"><![CDATA[<p>Image bounding box labeling</p><img src="/images/screens/image_bbox.png" class="img-template-example" title="Images Bbounding box"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=image_bbox image_bbox_projectlabel-studio start image_bbox_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">RectangleLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Planet"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Moonwalker"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"blue"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">RectangleLabels</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Dialogue Analysis</title>
      <link href="/templates/dialogue_analysis.html"/>
      <url>/templates/dialogue_analysis.html</url>
      
        <content type="html"><![CDATA[<p>Analyze the chat dialog, classify it and provide your own answer</p><img src="/images/screens/dialogue_analysis.png" class="img-template-example" title="Dialogue Analysis"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=dialogue_analysis dialogue_analysis_projectlabel-studio start dialogue_analysis_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">HyperText</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dialog"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$dialogs"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HyperText</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Rate last answer:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chc-1"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"single-radio"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"dialog"</span> <span class="hljs-attr">showInline</span>=<span class="hljs-string">"true"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Bad answer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Neutral answer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Good answer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Your answer:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">TextArea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"answer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextArea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>HTML Documents NER</title>
      <link href="/templates/html_document.html"/>
      <url>/templates/html_document.html</url>
      
        <content type="html"><![CDATA[<p>Named entity for the HTML Documents</p><img src="/images/screens/html_document.png" class="img-template-example" title="HTML Documents"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=html_document html_document_projectlabel-studio start html_document_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ner"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"text"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Person"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Organization"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">HyperText</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HyperText</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Image Classification</title>
      <link href="/templates/image_classification.html"/>
      <url>/templates/image_classification.html</url>
      
        <content type="html"><![CDATA[<p>Image classification with checkboxes.</p><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"single-radio"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Airbus"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Boeing"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"blue"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Image Ellipse</title>
      <link href="/templates/image_ellipse.html"/>
      <url>/templates/image_ellipse.html</url>
      
        <content type="html"><![CDATA[<p>Put ellipses on the image</p><img src="/images/screens/image_ellipse.png" class="img-template-example" title="Images Ellipse"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init image_ellipse_projectlabel-studio start image_ellipse_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">EllipseLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Blood Cell"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Stem Cell"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">EllipseLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Image Polygons</title>
      <link href="/templates/image_polygons.html"/>
      <url>/templates/image_polygons.html</url>
      
        <content type="html"><![CDATA[<p>Image polygons labeling</p><img src="/images/screens/image_polygons.png" class="img-template-example" title="Images Polygons"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=image_polygons image_polygons_projectlabel-studio start image_polygons_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: flex"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Pick label"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">PolygonLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">strokewidth</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">pointstyle</span>=<span class="hljs-string">"circle"</span> <span class="hljs-attr">pointsize</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">showInline</span>=<span class="hljs-string">"false"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Car"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"blue"</span> /&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Sign"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"blue"</span> /&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Person"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"blue"</span> /&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Tree"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"green"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">PolygonLabels</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> <span class="hljs-attr">showMousePos</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">zoom</span>=<span class="hljs-string">"true"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction</title>
      <link href="/templates/index.html"/>
      <url>/templates/index.html</url>
      
        <content type="html"><![CDATA[<p>Templates are ready-made Label Studio configs that you can use in one click. Use Templates out-of-the-box, or as a starting point for fully custom labeling UI. Use menu on the left to check them all out!</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Image Key Points</title>
      <link href="/templates/image_keypoints.html"/>
      <url>/templates/image_keypoints.html</url>
      
        <content type="html"><![CDATA[<p>Key Points labeling for the images</p><img src="/images/screens/image_keypoints.png" class="img-template-example" title="Images Key Points"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=image_keypoints image_keypoints_projectlabel-studio start image_keypoints_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">KeyPointLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">strokewidth</span>=<span class="hljs-string">"5"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Ear"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"blue"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Lip"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"red"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">KeyPointLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> <span class="hljs-attr">zoom</span>=<span class="hljs-string">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Image Segmentation</title>
      <link href="/templates/image_segmentation.html"/>
      <url>/templates/image_segmentation.html</url>
      
        <content type="html"><![CDATA[<p>Image segmentation using a brush and producing a mask</p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init image_segmentation_projectlabel-studio start image_segmentation_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">BrushLabels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"img"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Planet"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Moonwalker"</span> <span class="hljs-attr">background</span>=<span class="hljs-string">"rgba(255,0,0,0.5)"</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">BrushLabels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image"</span> <span class="hljs-attr">zoom</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">zoomControl</span>=<span class="hljs-string">"true"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Pairwise Comparison</title>
      <link href="/templates/pairwise_comparison.html"/>
      <url>/templates/pairwise_comparison.html</url>
      
        <content type="html"><![CDATA[<p>Pairwise comparison of different objects</p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=pairwise pairwise_projectlabel-studio start pairwise_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Pairwise</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pw"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"txt-1,txt-2"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text1"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"txt-2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text2"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Text Named Entity Recognition</title>
      <link href="/templates/named_entity.html"/>
      <url>/templates/named_entity.html</url>
      
        <content type="html"><![CDATA[<p>Named entity recognition for a piece of text. It supports overlapping spans and works with huge documents.</p><img src="/images/screens/named_entity.png" class="img-template-example" title="Named Entity Recognition"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=named_entity named_entity_projectlabel-studio start named_entity_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ner"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"text"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Person"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Organization"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Fact"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Money"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Date"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Time"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Ordinal"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Percent"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Product"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Language"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Location"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h2 id="Put-labels-on-the-left"><a href="#Put-labels-on-the-left" class="headerlink" title="Put labels on the left"></a>Put labels on the left</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: flex;"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 250px; margin-right: 1em; padding: 1em; background: #343c7f;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Labels</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ner"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">showInline</span>=<span class="hljs-string">"false"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Person"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Organization"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Fact"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Money"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Date"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Time"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Ordinal"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Percent"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Product"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Language"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Location"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">Labels</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Text Sentiment Analysis</title>
      <link href="/templates/sentiment_analysis.html"/>
      <url>/templates/sentiment_analysis.html</url>
      
        <content type="html"><![CDATA[<p>Classify sentiment of reviews for musical instruments found on Amazon</p><img src="/images/screens/text_classification.png" class="img-template-example" title="Sentiment Analysis"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=text_sentiment sentiment_analysis_projectlabel-studio start sentiment_analysis_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Choose text sentiment:"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"my_text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$reviewText"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sentiment"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"my_text"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"single"</span> <span class="hljs-attr">showInLine</span>=<span class="hljs-string">"true"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Positive"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Negative"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Neutral"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Audio Transcription</title>
      <link href="/templates/transcribe_audio.html"/>
      <url>/templates/transcribe_audio.html</url>
      
        <content type="html"><![CDATA[<p>Listen to an audio file and transcribe its content in natural language</p><img src="/images/screens/audio_transcription.png" class="img-template-example" title="Transcribe an Audio"><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre><code class="hljs bash">label-studio init --template=transcribe_audio transcribe_audio_projectlabel-studio start transcribe_audio_project</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Listen to the audio:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Audio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"audio"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Audio</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Write the transcription:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">TextArea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"answer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextArea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tutorials/dummy_model.html"/>
      <url>/tutorials/dummy_model.html</url>
      
        <content type="html"><![CDATA[<h2 id="Create-the-simplest-Machine-Learning-backend"><a href="#Create-the-simplest-Machine-Learning-backend" class="headerlink" title="Create the simplest Machine Learning backend"></a>Create the simplest Machine Learning backend</h2><p>It explains the basics of Machine Learning (ML) backend usage within Label Studio. For the sake of simplicity, a <em>dummy model</em> is served and actually does nothing but produces the random predictions.<br>It is compatible with any classication task, i.e. where <code>&lt;Choices&gt;</code> tag is used.</p><h3 id="Create-dummy-model-script"><a href="#Create-dummy-model-script" class="headerlink" title="Create dummy model script"></a>Create dummy model script</h3><p>If you create ML backend by using Label Studio’s ML SDK, you have to follow the rules:</p><ul><li>created model class should be inherited from <code>label_studio.ml.LabelStudioMLBase</code></li><li>2 methods should be overrided:<ul><li><code>predict()</code> takes <a href="/guide/tasks.html#Basic-format">input tasks</a> and outputs <a href="/guide/export.html#predictions">predictions</a> in a Label Studio format</li><li><code>train()</code> receives <a href="/guide/export.html#Basic-format">completions</a> iterable and returns dictionary with created links and resources. This dictionary will be later used for model loading via <code>self.train_output</code> field.</li></ul></li></ul><p>Create a file <code>model.py</code> with the following content:</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<span class="hljs-keyword">from</span> label_studio.ml <span class="hljs-keyword">import</span> LabelStudioMLBase<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DummyModel</span><span class="hljs-params">(LabelStudioMLBase)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, **kwargs)</span>:</span>        <span class="hljs-comment"># don't forget to call base class constructor</span>        super(DummyModel, self).__init__(**kwargs)            <span class="hljs-comment"># you can preinitialize variables with keys needed to extract info from tasks and completions and form predictions</span>        from_name, schema = list(self.parsed_label_config.items())[<span class="hljs-number">0</span>]        self.from_name = from_name        self.to_name = schema[<span class="hljs-string">'to_name'</span>][<span class="hljs-number">0</span>]        self.labels = schema[<span class="hljs-string">'labels'</span>]        self.model_score = self.train_output[<span class="hljs-string">'score'</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span><span class="hljs-params">(self, tasks, **kwargs)</span>:</span>        <span class="hljs-string">"""This is where inference happens: model returns the list of predictions based on input list of tasks"""</span>        results = []        <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:            results.append(&#123;                <span class="hljs-string">'result'</span>: [&#123;                    <span class="hljs-string">'from_name'</span>: self.from_name,                    <span class="hljs-string">'to_name'</span>: self.to_name,                    <span class="hljs-string">'type'</span>: <span class="hljs-string">'choices'</span>,                    <span class="hljs-string">'value'</span>: &#123;                        <span class="hljs-string">'choices'</span>: [random.choice(self.labels)]                    &#125;                &#125;],                <span class="hljs-string">'score'</span>: self.model_score            &#125;)        <span class="hljs-keyword">return</span> results    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(self, completions, **kwargs)</span>:</span>        <span class="hljs-string">"""This is where training happens: train your model given list of completions, then returns dict with created links and resources"""</span>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">'score'</span>: random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)&#125;</code></pre><h3 id="Create-ML-backend-configs-amp-scripts"><a href="#Create-ML-backend-configs-amp-scripts" class="headerlink" title="Create ML backend configs &amp; scripts"></a>Create ML backend configs &amp; scripts</h3><p>Label Studio can automatically create all necessary configs and scripts needed to run ML backend from your newly created model.</p><p>Let’s call ML backend <code>my_backend</code> and initialize ML backend directory <code>./my_backend</code>:</p><pre><code class="hljs bash">label-studio-ml init my_backend</code></pre><p>The later command takes your script <code>./model.py</code> then creates <code>./my_backend</code> directory at the same level and copies configs and scripts needed for launching ML backend either in development or production modes.</p><blockquote><p>Note: You can specify different location for your model script, e.g. <code>label-studio init my_backend --script /path/to/my/script.py</code></p></blockquote><h3 id="Launch-ML-backend-server"><a href="#Launch-ML-backend-server" class="headerlink" title="Launch ML backend server"></a>Launch ML backend server</h3><h4 id="Development-mode"><a href="#Development-mode" class="headerlink" title="Development mode"></a>Development mode</h4><p>In a development mode, training and inference are done in a single process, therefore the server doesn’t respond to incoming predictions requests while the model trains.</p><p>In order to launch ML backend server in a Flask development mode, run</p><pre><code class="hljs bash">label-studio-ml start my_backend</code></pre><p>The server started on <code>http://localhost:9090</code> and outputs logs in console.</p><h4 id="Production-mode"><a href="#Production-mode" class="headerlink" title="Production mode"></a>Production mode</h4><p>Production mode is powered by Redis server and RQ jobs that take care of backround training processes. It means that you can start training your model and continue making requests for predictions from current model state.<br>Once the model training process is finished, the new model version updates automatically.</p><p>For production mode, please make sure you have docker and docker-compose installed on your system. Then execute:</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my_backend/docker-compose up</code></pre><p>Now you can explore runtime logs in <code>my_backend/logs/uwsgi.log</code> and RQ training logs in <code>my_backend/logs/rq.log</code></p><h3 id="Using-ML-backend-with-Label-Studio"><a href="#Using-ML-backend-with-Label-Studio" class="headerlink" title="Using ML backend with Label Studio"></a>Using ML backend with Label Studio</h3><p>Initialize and start new Label Studio project connecting to the running ML backend:</p><pre><code class="hljs bash">label-studio start --init --ml-backend-url http://localhost:9090</code></pre><h4 id="Getting-predictions"><a href="#Getting-predictions" class="headerlink" title="Getting predictions"></a>Getting predictions</h4><p>You should see model predictions in a labeling interface.</p><h4 id="Model-training"><a href="#Model-training" class="headerlink" title="Model training"></a>Model training</h4><p>Model training is triggered manually by pushing <code>Start training</code> button on <a href="http://localhost:8080/model" target="_blank" rel="noopener">/model</a> page, or by using an API call:</p><pre><code class="hljs bash">curl -X POST http://localhost:8080/api/train</code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Video Classifier</title>
      <link href="/templates/video_classification.html"/>
      <url>/templates/video_classification.html</url>
      
        <content type="html"><![CDATA[<p>You can build simple video classifier using HyperText tag.</p><img src="/images/screens/video_classification.png" class="img-template-example" title="Video Classifier"> <h2 id="Input-data"><a href="#Input-data" class="headerlink" title="Input data"></a>Input data</h2><p>You need to prepare input data like this, read more about HTML video tag<br><a href="https://www.w3schools.com/tags/att_video_src.asp" target="_blank" rel="noopener">here</a>: </p><pre><code class="hljs json">[ &#123; <span class="hljs-attr">"html"</span>: <span class="hljs-string">"&lt;video src='examples.com/1.mp4'&gt;"</span> &#125;, &#123; <span class="hljs-attr">"html"</span>: <span class="hljs-string">"&lt;video src='examples.com/2.mp4'&gt;"</span> &#125;]</code></pre><p>Or you can even use embeds from Youtube:</p><pre><code class="hljs json">[ &#123; <span class="hljs-attr">"html"</span>: <span class="hljs-string">"&lt;iframe src='https://www.youtube.com/embed/mf9TKj0NuTQ'&gt;&lt;/iframe&gt;"</span> &#125;]</code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"type"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"video"</span> <span class="hljs-attr">choice</span>=<span class="hljs-string">"single-radio"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Motion"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Stable"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Choice</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">HyperText</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"video"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HyperText</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><p>Note: preview for this config uses another sample input data, so it won’t display the proper task with the video.  </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tutorials/pytorch-image-transfer-learning.html"/>
      <url>/tutorials/pytorch-image-transfer-learning.html</url>
      
        <content type="html"><![CDATA[<h2 id="Transfer-learning-for-images-with-PyTorch"><a href="#Transfer-learning-for-images-with-PyTorch" class="headerlink" title="Transfer learning for images with PyTorch"></a>Transfer learning for images with PyTorch</h2><p>It explains the basics of computer vision with Label Studio and <a href="https://pytorch.org/" target="_blank" rel="noopener">PyTorch</a>.<br>The proposed model leverages transfer learning from popular ResNet image classifier and able to be quickly finetuned to your own data.</p><p>The example labeling config could be</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image_object"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$image_url"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"image_classes"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"image_object"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Cat"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Dog"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Create-a-model-script"><a href="#Create-a-model-script" class="headerlink" title="Create a model script"></a>Create a model script</h3><p>If you create ML backend by using Label Studio’s ML SDK, you have to follow the rules:</p><ul><li>created model class should be inherited from <code>label_studio.ml.LabelStudioMLBase</code></li><li>2 methods should be overrided:<ul><li><code>predict()</code> takes <a href="/guide/tasks.html#Basic-format">input tasks</a> and outputs <a href="/guide/export.html#predictions">predictions</a> in a Label Studio format</li><li><code>train()</code> receives <a href="/guide/export.html#Basic-format">completions</a> iterable and returns dictionary with created links and resources. This dictionary will be later used for model loading via <code>self.train_output</code> field.</li></ul></li></ul><p>Create a file <code>model.py</code> with the PyTorch model for ready for training and inference.</p><p>First create <code>Dataset</code> class that takes list of image URLs as input and produces batch of preprocessed images with corresponding labels.</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets, models, transformsdevice = torch.device(<span class="hljs-string">'cuda:0'</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">'cpu'</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageClassifierDataset</span><span class="hljs-params">(Dataset)</span>:</span>            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, image_urls, image_classes)</span>:</span>        self.images = []        self.labels = []                self.classes = list(set(image_classes))        self.class_to_label = &#123;c: i <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> enumerate(self.classes)&#125;                self.image_size = <span class="hljs-number">224</span>        self.transforms = transforms.Compose([            transforms.Resize(self.image_size),            transforms.CenterCrop(self.image_size),            transforms.ToTensor(),            transforms.Normalize([<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>], [<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>])        ])                        <span class="hljs-keyword">for</span> image_url, image_class <span class="hljs-keyword">in</span> zip(image_urls, image_classes):            image = self._get_image_from_url(image_url)            transformed_image = self.transforms(image)            self.images.append(transformed_image)                        label = self.class_to_label[image_class]            self.labels.append(label)                <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_image_from_url</span><span class="hljs-params">(self, url)</span>:</span>        <span class="hljs-keyword">pass</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span><span class="hljs-params">(self, index)</span>:</span>        <span class="hljs-keyword">return</span> self.images[index], self.labels[index]        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> len(self.images)</code></pre><p>As the next step let’s make a simple wrapper for pretrained ResNet model</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageClassifier</span><span class="hljs-params">(object)</span>:</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes)</span>:</span>        self.model = models.resnet18(pretrained=<span class="hljs-literal">True</span>)        num_ftrs = self.model.fc.in_features        self.model.fc = nn.Linear(num_ftrs, num_classes)                self.model = self.model.to(device)                self.criterion = nn.CrossEntropyLoss()        self.optimizer = optim.SGD(self.model.parameters(), lr=<span class="hljs-number">0.001</span>, momentum=<span class="hljs-number">0.9</span>)                <span class="hljs-comment"># Decay LR by a factor of 0.1 every 7 epochs</span>        self.scheduler = optim.lr_scheduler.StepLR(self.optimizer, step_size=<span class="hljs-number">7</span>, gamma=<span class="hljs-number">0.1</span>)        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self, path)</span>:</span>        torch.save(self.model.state_dict(), path)        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load</span><span class="hljs-params">(self, path)</span>:</span>        self.model.load_state_dict(torch.load(path))        self.model.eval()            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span><span class="hljs-params">(self, dataloader, num_epochs=<span class="hljs-number">25</span>)</span>:</span>        since = time.time()        self.model.train()        <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(num_epochs):            print(<span class="hljs-string">'Epoch &#123;&#125;/&#123;&#125;'</span>.format(epoch, num_epochs - <span class="hljs-number">1</span>))            print(<span class="hljs-string">'-'</span> * <span class="hljs-number">10</span>)                        running_loss = <span class="hljs-number">0.0</span>            running_corrects = <span class="hljs-number">0</span>                <span class="hljs-comment"># Iterate over data.</span>            <span class="hljs-keyword">for</span> inputs, labels <span class="hljs-keyword">in</span> dataloader:                inputs = inputs.to(device)                labels = labels.to(device)                self.optimizer.zero_grad()                outputs = self.model(inputs)                _, preds = torch.max(outputs, <span class="hljs-number">1</span>)                loss = self.criterion(outputs, labels)                loss.backward()                self.optimizer.step()                <span class="hljs-comment"># statistics</span>                running_loss += loss.item() * inputs.size(<span class="hljs-number">0</span>)                running_corrects += torch.sum(preds == labels.data)                self.scheduler.step()            epoch_loss = running_loss / len(dataloader.dataset)            epoch_acc = running_corrects.double() / len(dataloader.dataset)            print(<span class="hljs-string">'Train Loss: &#123;:.4f&#125; Acc: &#123;:.4f&#125;'</span>.format(epoch_loss, epoch_acc))        print()            time_elapsed = time.time() - since        print(<span class="hljs-string">'Training complete in &#123;:.0f&#125;m &#123;:.0f&#125;s'</span>.format(time_elapsed // <span class="hljs-number">60</span>, time_elapsed % <span class="hljs-number">60</span>))        <span class="hljs-keyword">return</span> self.model</code></pre><p>Finally override API methods</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> label_studio.ml <span class="hljs-keyword">import</span> LabelStudioMLBase<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageClassifierAPI</span><span class="hljs-params">(LabelStudioMLBase)</span>:</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, **kwargs)</span>:</span>        self.model = ImageClassifier(resources[<span class="hljs-string">'num_classes'</span>])        self.model.load(resources[<span class="hljs-string">'model_path'</span>])        self.labels = resources[<span class="hljs-string">'labels'</span>]            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span><span class="hljs-params">(self, tasks, **kwargs)</span>:</span>        <span class="hljs-keyword">pass</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(self, completions, **kwargs)</span>:</span>        <span class="hljs-keyword">pass</span></code></pre><h3 id="Create-ML-backend-configs-amp-scripts"><a href="#Create-ML-backend-configs-amp-scripts" class="headerlink" title="Create ML backend configs &amp; scripts"></a>Create ML backend configs &amp; scripts</h3><p>Label Studio can automatically create all necessary configs and scripts needed to run ML backend from your newly created model.</p><p>Let’s call ML backend <code>my_backend</code> and initialize ML backend directory <code>./my_backend</code>:</p><pre><code class="hljs bash">label-studio-ml init my_backend</code></pre><p>The later command takes your script <code>./model.py</code> then creates <code>./my_backend</code> directory at the same level and copies configs and scripts needed for launching ML backend either in development or production modes.</p><blockquote><p>Note: You can specify different location for your model script, e.g. <code>label-studio init my_backend --script /path/to/my/script.py</code></p></blockquote><h3 id="Launch-ML-backend-server"><a href="#Launch-ML-backend-server" class="headerlink" title="Launch ML backend server"></a>Launch ML backend server</h3><h4 id="Development-mode"><a href="#Development-mode" class="headerlink" title="Development mode"></a>Development mode</h4><p>In a development mode, training and inference are done in a single process, therefore the server doesn’t respond to incoming predictions requests while the model trains.</p><p>In order to launch ML backend server in a Flask development mode, run</p><pre><code class="hljs bash">label-studio-ml start my_backend</code></pre><p>The server started on <code>http://localhost:9090</code> and outputs logs in console.</p><h4 id="Production-mode"><a href="#Production-mode" class="headerlink" title="Production mode"></a>Production mode</h4><p>Production mode is powered by Redis server and RQ jobs that take care of backround training processes. It means that you can start training your model and continue making requests for predictions from current model state.<br>Once the model training process is finished, the new model version updates automatically.</p><p>For production mode, please make sure you have docker and docker-compose installed on your system. Then execute:</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my_backend/docker-compose up</code></pre><p>Now you can explore runtime logs in <code>my_backend/logs/uwsgi.log</code> and RQ training logs in <code>my_backend/logs/rq.log</code></p><h3 id="Using-ML-backend-with-Label-Studio"><a href="#Using-ML-backend-with-Label-Studio" class="headerlink" title="Using ML backend with Label Studio"></a>Using ML backend with Label Studio</h3><p>Initialize and start new Label Studio project connecting to the running ML backend:</p><pre><code class="hljs bash">label-studio start --init --ml-backend-url http://localhost:9090</code></pre><h4 id="Getting-predictions"><a href="#Getting-predictions" class="headerlink" title="Getting predictions"></a>Getting predictions</h4><p>You should see model predictions in a labeling interface.</p><h4 id="Model-training"><a href="#Model-training" class="headerlink" title="Model training"></a>Model training</h4><p>Model training is triggered manually by pushing <code>Start training</code> button on <a href="http://localhost:8080/model" target="_blank" rel="noopener">/model</a> page, or by using an API call:</p><pre><code class="hljs bash">curl -X POST http://localhost:8080/api/train</code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tutorials/sklearn-text-classifier.html"/>
      <url>/tutorials/sklearn-text-classifier.html</url>
      
        <content type="html"><![CDATA[<h2 id="Text-classification-with-Scikit-Learn"><a href="#Text-classification-with-Scikit-Learn" class="headerlink" title="Text classification with Scikit-Learn"></a>Text classification with Scikit-Learn</h2><p>It explains the basics of Machine Learning (ML) backend usage within Label Studio.<br>We’ll take a simple text classification model powered by <a href="https://scikit-learn.org/stable/" target="_blank" rel="noopener">scikit-learn</a> library.<br>It is compatible with text classication task, i.e. where <code>&lt;Choices&gt;</code> control tag is used with <code>&lt;Text&gt;</code> object tag. The example of a label config:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"news"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$text"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">Choices</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"topic"</span> <span class="hljs-attr">toName</span>=<span class="hljs-string">"news"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Politics"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Technology"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Sport"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Choice</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Weather"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">Choices</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></code></pre><h3 id="Create-a-model-script"><a href="#Create-a-model-script" class="headerlink" title="Create a model script"></a>Create a model script</h3><p>If you create ML backend by using Label Studio’s ML SDK, you have to follow the rules:</p><ul><li>created model class should be inherited from <code>label_studio.ml.LabelStudioMLBase</code></li><li>2 methods should be overrided:<ul><li><code>predict()</code> takes <a href="/guide/tasks.html#Basic-format">input tasks</a> and outputs <a href="/guide/export.html#predictions">predictions</a> in a Label Studio format</li><li><code>train()</code> receives <a href="/guide/export.html#Basic-format">completions</a> iterable and returns dictionary with created links and resources. This dictionary will be later used for model loading via <code>self.train_output</code> field.</li></ul></li></ul><p>Create a file <code>model.py</code> with the following content:</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> TfidfVectorizer<span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> make_pipeline<span class="hljs-keyword">from</span> label_studio.ml <span class="hljs-keyword">import</span> LabelStudioMLBase<span class="hljs-comment"># This is a main declaration of a machine learning model class</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleTextClassifier</span><span class="hljs-params">(LabelStudioMLBase)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, **kwargs)</span>:</span>        <span class="hljs-comment"># don't forget to initialize base class...</span>        super(SimpleTextClassifier, self).__init__(**kwargs)        <span class="hljs-comment"># then collect all keys from config which will be used to extract data from task and to form prediction</span>        <span class="hljs-comment"># Parsed label config contains only one output of &lt;Choices&gt; type</span>        <span class="hljs-keyword">assert</span> len(self.parsed_label_config) == <span class="hljs-number">1</span>        self.from_name, self.info = list(self.parsed_label_config.items())[<span class="hljs-number">0</span>]        <span class="hljs-keyword">assert</span> self.info[<span class="hljs-string">'type'</span>] == <span class="hljs-string">'Choices'</span>        <span class="hljs-comment"># the model has only one textual input</span>        <span class="hljs-keyword">assert</span> len(self.info[<span class="hljs-string">'to_name'</span>]) == <span class="hljs-number">1</span>        <span class="hljs-keyword">assert</span> len(self.info[<span class="hljs-string">'inputs'</span>]) == <span class="hljs-number">1</span>        <span class="hljs-keyword">assert</span> self.info[<span class="hljs-string">'inputs'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'Text'</span>        self.to_name = self.info[<span class="hljs-string">'to_name'</span>][<span class="hljs-number">0</span>]        self.value = self.info[<span class="hljs-string">'inputs'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'value'</span>]        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.train_output:            <span class="hljs-comment"># If there is no trainings, define cold-started the simple TF-IDF text classifier</span>            self.model = make_pipeline(TfidfVectorizer(), LogisticRegression())            <span class="hljs-comment"># This is an array of &lt;Choice&gt; labels</span>            self.labels = self.info[<span class="hljs-string">'labels'</span>]            <span class="hljs-comment"># make some dummy initialization</span>            self.model.fit(X=self.labels, y=list(range(len(self.labels))))            print(<span class="hljs-string">'Initialized with from_name=&#123;from_name&#125;, to_name=&#123;to_name&#125;, labels=&#123;labels&#125;'</span>.format(                from_name=self.from_name, to_name=self.to_name, labels=str(self.labels)            ))        <span class="hljs-keyword">else</span>:            <span class="hljs-comment"># otherwise load the model from the latest training results</span>            self.model_file = self.train_output[<span class="hljs-string">'model_file'</span>]            <span class="hljs-keyword">with</span> open(self.model_file, mode=<span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> f:                self.model = pickle.load(f)            <span class="hljs-comment"># and use the labels from training outputs</span>            self.labels = self.train_output[<span class="hljs-string">'labels'</span>]            print(<span class="hljs-string">'Loaded from train output with from_name=&#123;from_name&#125;, to_name=&#123;to_name&#125;, labels=&#123;labels&#125;'</span>.format(                from_name=self.from_name, to_name=self.to_name, labels=str(self.labels)            ))    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span><span class="hljs-params">(self, tasks, **kwargs)</span>:</span>        <span class="hljs-comment"># collect input texts</span>        input_texts = []        <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:            input_texts.append(task[<span class="hljs-string">'data'</span>][self.value])        <span class="hljs-comment"># get model predictions</span>        probabilities = self.model.predict_proba(input_texts)        predicted_label_indices = np.argmax(probabilities, axis=<span class="hljs-number">1</span>)        predicted_scores = probabilities[np.arange(len(predicted_label_indices)), predicted_label_indices]        predictions = []        <span class="hljs-keyword">for</span> idx, score <span class="hljs-keyword">in</span> zip(predicted_label_indices, predicted_scores):            predicted_label = self.labels[idx]            <span class="hljs-comment"># prediction result for the single task</span>            result = [&#123;                <span class="hljs-string">'from_name'</span>: self.from_name,                <span class="hljs-string">'to_name'</span>: self.to_name,                <span class="hljs-string">'type'</span>: <span class="hljs-string">'choices'</span>,                <span class="hljs-string">'value'</span>: &#123;<span class="hljs-string">'choices'</span>: [predicted_label]&#125;            &#125;]            <span class="hljs-comment"># expand predictions with their scores for all tasks</span>            predictions.append(&#123;<span class="hljs-string">'result'</span>: result, <span class="hljs-string">'score'</span>: score&#125;)        <span class="hljs-keyword">return</span> predictions    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(self, completions, workdir=None, **kwargs)</span>:</span>        input_texts = []        output_labels = []        label2idx = &#123;l: i <span class="hljs-keyword">for</span> i, l <span class="hljs-keyword">in</span> enumerate(self.labels)&#125;        <span class="hljs-keyword">for</span> completion <span class="hljs-keyword">in</span> completions:            <span class="hljs-comment"># get input text from task data</span>            input_text = completion[<span class="hljs-string">'data'</span>][self.value]            <span class="hljs-comment"># get an annotation</span>            output_label = completion[<span class="hljs-string">'completions'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'result'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'value'</span>][<span class="hljs-string">'choices'</span>][<span class="hljs-number">0</span>]            output_label_idx = label2idx[output_label]            input_texts.append(input_text)            output_labels.append(output_label_idx)        <span class="hljs-comment"># train the model</span>        self.model.fit(input_texts, output_labels)        <span class="hljs-comment"># save output resources</span>        model_file = os.path.join(workdir, <span class="hljs-string">'model.pkl'</span>)        <span class="hljs-keyword">with</span> open(model_file, mode=<span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> fout:            pickle.dump(self.model, fout)        train_output = &#123;            <span class="hljs-string">'labels'</span>: self.labels,            <span class="hljs-string">'model_file'</span>: model_file        &#125;        <span class="hljs-keyword">return</span> train_output</code></pre><h3 id="Create-ML-backend-configs-amp-scripts"><a href="#Create-ML-backend-configs-amp-scripts" class="headerlink" title="Create ML backend configs &amp; scripts"></a>Create ML backend configs &amp; scripts</h3><p>Label Studio can automatically create all necessary configs and scripts needed to run ML backend from your newly created model.</p><p>Let’s call ML backend <code>my_backend</code> and initialize ML backend directory <code>./my_backend</code>:</p><pre><code class="hljs bash">label-studio-ml init my_backend</code></pre><p>The later command takes your script <code>./model.py</code> then creates <code>./my_backend</code> directory at the same level and copies configs and scripts needed for launching ML backend either in development or production modes.</p><blockquote><p>Note: You can specify different location for your model script, e.g. <code>label-studio init my_backend --script /path/to/my/script.py</code></p></blockquote><h3 id="Launch-ML-backend-server"><a href="#Launch-ML-backend-server" class="headerlink" title="Launch ML backend server"></a>Launch ML backend server</h3><h4 id="Development-mode"><a href="#Development-mode" class="headerlink" title="Development mode"></a>Development mode</h4><p>In a development mode, training and inference are done in a single process, therefore the server doesn’t respond to incoming predictions requests while the model trains.</p><p>In order to launch ML backend server in a Flask development mode, run</p><pre><code class="hljs bash">label-studio-ml start my_backend</code></pre><p>The server started on <code>http://localhost:9090</code> and outputs logs in console.</p><h4 id="Production-mode"><a href="#Production-mode" class="headerlink" title="Production mode"></a>Production mode</h4><p>Production mode is powered by Redis server and RQ jobs that take care of backround training processes. It means that you can start training your model and continue making requests for predictions from current model state.<br>Once the model training process is finished, the new model version updates automatically.</p><p>For production mode, please make sure you have docker and docker-compose installed on your system. Then execute:</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my_backend/docker-compose up</code></pre><p>Now you can explore runtime logs in <code>my_backend/logs/uwsgi.log</code> and RQ training logs in <code>my_backend/logs/rq.log</code></p><h3 id="Using-ML-backend-with-Label-Studio"><a href="#Using-ML-backend-with-Label-Studio" class="headerlink" title="Using ML backend with Label Studio"></a>Using ML backend with Label Studio</h3><p>Initialize and start new Label Studio project connecting to the running ML backend:</p><pre><code class="hljs bash">label-studio start --init --ml-backend-url http://localhost:9090</code></pre><h4 id="Getting-predictions"><a href="#Getting-predictions" class="headerlink" title="Getting predictions"></a>Getting predictions</h4><p>You should see model predictions in a labeling interface.</p><h4 id="Model-training"><a href="#Model-training" class="headerlink" title="Model training"></a>Model training</h4><p>Model training is triggered manually by pushing <code>Start training</code> button on <a href="http://localhost:8080/model" target="_blank" rel="noopener">/model</a> page, or by using an API call:</p><pre><code class="hljs bash">curl -X POST http://localhost:8080/api/train</code></pre>]]></content>
      
    </entry>
    
    
  
</search>
