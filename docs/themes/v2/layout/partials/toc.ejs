<% const isEnterpriseTheme = theme.tier === "enterprise" %>

<%- partial("component/heading", {text: "Docs", size: "XXSmall", tag: "h2", href: "/guide/"}) %>

  <ul class="page-sidebar-list">
    <% const pages = site.pages.filter(page => page.type === type && (page.tier === theme.tier || page.tier === "all" || page.type === "tags" || page.type === "playground" || page.type === "templates")).sort('order'); %>
    <% const parentPages = pages.filter(page => page.parent === undefined) %>
    <% const childrenPages = pages.filter(page => page.parent !== undefined) %>

    <% const pagesArray = parentPages.map(page => {
      var fileName = page.path.replace(/^.+?\/([\w-]+)\.html/, '$1')
      let childPages = childrenPages.filter(child => child.parent === fileName);

      return {
        page: page,
        fileName: fileName,
        childPages: childPages
      }
    }) %>

    <%
      const headers = [
        {
          type: "guide",
          headers: {
            'install': 'Install and Upgrade',
            'install_enterprise': 'Deploy and Install Enterprise',
            'security': 'Security and Privacy',
            'signup': 'Manage Users',
            'tasks': 'Import Data',
            'setup_project': 'Labeling and Projects',
            'quality': 'Manage Annotations',
            'ml': 'Machine Learning Setup',
            'webhooks': 'Integrations',
            'frontend': 'Advanced Development'
          }
        },
        {
          type: "tags",
          headers: {
            "audio": "Object Tags",
            "brush": "Control Tags",
            "collapse": "Visual & Experience Tags"
          }
        },
        {
          type: "templates",
          headers: {
            "image_polygons": "Computer Vision",
            "question_answering": "Natural Language Processing",
            "transcribe_audio": "Audio/Speech Processing",
            "response_generation": "Conversational AI",
            "freeform_metadata": "Structured Data Parsing",
            "pairwise_regression": "Ranking and Scoring",
            "time_series_forecasting": "Time Series Analysis",
            "video_classification": "Videos",
            "gallery_cv": "Template Galleries"
          }
        }
      ]
    %>

    <% pagesArray.forEach(function (p) { %>
      <% const tocHeader = headers.find(headerType => headerType.type === type).headers[p.fileName] %>
      <% if(tocHeader) { %>
        </ul>
          <% if(locals.component === "nav") { %>
            <button>
              <%- tocHeader %>
              <svg width="13" height="8" viewBox="0 0 13 8" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M0.292969 0.805007L1.00008 0.0979004L6.64652 5.74435L12.293 0.0979004L13.0001 0.805007L6.64652 7.15856L0.292969 0.805007Z" />
              </svg>
            </button>
          <% } else { %>
            <%- partial("component/text", {text: tocHeader, size: "Eyebrow", tag: "h3"}) %>
          <% } %>
        <ul class="page-sidebar-list">
      <% } %>
      <li>
        <a href="<%- url_for(p.page.path) %>" class="<%- p.page.is_new ? ' new' : '' %>" <%- page.title === p.page.title ? 'aria-current="page"' : '' %>>
        <%- p.page.short ? p.page.short: p.page.title %></a>
        <% if(p.childPages.length > 0) {%>
          <% const activeChildPage = p.childPages.filter(child => page.title === child.title ||Â page.title === p.page.title) %>
          <button class="page-sidebar-toggle-children-list<%- activeChildPage.length > 0 ? ' active' : ''%>">
            <svg width="13" height="8" viewBox="0 0 13 8" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M0.292969 0.805007L1.00008 0.0979004L6.64652 5.74435L12.293 0.0979004L13.0001 0.805007L6.64652 7.15856L0.292969 0.805007Z" />
            </svg>
          </button>
          <ul class="page-sidebar-children-list<%- activeChildPage.length > 0 ? ' page-sidebar-children-list-active' : ''%>">
          <% p.childPages.forEach(child => { %>
            <li>
              <a href="<%- url_for(child.path) %>" class="<%- child.is_new ? ' new' : '' %>" <%- page.title === child.title ? 'aria-current="page"' : '' %>>
              <%- child.short ? child.short: child.title %></a>
            </li>
          <% }) %>
          </ul>
        <% } %>
      </li>
    <% }) %>
</ul>
