---
AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create the infra needed to deploy the LabelStudio Instance for SalmonVision."

Parameters:
  Stage:
    Description: The stage {dev, prod} to use
    Type: String
    MinLength: 1
    MaxLength: 16

  DBUser:
    Description: The database admin account username
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    Description: The database admin account password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

  SourceBundleBucketName:
    Description: The source bundle bucket name
    Type: String
    MinLength: 1
    MaxLength: 150

Resources:
  LabelStudioDBInstance:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Retain
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-labelstudio-postgres-instance"
      AllocatedStorage: "20" # Free tier allows up to 20GB
      DBInstanceClass: "db.t3.micro" # Free tier eligible instance type
      Engine: "postgres"
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      # MasterUsername: "chinook"
      # MasterUserPassword: "zBMgsfPKKQVohqK"
      DBName: "labelstudio"
      BackupRetentionPeriod: 7
      VPCSecurityGroups:
        - !GetAtt LabelStudioDBSecurityGroup.GroupId
      # FIXME: change this to false and setup a VPC for the Beanstalk and EC2 instance to access it only
      PubliclyAccessible: true
      StorageType: "gp2"

  ECRRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-repository"

  LabelStudioDBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable access to the RDS instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0 # Allows access from anywhere. Restrict this in a production environment.

  LabelStudioBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${AWS::StackName}-labelstudio-bucket"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - "x-amz-server-side-encryption"
              - "x-amz-request-id"
              - "x-amz-id-2"
            MaxAge: 3001

  ElasticBeanstalkApplication:
    Type: "AWS::ElasticBeanstalk::Application"
    Properties:
      ApplicationName: !Sub "${AWS::StackName}-application"

  ElasticBeanstalkApplicationVersion:
    Type: "AWS::ElasticBeanstalk::ApplicationVersion"
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      SourceBundle:
        S3Bucket: !Ref SourceBundleBucketName
        # S3Bucket: salmonvision-elasticbeanstalk-sourcebundle
        S3Key: docker-compose.yml

  ElasticBeanstalkRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier"
        - "arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess" # Managed policy for full access to S3
        - "arn:aws:iam::aws:policy/AmazonRDSFullAccess" # Managed policy for full access to RDS
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly" # Managed policy for full access to ECR

  ElasticBeanstalkInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref ElasticBeanstalkRole

  ElasticBeanstalkConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      Description: AWS ElasticBeanstalk Configuration Template for SalmonVision
      OptionSettings:
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: "LoadBalancerType"
          Value: "classic"
        # TODO: SSL setup
        # - Namespace: "aws:elb:listener:443"
        #   OptionName: "ListenerProtocol"
        #   Value: "HTTPS"
        # - Namespace: "aws:elb:listener:443"
        #   OptionName: "ListenerPort"
        #   Value: "443"
        # - Namespace: "aws:elb:listener:443"
        #   OptionName: "ListenerEnabled"
        #   Value: "true"
        # - Namespace: "aws:elb:listener:443"
        #   OptionName: "SSLCertificateId"
        #   Value: ARN SSL certificate
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: "1"
        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: "1"
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref ElasticBeanstalkInstanceProfile
      SolutionStackName: "64bit Amazon Linux 2023 v4.3.2 running Docker"

  ElasticBeanstalkEnvironment:
    Type: "AWS::ElasticBeanstalk::Environment"
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      VersionLabel: !Ref ElasticBeanstalkApplicationVersion
      TemplateName: !Ref ElasticBeanstalkConfigurationTemplate
      CNAMEPrefix: !Sub "${Stage}-salmonvision-application"
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref ElasticBeanstalkInstanceProfile

Outputs:
  BucketName:
    Description: Name of the created S3 bucket to store data uploads from labelstudio UI
    Value: !Ref LabelStudioBucket
    Export:
      Name: !Sub "${AWS::StackName}-labelstudio-s3-bucket"

  DBInstanceEndpoint:
    Description: The connection endpoint for the LabelStudio RDS instance
    Value: !GetAtt LabelStudioDBInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-database-endpoint"
  ElasticBeanstalkApplicationName:
    Description: The name of the Elastic Beanstalk application
    Value: !Ref ElasticBeanstalkApplication
    Export:
      Name: !Sub "${AWS::StackName}-application-name"

  ElasticBeanstalkEnvironmentURL:
    Description: The URL of the Elastic Beanstalk environment
    Value: !GetAtt ElasticBeanstalkEnvironment.EndpointURL
    Export:
      Name: !Sub "${AWS::StackName}-web-application-endpoint"

  ElasticBeanstalkEnvironmentName:
    Description: The Name of the ElasticBeanstalkEnvironment
    Value: !Ref ElasticBeanstalkEnvironment
    Export:
      Name: !Sub "${AWS::StackName}-environment-name"

  ElasticBeanstalkApplicationEnvironmentVersion:
    Description: The version of the Elastic Beanstalk application
    Value: !Ref ElasticBeanstalkApplicationVersion
    Export:
      Name: !Sub "${AWS::StackName}-environment-version"

  ECRRepositoryURI:
    Description: The URI of the ECR repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}"
    Export:
      Name: !Sub "${AWS::StackName}-docker-container-registry-endpoint"
