{"version":3,"file":"static/js/478.chunk.js","mappings":"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","sources":["webpack://LabelStudio/webpack/universalModuleDefinition","webpack://LabelStudio/./src/lib/AudioUltra/Common/Worker/index.ts","webpack://LabelStudio/./src/lib/AudioUltra/Media/SplitChannelWorker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"LabelStudio\"] = factory();\n\telse\n\t\troot[\"LabelStudio\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn ","type MessengerResponder = (result: Record<string, any>) => void;\n\ntype MessengerCallback = (data: any, storage: Record<string, any>, respond: MessengerResponder) => void;\n\ntype MessengerInput = {\n  compute: MessengerCallback,\n  precompute?: MessengerCallback,\n}\n\nexport class ComputeWorker {\n  private worker: Worker;\n\n  static Messenger = {\n    receive({\n      compute: computeCallback,\n      precompute: precomputeCallback,\n    }: MessengerInput) {\n      const storage: Record<string, any> = {};\n\n      const storeData = (e: MessageEvent) => {\n        Object.assign(storage, e.data.data);\n      };\n\n      const compute = (data: any, eventId: string) => {\n        const respond = (result: Record<string, any>) => {\n          self.postMessage({\n            result,\n            eventId,\n          });\n        };\n\n        computeCallback(data, storage, respond);\n      };\n\n      const precompute = (data: any) => {\n        precomputeCallback?.(data, storage, (result) => {\n          Object.assign(storage, result);\n        });\n      };\n\n      const getStorage = (eventId: string) => {\n        self.postMessage({\n          result: storage,\n          eventId,\n        });\n      };\n\n      self.addEventListener('message', (e) => {\n        if (!e.data) return;\n\n        const { data, type, eventId } = e.data;\n\n        switch (type) {\n          case 'compute': compute(data, eventId); break;\n          case 'precompute': precompute(data); break;\n          case 'store': storeData(e); break;\n          case 'getStorage': getStorage(eventId); break;\n        }\n      });\n    },\n  };\n\n  constructor(url: Worker) {\n    this.worker = url;\n  }\n\n  async compute(data: Record<string, any>) {\n    const result = await this.sendMessage(this.worker, {\n      data,\n      type: 'compute',\n    }, true);\n\n    return result?.data?.result?.data;\n  }\n\n  async precompute(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: 'precompute',\n    });\n  }\n\n  async store(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: 'store',\n    });\n  }\n\n  async getStorage() {\n    const response = await this.sendMessage(this.worker, {\n      type: 'getStorage',\n    }, true);\n\n    return response?.data?.result;\n  }\n\n  destroy() {\n    this.worker.terminate();\n  }\n\n  private sendMessage(worker: Worker, data: Record<string, any>, waitResponse = false) {\n    return new Promise<MessageEvent | undefined>((resolve) => {\n      const eventId = Math.random().toString();\n\n      if (waitResponse) {\n        const resolver = (e: MessageEvent) => {\n          if (eventId === e.data.eventId) {\n            worker.removeEventListener('message', resolver);\n            resolve(e);\n          }\n        };\n\n        worker.addEventListener('message', resolver);\n      }\n\n      worker.postMessage({ ...data, eventId });\n\n      if (!waitResponse) resolve(undefined);\n    });\n  }\n}\n","import { ComputeWorker } from '../Common/Worker';\n\nexport function splitChannels({\n  value,\n  channelCount,\n}: {\n  value: Float32Array,\n  channelCount: number,\n}) : Float32Array[] {\n  const channels: Float32Array[] = [];\n\n  // Create new Float32Array for each channel\n  for (let c = 0; c < channelCount; c++) {\n    channels[c] = new Float32Array(value.length / channelCount);\n  }\n\n  // Split the channels into separate Float32Array samples\n  for (let sample = 0; sample < value.length; sample++) {\n    // interleaved channels\n    // ie. 2 channels\n    // [channel1, channel2, channel1, channel2, ...]\n    const channel = sample % channelCount;\n    // index of the channel sample\n    // ie. 2 channels\n    // sample = 8, channel = 0, channelIndex = 4\n    // sample = 9, channel = 1, channelIndex = 4\n    // sample = 10, channel = 0, channelIndex = 5\n    // sample = 11, channel = 1, channelIndex = 5\n    const channelIndex = Math.floor(sample / channelCount);\n\n    channels[channel][channelIndex] = value[sample];\n  }\n\n  return channels;\n}\n\nComputeWorker.Messenger.receive({\n  compute: (data, _storage, respond) => {\n    respond({\n      data: splitChannels(data),\n    });\n  },\n\n  precompute: (data, _storage, respond) => {\n    respond({\n      data: splitChannels(data),\n    });\n  },\n});\n"],"names":["root","factory","exports","module","define","amd","self","this","ComputeWorker","constructor","url","worker","async","data","result","sendMessage","type","response","destroy","terminate","waitResponse","Promise","resolve","eventId","Math","random","toString","resolver","e","removeEventListener","addEventListener","postMessage","undefined","splitChannels","value","channelCount","channels","c","Float32Array","length","sample","channel","channelIndex","floor","receive","compute","computeCallback","precompute","precomputeCallback","storage","Object","assign","storeData","getStorage","Messenger","_storage","respond"],"sourceRoot":""}