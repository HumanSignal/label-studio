{"version":3,"file":"static/js/201.chunk.js","mappings":"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","sources":["webpack://LabelStudio/webpack/universalModuleDefinition","webpack://LabelStudio/./src/lib/AudioUltra/Common/Utils.ts","webpack://LabelStudio/./src/lib/AudioUltra/Common/Worker/index.ts","webpack://LabelStudio/webpack/bootstrap","webpack://LabelStudio/webpack/runtime/define property getters","webpack://LabelStudio/webpack/runtime/hasOwnProperty shorthand","webpack://LabelStudio/./src/lib/AudioUltra/Media/ChannelDataWorker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"LabelStudio\"] = factory();\n\telse\n\t\troot[\"LabelStudio\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn ","import { Visualizer } from '../Visual/Visualizer';\n\nexport enum defaults {\n  timelineHeight = 32,\n  timelinePlacement = 'top'\n}\n\nexport const clamp = (value: number, min: number, max: number) => {\n  return Math.max(min, Math.min(max, value));\n};\n\nexport const toPrecision = (value: number, precision = 2) => {\n  const multiplier = Math.pow(10, precision);\n\n  return Math.round(value * multiplier) / multiplier;\n};\n\nexport const filterData = (audioBuffer: AudioBuffer | null, channel?: number) => {\n  if (!audioBuffer) return new Float32Array(0);\n\n  return audioBuffer.getChannelData(channel ?? 0);\n};\n\nexport const isInRange = (value: number, min: number , max: number) => {\n  return value >= min && value <= max;\n};\n\nexport const findLast = <T = any>(array: T[], predicate: (item: T) => boolean): T | undefined => {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n};\n\nexport const debounce = (fn: (...args: any[]) => any, timeout: number, { leading = false }: { leading?: boolean } = {}) => {\n  let timer: number | undefined;\n\n  return ((...args: any[]) => {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    if (leading) {\n      fn(...args);\n    }\n\n    timer = setTimeout(() => fn(...args), timeout) as any;\n  }) as typeof fn;\n};\n\nexport const repeat = (str: string, times: number) =>\n  Array.from({ length: times })\n    .map(() => str)\n    .join('');\n\n\nexport const roundToStep = (\n  value: number,\n  step: number,\n  roundFunction: \"floor\" | \"ceil\" | \"round\" = \"round\",\n) => {\n  switch(roundFunction) {\n    case \"floor\": return Math.floor(value / step) * step;\n    case \"ceil\": return Math.ceil(value / step) * step;\n    case \"round\": return Math.round(value / step) * step;\n  }\n};\n\nexport const minmax = (array: ArrayLike<number>) => {\n  const arraySize = array.length;\n\n  if (arraySize > 0) {\n    let max, min;\n    let i = 0;\n\n    max = min = array[0];\n\n    while (i < arraySize) {\n      const value = array[i];\n\n      if (value > max) max = value;\n      else if(value < min) min = value;\n\n      i++;\n    }\n\n    return [min,max];\n  } else {\n    return [Infinity, Infinity];\n  }\n};\n\nexport const averageMinMax = (data: Float32Array) => {\n  const [min, max] = minmax(data);\n\n  return [\n    clamp(min, -1, 1),\n    clamp(max, -1, 1),\n  ];\n};\n\nexport const average = (array: ArrayLike<number>) => {\n  const arraySize = array.length;\n\n  if (arraySize > 0) {\n    let sum = 0;\n\n    for (let i = 0; i < arraySize; i++) {\n      sum += array[i];\n    }\n\n    return sum / arraySize;\n  } else {\n    return 0;\n  }\n};\n\nexport const measure = (message: string, callback: () => void) => {\n  const start = performance.now();\n\n  callback();\n  // eslint-disable-next-line no-console\n  console.info(`[MEASURE]: ${message} took ${performance.now() - start}ms`);\n};\n\nexport const chunk6 = <T>(array: ArrayLike<T>, size: number) => {\n  const chunked_arr = [];\n\n  for (let i = 0; i < array.length; i++) {\n    const last = chunked_arr[chunked_arr.length - 1];\n\n    if (!last || last.length === size) {\n      chunked_arr.push([array[i]]);\n    } else {\n      last.push(array[i]);\n    }\n  }\n\n  return chunked_arr;\n};\n\nexport const bufferAllocator = () => {\n  const buffers = new Map<number, Float32Array>();\n\n  const allocate = (size: number) => {\n    if (buffers.has(size)) return buffers.get(size)!;\n\n    const buffer = new Float32Array(size);\n\n    buffers.set(size, buffer);\n\n    return buffer;\n  };\n\n  return { allocate };\n};\n\nexport const getCursorPositionX = (e: MouseEvent, offsetElement: HTMLElement) => {\n  const parentOffset = (offsetElement).getBoundingClientRect();\n  const cursorOffset = (e.clientX - parentOffset.left);\n\n  return cursorOffset;\n};\n\nexport const getCursorPositionY = (e: MouseEvent, offsetElement: HTMLElement) => {\n  const parentOffset = (offsetElement).getBoundingClientRect();\n  const cursorOffset = (e.clientY - parentOffset.top);\n\n  return cursorOffset;\n};\n\nexport const pixelsToTime = (pixels: number, zoomedWidth: number, duration: number) => {\n  return pixels / zoomedWidth * duration;\n};\n\nexport const getCursorTime = (e: MouseEvent, visualizer: Visualizer, duration: number) => {\n  const { zoomedWidth, container } = visualizer;\n  const cursorPosition = getCursorPositionX(e, container) + visualizer.getScrollLeftPx();\n  const time = pixelsToTime(cursorPosition, zoomedWidth, duration);\n\n  return time;\n};\n","type MessengerResponder = (result: Record<string, any>) => void;\n\ntype MessengerCallback = (data: any, storage: Record<string, any>, respond: MessengerResponder) => void;\n\ntype MessengerInput = {\n  compute: MessengerCallback,\n  precompute?: MessengerCallback,\n}\n\nexport class ComputeWorker {\n  private worker: Worker;\n\n  static Messenger = {\n    receive({\n      compute: computeCallback,\n      precompute: precomputeCallback,\n    }: MessengerInput) {\n      const storage: Record<string, any> = {};\n\n      const storeData = (e: MessageEvent) => {\n        Object.assign(storage, e.data.data);\n      };\n\n      const compute = (data: any, eventId: string) => {\n        const respond = (result: Record<string, any>) => {\n          self.postMessage({\n            result,\n            eventId,\n          });\n        };\n\n        computeCallback(data, storage, respond);\n      };\n\n      const precompute = (data: any) => {\n        precomputeCallback?.(data, storage, (result) => {\n          Object.assign(storage, result);\n        });\n      };\n\n      const getStorage = (eventId: string) => {\n        self.postMessage({\n          result: storage,\n          eventId,\n        });\n      };\n\n      self.addEventListener(\"message\", (e) => {\n        const { data, type, eventId } = e.data;\n\n        switch(type) {\n          case \"compute\": compute(data, eventId); break;\n          case \"precompute\": precompute(data); break;\n          case \"store\": storeData(e); break;\n          case \"getStorage\": getStorage(eventId); break;\n        }\n      });\n    },\n  };\n\n  constructor(url: Worker) {\n    this.worker = url;\n  }\n\n  async compute(data: Record<string, any>) {\n    const result = await this.sendMessage(this.worker, {\n      data,\n      type: \"compute\",\n    }, true);\n\n    return result?.data;\n  }\n\n  async precompute(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: \"precompute\",\n    });\n  }\n\n  async store(data: Record<string, any>) {\n    await this.sendMessage(this.worker, {\n      data,\n      type: \"store\",\n    });\n  }\n\n  async getStorage() {\n    const response = await this.sendMessage(this.worker, {\n      type: \"getStorage\",\n    }, true);\n\n    return response?.data?.result;\n  }\n\n  terminate() {\n    this.worker.terminate();\n  }\n\n  private sendMessage(worker: Worker, data: Record<string, any>, waitResponse = false) {\n    return new Promise<MessageEvent | undefined>((resolve) => {\n      const eventId = Math.random().toString();\n\n      if (waitResponse) {\n        const resolver = (e: MessageEvent) => {\n          if (eventId === e.data.eventId) {\n            resolve(e);\n          }\n        };\n\n        worker.addEventListener(\"message\", resolver);\n      }\n\n      worker.postMessage({ ...data, eventId });\n\n      if (!waitResponse) resolve(undefined);\n    });\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { average, bufferAllocator } from \"../Common/Utils\";\nimport { ComputeWorker } from \"../Common/Worker\";\n\nconst allocator = bufferAllocator();\n\nexport const reduceNoise = ({\n  sampleRate,\n  data,\n  denoize,\n}: {\n  sampleRate: number,\n  data: Float32Array,\n  denoize?: boolean,\n}) => {\n  if (denoize === false) return data;\n\n  // Get sample size for 0.01 seconds\n  const length = data.length;\n  const result = allocator.allocate(length);\n  const sampleSize = Math.ceil(sampleRate / 1000 * (0.001 * 1000));\n\n  for (let i = 0; i < length; i += sampleSize) {\n    const slice = data.slice(i, i + sampleSize);\n    const avg = average(slice);\n\n    slice.fill(avg);\n\n    result.set(slice, i);\n  }\n\n  return result;\n};\n\nComputeWorker.Messenger.receive({\n  compute: (data, storage, respond) => {\n    respond({});\n  },\n\n  precompute: (data, storage, respond) => {\n    respond({\n      data: reduceNoise(data),\n    });\n  },\n});\n"],"names":["root","factory","exports","module","define","amd","self","this","defaults","average","array","arraySize","length","sum","i","bufferAllocator","buffers","Map","allocate","size","has","get","buffer","Float32Array","set","ComputeWorker","constructor","url","worker","data","result","sendMessage","type","response","terminate","waitResponse","Promise","resolve","eventId","Math","random","toString","resolver","e","addEventListener","postMessage","undefined","receive","compute","computeCallback","precompute","precomputeCallback","storage","Object","assign","storeData","getStorage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","allocator","reduceNoise","sampleRate","denoize","sampleSize","ceil","slice","avg","fill","respond"],"sourceRoot":""}