{"version":3,"sources":["components/Panel/Panel.module.scss","components/Relations/Relations.module.scss","components/App/App.module.scss","components/Hint/Hint.module.scss","components/Waveform/Waveform.module.scss","components/Segment/Segment.module.scss","components/Entities/Entities.module.scss","components/TextHighlight/TextHighlight.module.scss","interfaces/object/TextRegion/TextRegion.module.scss","examples/sentiment_analysis/config.xml","examples/audio_classification/config.xml","examples/audio_regions/config.xml","examples/chatbot_analysis/config.xml","examples/image_bbox/config.xml","examples/named_entity/config.xml","examples/references/config.xml","examples/transcribe_audio/config.xml","interfaces/object/AudioPlus/AudioPlus.module.scss","core/Registry.js","core/Requests.js","utils/unique.js","core/Helpers.js","core/Tree.js","utils/utilities.js","utils/colors.js","utils/date.js","utils/index.js","utils/debounce.js","utils/styles.js","components/Completions/Completions.js","components/Predictions/Predictions.js","components/Hint/Hint.js","components/Controls/Controls.js","components/Segment/Segment.js","components/Panel/Panel.js","components/Settings/Settings.js","components/Debug.js","components/Node.js","components/Relations/Relations.js","components/Entities/Entities.js","components/Entity/Entity.js","components/SideColumn/SideColumn.js","core/Types.js","interfaces/visual/View.js","core/Template.js","interfaces/mixins/ProcessAttrs.js","interfaces/visual/Table.js","interfaces/visual/Header.js","interfaces/visual/HyperText.js","components/Dialog/Dialog.js","interfaces/visual/Dialog.js","interfaces/object/AudioHOC.js","interfaces/object/Audio/Controls.js","components/Waveform/Waveform.js","interfaces/object/Audio.js","interfaces/mixins/Regions.js","interfaces/mixins/Normalization.js","interfaces/control/Label.js","interfaces/mixins/SelectedModel.js","interfaces/control/Labels.js","interfaces/control/Rating.js","interfaces/object/AudioRegion.js","interfaces/object/AudioPlus.js","interfaces/control/Rectangle.js","interfaces/control/RectangleLabels.js","interfaces/object/RectRegion.js","interfaces/object/PolygonPoint.js","interfaces/control/Polygon.js","interfaces/control/PolygonLabels.js","interfaces/object/PolygonRegion.js","interfaces/object/Image.js","components/TextHighlight/Range.js","components/TextNode/TextNode.js","components/TextHighlight/Node.js","components/TextHighlight/UrlNode.js","components/TextHighlight/EmojiNode.js","components/TextHighlight/TextHighlight.js","interfaces/object/TextRegion.js","interfaces/object/Text.js","interfaces/control/Choice.js","interfaces/control/Choices.js","interfaces/object/TextAreaRegion.js","interfaces/control/TextArea.js","interfaces/control/List.js","interfaces/control/Ranker.js","components/App/App.js","serviceWorker.js","stores/TaskStore.js","stores/UserStore.js","core/Hotkey.js","stores/SettingsStore.js","core/TimeTraveller.js","stores/RelationStore.js","stores/NormalizationStore.js","stores/RegionStore.js","stores/CompletionStore.js","stores/PredictionStore.js","constants/Api.js","stores/AppStore.js","env/production.js","examples/sentiment_analysis/index.js","examples/audio_classification/index.js","examples/audio_regions/index.js","examples/chatbot_analysis/index.js","examples/image_bbox/index.js","examples/named_entity/index.js","examples/references/index.js","env/development.js","examples/transcribe_audio/index.js","index.js","components/Completions/Completions.module.scss","components/Entity/Entity.module.scss","components/Controls/Controls.module.scss","components/Dialog/Dialog.module.scss"],"names":["module","exports","container","block","block__controls","section","section__blocks","delete","editor","menu","content","common","main","progress","wave","item","state","__webpack_require__","p","play","Registry","_Registry","Object","classCallCheck","this","tags","models","views","views_models","tag","model","view","push","name","values","modelName","Error","keys","join","wrapperRequest","url","method","headers","body","window","fetch","credentials","then","response","res","status","json","Requests","fetcher","Accept","poster","Content-Type","remover","patch","guidGenerator","lgth","uniqueID","nanoid","cloneNode","node","snapshot","getSnapshot","getType","create","objectSpread","id","restoreNewsnapshot","fromModel","renderItem","el","View","getViewByModel","react_default","a","createElement","key","Tree","cloneReactTree","items","attrs","clone","children","React","Children","forEach","child","props","moreProps","cloneElement","renderChildren","length","map","treeToModel","html","buildData","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","attr","value","err","return","attrsToProps","nodeName","JSON","parse","htmlSelfClosingTags","split","newData","i","edsplit","editSelfClosingTags","replace","document","parse5","parseFragment","root","childNodes","addNode","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","chld","findInterface","tree","fn","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","findParentOfType","obj","classes","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","c","getParentOfType","filterChildrenOfType","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","cssConverter","style","firstIndexOfColon","result","attributes","indexOf","substring","x","toUpperCase","isString","String","isStringEmpty","isStringJSON","e","getUrl","text","stringToTest","slice","match","exec","toTimeString","ms","Date","toUTCString","colorNames","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hexToRGBA","hex","opacity","r","g","b","parseInt","concat","colorToRGBA","alpha","toLowerCase","convertToRGBA","charAt","stringToColor","str","hash","charCodeAt","color","toString","substr","rgbaChangeAlpha","rgba","msToHMS","seconds","hours","Math","floor","prettyDate","time","test","date","diff","getTime","day_diff","isNaN","ceil","currentISODate","tzOffest","getTimezoneOffset","now","toISOString","utils","Checkers","Colors","UDate","debounce","func","wait","immediate","timeout","context","args","arguments","callNow","clearTimeout","setTimeout","apply","styleToProp","styles","filter","trim","reduce","styleObj","defineProperty","Completion","observer","_ref","completionID","store","badge","es_badge","userGenerate","sentUserGenerate","pk","List","Item","className","selected","completion","completion_selected","onClick","ev","completionStore","selectCompletion","Content","Header","as","marginBottom","Description","createdAgo","Utils","createdDate","createdBy","buttons","tooltip","placement","title","es_button","type","preventDefault","deleteCompletion","honeypot","removeHoneypot","ghost","setHoneypot","Completions","addUserCompletion","icon","savedCompletions","card","bodyStyle","padding","paddingTop","divided","relaxed","Component","Prediction","selectPrediction","Predictions","predictions","predict","Hint","localClass","data-copy","copy","inject","taskInformation","skipButton","updateButton","submitButton","skip","update","submit","_store$completionStor","_store$settings","settings","enableHotkeys","enableTooltips","task","Hint_Hint","predictSelect","explore","hasInterface","skipTask","sendTask","updateTask","wrapper","Segment","history","canUndo","undo","canRedo","redo","reset","setPrelabeling","display","resetPrelabeling","showingDescription","closeDescription","openDescription","toggleSettings","modal","visible","showingSettings","footer","onCancel","tabs","defaultActiveKey","TabPane","tab","es_checkbox","defaultChecked","onChange","toggleHotkeys","toggleTooltips","DebugComponent","_this2","self","Button","basic","setState","stringify","toJSON","serializeCompletion","deserializeCompletion","addInitialCompletion","project","resetState","addTask","addGeneratedCompletion","markLoading","traverseTree","updateValue","Form","TextArea","target","Node","click","getRoot","regionStore","unselectAll","selectRegion","textDecorationLine","textDecorationStyle","href","start","toFixed","end","_value","w","width","scaleX","y","height","scaleY","NodeMinimal","_ref2","react","Relation","rl","isValidReference","node1","node2","onMouseOver","toggleHighlight","onMouseOut","Node_NodeMinimal","deleteRelation","relations","relationStore","Relations_Relation","Entities","regions","paddingLeft","deleteAllRegions","region","toggleHightlight","RenderStates","_render","s","element","pid","labels","getSelectedNames","bgColor","findLabel","background","getSelectedString","states","highlightedNode","normalization","cursor","deleteNormalization","Entity_RenderStates","button","startRelationMode","setNormalizationMode","unselectRegion","deleteRegion","normalizationMode","marginTop","onSubmit","setNormalization","normInput","Input","setNormInput","placeholder","Entity","Relations","oneOf","arr","types","union","dispatcher","sn","find","val","getModelByTag","Types","unionArray","maybeNull","array","allModelsTypes","modelsArr","results","isType","nt","getParentOfTypeString","parent","getParent","Array","isArray","_loop","v","_ret","TagAttrs","optional","string","backgroundcolor","margin","Model","identifier","ViewModel","compose","HtxView","marginRight","addTag","variableNotation","variable","_index","is","runTemplate","options","re","reExp","code","add","line","js","index","Function","console","error","message","ProcessAttrsMixin","actions","dataObj","size","TableModel","HtxTable","Table","celled","collapsing","Body","k","Row","Cell","Subheader","number","underline","boolean","HeaderModel","HtxHeader","typography","Title","level","fromStateJSON","choices","names","get","from_name","HyperTextActions","HyperTextModel","HtxHyperTextView","dangerouslySetInnerHTML","__html","DialogView","hint","selectedStyle","bg","block_selected","maxWidth","Replica","DialogActions","DialogModel","HtxDialogView","empty","ind","Dialog_DialogView","flexFlow","maxHeight","overflowY","paddingRight","divider","dashed","zoom","volume","speed","playing","wsCreated","ws","_ws","handlePlay","AudioHOCModel","AudioControls","justifyContent","playPause","formatTimeCallback","pxPerSec","Number","minutes","secondsStr","round","timeInterval","primaryLabelInterval","secondaryLabelInterval","Waveform","_this","possibleConstructorReturn","getPrototypeOf","call","onChangeZoom","wavesurfer","onChangeVolume","setVolume","onChangeSpeed","setPlaybackRate","src","pos","colors","waveColor","progressColor","$el","ReactDOM","findDOMNode","$waveform","querySelector","wavesurferConfigure","backend","plugins","RegionsPlugin","dragSelection","slop","TimelinePlugin","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","CursorPlugin","showTime","WaveSurfer","load","on","reg","_region","onMouseLeave","addRegion","selectedregionbg","onUpdateEnd","slider","oninput","onCreate","onLoad","_this3","row","col","span","input_number","min","max","es_slider","step","range","named","AudioModel","HtxAudioView","Waveform_Waveform","Audio_Controls","HtxAudio","RegionsMixin","highlighted","setHighlightedNode","relationMode","stopRelationMode","onClickRegion","addRelation","deleteNodeRelation","setHighlight","NormalizationMixin","alias","hotkey","showalias","aliasstyle","selectedcolor","toggleSelected","sel","shouldBeUnselected","markSelected","onHotKey","LabelModel","HtxLabelView","backgroundColor","SelectedModelMixin","selectedLabels","isSelected","joinstr","toname","choice","enumeration","selectionstyle","getSelectedColor","toStateJSON","to_name","l","label","LabelsModel","HtxLabels","alignItems","maxrating","rating","handleRate","increaseValue","RatingModel","HtxRating","Rating","defaultRating","maxRating","onRate","clearable","fontSize","AudioPlusModel","buildTree","source","_ws_region","border","beforeDestroy","remove","AudioRegionModel","regs","hasStates","toNames","activeStates","findRegion","m","setRangeValue","rangeValue","playBackRate","ws_region","clonedStates","find_r","regionbg","HtxAudioPlus","fillcolor","strokewidth","strokecolor","canrotate","RectangleModel","rectanglelabels","Composition","RectangleLabelsModel","HtxRectangleLabels","rotation","wp","hp","sw","sh","coordstype","ImageModel","setSelected","coordsInside","rx","ry","rw","rh","setPosition","setScale","addState","setFill","fill","updateImageSize","fromEl","stageWidth","stageHeight","RectRegionModel","HtxRectangle","wwidth","wheight","onChangedPosition","naturalWidth","naturalHeight","h","ReactKonva","assign","onTransformEnd","t","getAttr","onDragEnd","dragBoundFunc","stage","_stageRef","draggable","PolygonPoint","init_x","init_y","afterCreate","movePoint","_movePoint","handleMouseOverStartPoint","closed","points","setX","setY","scale","small","medium","large","setMouseOverStartPoint","handleMouseOutStartPoint","PolygonPointView","stroke","startPointAttr","hitStrokeWidth","dragOpts","mouseOverStartPoint","onDragStart","onDragMove","radius","strokeWidth","dragOnTop","pointsize","pointstyle","PolygonModel","polygonlabels","PolygonLabelsModel","HtxPolygonLabels","fromName","isCW","linePoints","flatten","flat","toFlatten","findPolyOutline","left","acc","loc","right","top","bottom","inside","vs","j","xi","yi","xj","yj","readOnlyError","addPoint","closePoly","_addPoint","insertPoint","insertIdx","splice","canClose","p1","p2","_self$parent","perc_w","perc_h","perc_points","PolygonRegionModel","HtxPolygon","redraw","setDragMode","setActivePolygon","cancelBubble","resize","maxwidth","integer","selectedShape","safeReference","activePolygon","shapes","controlButton","controlButtonType","poly","updateIE","_ev$target","_setStageRef","ref","_deleteSelectedShape","destroy","shape","_addShape","onImageClick","_addRect","_addPoly","log","rectstrokecolor","wx","evt","offsetX","wy","offsetY","__addRect","localStates","rect","parseFloat","onResizeSize","dragMode","shapeModel","TransformerComponent","checkNode","transformer","getStage","selectedShapeName","detach","getLayer","batchDraw","selectedNode","findOne","attachTo","resizeEnabled","rotateEnabled","anchorSize","HtxImageView","handleDblClick","handleOnClick","handleStageMouseDown","addEventListener","updateDimensions","bind","_this$props","divStyle","position","onDblClick","onMouseDown","Image_TransformerComponent","HtxImage","Range","TextNode","data-position","overlap","keyNode","HtxTextNode","highlightStyle","charIndex","getRangeKey","getKey","getStyle","overlapItem","includes","reduceRight","TextNode_TextNode","UrlNode","wordWrap","EmojiNode","TextHighlight","dismissMouseUp","ranges","onMouseOverHighlightedWord","nl","char","arrOverlap","toConsumableArray","TextHighlight_EmojiNode","TextHighlight_UrlNode","enabled","getSelection","selectionContents","getRangeAt","cloneRange","cloneContents","virtualDiv","appendChild","elementsWithSup","getElementsByTagName","innerText","selection","createRange","startContainer","parentNode","dataset","endContainer","startContainerPosition","endContainerPosition","rangeObj","onTextHighlighted","event","mouseEvent","letterGroup","textCharIndex","rangeRenderer","isEmoji","getUrlNode","getEmojiNode","getLetterNode","lastRange","newText","getRange","emojiRegex","getNode","rangeCharIndex","getRanges","onMouseUp","onMouseEnter","onDoubleClick","TextModel","highlightStates","TextRegionModel","RegionState","localState","selectedString","outline","data-hint","HtxTextRegion","labelColor","markStyle","borderRadius","regionStates","TextRegion_RegionState","hover","selelectwithoutlabel","hidden","adjustselection","selectionenabled","_addRegion","params","HtxTextView","components_TextHighlight_TextHighlight","adjustSelection","renderRegion","HtxText","isCheckbox","ChoicesModel","ChoiceModel","HtxChoice","cStyle","Checkbox","checked","Radio","showinline","HtxChoices","Group","inline","flexWrap","grouped","TextAreaModel","TextAreaRegionModel","HtxTextAreaRegion","Message","allowSubmit","maxsubmissions","submissionsNum","showSubmit","num","setValue","addText","beforeSend","deleteText","HtxTextArea","ListItemModel","idx","setBG","setIdx","axis","lockaxis","elementvalue","elementtag","sortedhighlightcolor","setUpdate","vals","moveItems","oldIndex","newIndex","arrayMove","ranked","sort","weights","item_weight","ListModel","DragHandle","sortableHandle","isMobileDevice","orientation","navigator","userAgent","SortableText","SortableElement","classNames","image","alt","audio","userSelect","SortableList","SortableContainer","_ref3","HtxListView","_ref4","onSortEnd","HtxList","RankerItemModel","sortable","RankerModel","Ranker_DragHandle","Ranker_SortableText","HtxRankerView","Ranker_SortableList","HtxRanker","App","_Component","inherits","createClass","es_result","spin","currentCompletion","currentPrediction","isLoading","renderLoader","noTask","renderNothingToLabel","labeledSuccess","renderSuccess","Settings","index_module","Panel","Segment_Segment","description","Controls","components_Completions_Completions","components_Predictions_Predictions","SideColumn","Debug","renderNoCompletion","Boolean","location","hostname","TaskStore","identifierNumber","app","Utilities","UserStore","firstName","lastName","_hotkeys_map","Hotkey","addKey","keymaster","unbindAll","_i","_Object$keys","unbind","makeComb","combs","comb","hasOwnProperty","setScope","scope","SettingsModel","enablePanelHotkeys","togglePanelHotkeys","TimeTraveller","frozen","undoIdx","targetPath","createdIdx","isFrozen","frozenIdx","targetStore","snapshotDisposer","skipNextUndoState","freeze","addUndoState","ss","resolvePath","getEnv","onSnapshot","applySnapshot","set","reference","findRelations","nodesRelated","from_id","to_id","deserializeRelation","Normalization","normalizations","findNormalization","addNormalization","unshift","deleteNodeNormalization","unhighlightAll","RelationStore","normalizationStore","NormalizationStore","RegionStore","HtxObjectModel","reinitHistory","_updateServerState","sendUserGenerate","updatePersonalKey","_relationObj","cb","visitNode","objCompletion","toModel","completions","_deleteCompletion","flow","regenerator_default","mark","wrap","_context","prev","sent","t0","stop","destroyCompletion","addCompletion","createdCompletion","completionModel","config","expert","addSavedCompletion","created_ago","created_username","addPrediction","prediction","predictionModel","model_version","addPredictionItem","createdPrediction","unselectPrediction","deserializePrediction","API_URL","savedPredictions","unselectCompletion","addInitialPrediction","destroyPrediction","MAIN","TASKS","COMPLETIONS","CANCEL","PROJECTS","NEXT","EXPERT_INSRUCTIONS","Task","taskID","interfaces","CompletionStore","projectID","User","debug","alert","post","setDescription","loadTask","loadTaskAPI","_callee","_context2","Response","abrupt","was_cancelled","comp","pred","_context3","sendToServer","requestType","_callee2","responseCompletion","_context4","taskObject","loading","initializeStore","generatedCompletions","itemOfCompletion","iC","production","getData","taskData","editorAppConfig","expertData","debugEditor","editorInterfaces","preRender","getState","rootElement","getElementById","innerHTML","Sentiment","tasks","dataType","developmentEnv","viewCompletion","search","resp","templateDynamicData","resultCompletions","resultPredictions","enviroment","ProductionEnviroment","AppStore","Htx","render","components_App_App","serviceWorker","ready","registration","unregister","rewrite"],"mappings":"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","file":"static/js/main.2c2995d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Panel_container__2R_xD\",\"block\":\"Panel_block__1X9bV\",\"block__controls\":\"Panel_block__controls__2ry78\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Relations_block__3Cz1z\",\"section\":\"Relations_section__3C4rv\",\"section__blocks\":\"Relations_section__blocks__2kasV\",\"delete\":\"Relations_delete__gWmCY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"App_editor__3bBtU\",\"menu\":\"App_menu__153gP\",\"content\":\"App_content__Z7hhN\",\"common\":\"App_common__1MfP4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Hint_main__3s2gd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"Waveform_progress__1yKwx\",\"wave\":\"Waveform_wave__LNRQj\",\"menu\":\"Waveform_menu__2vXr0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Segment_block__bQlv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Entities_item__3DgIf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"TextHighlight_block__20XLR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"state\":\"TextRegion_state__3qlu-\"};","module.exports = __webpack_public_path__ + \"static/media/config.ba846c36.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.c5233796.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.66767299.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.0e2a1e7f.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.2a6054fe.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.bb22cd0c.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.32729adf.xml\";","module.exports = __webpack_public_path__ + \"static/media/config.1890026d.xml\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"play\":\"AudioPlus_play__FC1FU\"};","/**\n * Class for register View\n */\nclass _Registry {\n  constructor() {\n    this.tags = [];\n    this.models = {};\n    this.views = {};\n    this.views_models = {};\n  }\n\n  addTag(tag, model, view) {\n    this.tags.push(tag);\n    this.models[tag] = model;\n    this.views[tag] = view;\n    this.views_models[model.name] = view;\n  }\n\n  modelsArr() {\n    return Object.values(this.models);\n  }\n\n  getViewByModel(modelName) {\n    const view = this.views_models[modelName];\n\n    if (!view) throw new Error(\"No view for model: \" + modelName);\n\n    return view;\n  }\n\n  getViewByTag(tag) {\n    return this.views[tag];\n  }\n\n  /**\n   * Get model\n   * @param {*} tag\n   */\n  getModelByTag(tag) {\n    const model = this.models[tag];\n\n    if (!model) {\n      const models = Object.keys(this.models);\n      throw new Error(\"No model registered for tag: \" + tag + \"\\nAvailable models:\\n\\t\" + models.join(\"\\n\\t\"));\n    }\n\n    return model;\n  }\n}\n\nconst Registry = new _Registry();\n\nexport default Registry;\n","const handleResponse = res => {\n  if (res.status !== 200 || res.status !== 201) {\n    return res;\n  } else {\n    return res.json();\n  }\n};\n\nconst wrapperRequest = (url, method, headers, body) => {\n  return window\n    .fetch(url, {\n      method: method,\n      headers: headers,\n      credentials: \"include\",\n      body: body,\n    })\n    .then(response => handleResponse(response));\n};\n\nconst fetcher = url => {\n  return wrapperRequest(url, \"GET\", { Accept: \"application/json\" });\n};\n\nconst poster = (url, body) => {\n  return wrapperRequest(url, \"POST\", { Accept: \"application/json\", \"Content-Type\": \"application/json\" }, body);\n};\n\nconst patch = (url, body) => {\n  return wrapperRequest(\n    url,\n    \"PATCH\",\n    {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body,\n  );\n};\n\nconst remover = (url, body) => {\n  return wrapperRequest(\n    url,\n    \"DELETE\",\n    {\n      \"Content-Type\": \"application/json\",\n    },\n    body,\n  );\n};\n\nexport default { fetcher, poster, remover, patch };\n","import nanoid from \"nanoid\";\n\n/**\n * Unique hash generator\n * @param {number} lgth\n */\nexport function guidGenerator(lgth) {\n  let uniqueID = nanoid(10);\n\n  if (lgth) {\n    uniqueID = nanoid(lgth);\n  }\n\n  return uniqueID;\n}\n","import { getType, getSnapshot } from \"mobx-state-tree\";\nimport { guidGenerator } from \"../utils/unique\";\n\n/**\n * TODO: refactor\n */\nexport { guidGenerator };\n\n/**\n * Helper function to detect HTX Component\n * @param {any} component\n * @param {string} name\n * @returns {boolean}\n */\nexport function isHtx(component, name) {\n  return typeof component.type === \"function\" && component.type.name === \"Htx\" + name;\n}\n\n/**\n * Clone node with new ID\n * @param {*} node\n */\nexport function cloneNode(node) {\n  const snapshot = getSnapshot(node);\n  const snapshotRandomId = getType(node).create({\n    ...snapshot,\n    id: guidGenerator(),\n  });\n  return snapshotRandomId;\n}\n\n/**\n *\n * @param {*} fromModel\n */\nexport function restoreNewsnapshot(fromModel) {\n  const snapshot = getSnapshot(fromModel);\n\n  /**\n   * Need to modify ID\n   */\n  const modifySnapshot = getType(fromModel).create({\n    ...snapshot,\n    id: guidGenerator(),\n  });\n\n  /**\n   * Update state\n   */\n  return modifySnapshot;\n}\n","import React from \"react\";\nimport { getType, getParentOfType } from \"mobx-state-tree\";\nimport parse5 from \"parse5\";\n\nimport Registry from \"./Registry\";\nimport { guidGenerator } from \"./Helpers\";\n\n/**\n * Clone React Tree\n * @param {*} items\n * @param {*} attrs\n */\nfunction cloneReactTree(items, attrs) {\n  let clone = null;\n  clone = function(children) {\n    const res = [];\n\n    React.Children.forEach(children, function(child) {\n      let el;\n\n      if (child.props) {\n        let moreProps = {};\n\n        if (typeof attrs === \"function\") {\n          moreProps = attrs(child);\n        } else if (typeof attrs === \"object\") {\n          moreProps = attrs;\n        }\n\n        el = React.cloneElement(child, moreProps, clone(child.props.children));\n      } else {\n        el = child;\n      }\n\n      res.push(el);\n    });\n\n    return res;\n  };\n\n  return clone(items);\n}\n\n/**\n * Function to convert CSS string to object\n * @param {string} style\n * @returns {object}\n */\nfunction cssConverter(style) {\n  let result = {},\n    attributes = style.split(\";\"),\n    firstIndexOfColon,\n    i,\n    key,\n    value;\n\n  for (i = 0; i < attributes.length; i++) {\n    firstIndexOfColon = attributes[i].indexOf(\":\");\n    key = attributes[i].substring(0, firstIndexOfColon);\n    value = attributes[i].substring(firstIndexOfColon + 1);\n\n    key = key.replace(/ /g, \"\");\n    if (key.length < 1) {\n      continue;\n    }\n\n    if (value[0] === \" \") {\n      value = value.substring(1);\n    }\n\n    if (value[value.length - 1] === \" \") {\n      value = value.substring(0, value.length - 1);\n    }\n\n    var ukey = key.replace(/(-.)/g, x => x[1].toUpperCase());\n\n    result[ukey] = value;\n  }\n\n  return result;\n}\n\n/**\n *\n * @param {*} attrs\n */\nfunction attrsToProps(attrs) {\n  const props = {};\n\n  if (!attrs) return props;\n\n  for (let attr of attrs) {\n    props[attr.name] = attr.value;\n  }\n\n  // if (props[\"style\"]) {\n  //     props[\"style\"] = cssConverter(props[\"style\"]);\n  // }\n\n  return props;\n}\n\n/**\n *\n * @param {*} html\n */\nfunction treeToModel(html) {\n  /**\n   * Remove all line breaks from a string\n   * @param {string}\n   * @returns {string}\n   */\n  function removeAllBreaks(data) {\n    return data.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n  }\n\n  /**\n   * Edit all self closing tags from XML View\n   * TODO: Fix bug: if the value of <Choice /> or another tag contains \"/>\" function return error\n   * @param {string} data\n   * @returns {string}\n   */\n  function editSelfClosingTags(data) {\n    let split = data.split(\"/>\");\n    let newData = \"\";\n\n    for (let i = 0; i < split.length - 1; i++) {\n      let edsplit = split[i].split(\"<\");\n      newData += split[i] + \"></\" + edsplit[edsplit.length - 1].split(\" \")[0] + \">\";\n    }\n\n    return newData + split[split.length - 1];\n  }\n\n  /**\n   * Generate new node\n   * @param {object} node\n   */\n  function addNode(node) {\n    if (!node) return null;\n\n    const res = [];\n\n    for (let chld of node.childNodes) {\n      if (chld.nodeName !== \"#text\") {\n        const data = buildData(chld);\n        const children = addNode(chld);\n\n        if (children) {\n          if (typeof children === \"string\") data[\"value\"] = children;\n          else data.children = children;\n        }\n\n        res.push(data);\n      }\n    }\n\n    return res.length === 0 ? null : res;\n  }\n\n  /**\n   * Generate obj with main data\n   */\n  function buildData(node) {\n    const data = attrsToProps(node.attrs);\n\n    /**\n     * Generation id of node\n     */\n    data[\"id\"] = guidGenerator();\n\n    /**\n     * Build type name\n     */\n    data[\"type\"] = node.nodeName;\n\n    /**\n     * Convert node of Tree to boolean value\n     * Input: XML Configuration\n     * Output: Node Tree\n     * Exception: attr \"value\"\n     */\n    Object.keys(data).forEach(function(item) {\n      if (item !== \"value\" && (this[item] === \"true\" || this[item] === \"false\")) {\n        data[item] = JSON.parse(this[item]);\n      }\n    }, data);\n\n    /**\n     * Convert to image type\n     */\n    if (data[\"type\"] === \"img\") data[\"type\"] = \"image\";\n\n    return data;\n  }\n\n  const htmlWithotBreaks = removeAllBreaks(html);\n  const htmlSelfClosingTags = editSelfClosingTags(htmlWithotBreaks);\n  const document = parse5.parseFragment(htmlSelfClosingTags);\n  const root = buildData(document.childNodes[0]);\n  root.children = addNode(document.childNodes[0]);\n  return root;\n}\n\n/**\n * Render items of tree\n * @param {*} el\n */\nfunction renderItem(el) {\n  const View = Registry.getViewByModel(getType(el).name);\n\n  if (!View) {\n    throw new Error(\"No view for model:\" + getType(el).name);\n  }\n\n  return <View key={guidGenerator()} item={el} />;\n}\n\n/**\n *\n * @param {*} item\n */\nfunction renderChildren(item) {\n  if (item && item.children && item.children.length) {\n    return item.children.map(el => {\n      return renderItem(el);\n    });\n  } else {\n    return null;\n  }\n}\n\n/**\n *\n * @param {*} name\n * @param {*} tree\n */\nfunction findInterface(name, tree) {\n  let fn;\n  fn = function(node) {\n    if (getType(node).name === name) return node;\n\n    if (node.children) {\n      for (let chld of node.children) {\n        const res = fn(chld);\n        if (res) return res;\n      }\n    }\n  };\n\n  return fn(tree);\n}\n\n/**\n *\n * @param {*} obj\n * @param {*} classes\n */\nfunction findParentOfType(obj, classes) {\n  for (let c of classes) {\n    try {\n      const p = getParentOfType(obj, c);\n      if (p) return p;\n    } catch (err) {}\n  }\n\n  return null;\n}\n\n/**\n *\n * @param {*} obj\n * @param {*} classes\n */\nfunction filterChildrenOfType(obj, classes) {\n  const res = [];\n\n  let fn;\n  fn = function(node) {\n    for (let c of classes) {\n      if (getType(node).name === c) res.push(node);\n    }\n\n    if (node.children) {\n      for (let chld of node.children) {\n        fn(chld);\n      }\n    }\n  };\n\n  fn(obj);\n\n  return res;\n}\n\nexport default {\n  cloneReactTree,\n  renderItem,\n  renderChildren,\n  treeToModel,\n  findInterface,\n  findParentOfType,\n  filterChildrenOfType,\n  cssConverter,\n};\n","/**\n * Internal helper to check if parameter is a string\n * @param {*} value\n * @returns {boolean}\n */\nexport const isString = value => {\n  return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Internal helper to check if string is empty\n * @param {*} value\n * @returns {boolean}\n */\nexport const isStringEmpty = value => {\n  if (!isString(value)) {\n    return false;\n  }\n\n  return value.length === 0;\n};\n\n/**\n * Internal helper to check if string is JSON\n * @param {string} value\n * @returns {boolean}\n */\nexport const isStringJSON = value => {\n  if (isString(value)) {\n    try {\n      JSON.parse(value);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Check if text is url\n * @param {*} i\n * @param {*} text\n */\nexport function getUrl(i, text) {\n  const stringToTest = text.slice(i);\n  const myRegexp = /^(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/g;\n  const match = myRegexp.exec(stringToTest);\n\n  return match && match.length ? match[1] : \"\";\n}\n\n/**\n * Convert MS to Time String\n * Example: 2000 -> 00:00:02\n * @param {number} ms\n * @returns {string}\n */\nexport function toTimeString(ms) {\n  if (typeof ms === \"number\") {\n    return new Date(ms).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/)[0];\n  }\n}\n","let colorNames = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgrey: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370d8\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#d87093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\",\n};\n\n/**\n * Convert HEX to RGBA\n * @param {string} hex 3 digits + # or 6 digits + #\n * @param {number?} opacity From 0 to 1\n */\nexport function hexToRGBA(hex, opacity) {\n  let r = 0,\n    g = 0,\n    b = 0;\n\n  let a = 0.3;\n\n  if (opacity && typeof parseInt(opacity) === \"number\") {\n    a = opacity;\n  }\n\n  /**\n   * If HEX = 3\n   */\n  if (hex && hex.length === 4) {\n    r = \"0x\" + hex[1] + hex[1];\n    g = \"0x\" + hex[2] + hex[2];\n    b = \"0x\" + hex[3] + hex[3];\n\n    /**\n     * If HEX = 6\n     */\n  } else if (hex && hex.length === 7) {\n    r = \"0x\" + hex[1] + hex[2];\n    g = \"0x\" + hex[3] + hex[4];\n    b = \"0x\" + hex[5] + hex[6];\n  }\n\n  const result = `rgba(${+r}, ${+g}, ${+b}, ${a})`;\n\n  return result;\n}\n\n/**\n * Color to RGBA\n * @param {*} value\n */\nexport function colorToRGBA(value, alpha) {\n  if (typeof value === \"string\" && typeof colorNames[value.toLowerCase()] !== undefined) {\n    const hexColor = colorNames[value.toLowerCase()];\n    return hexToRGBA(hexColor, alpha);\n  }\n\n  return value;\n}\n\n/**\n * Convert color to RGB(A)\n * @param {*} value\n * @param {number} alpha\n */\nexport function convertToRGBA(value, alpha) {\n  if (value.charAt(0) === \"#\") {\n    return hexToRGBA(value, alpha);\n  } else {\n    return colorToRGBA(value, alpha);\n  }\n}\n\n/**\n * Convert string to HEX color\n * @param {string} str\n */\nexport function stringToColor(str) {\n  let hash = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = \"#\";\n\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xff;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\n/**\n * Change alpha channel of RGBA\n * @param {string} rgba\n * @param {number} alpha from 0 to 1\n */\nexport function rgbaChangeAlpha(rgba, alpha) {\n  return rgba.replace(/[\\d\\.]+\\)$/g, `${alpha})`);\n}\n","function checkISO(value) {\n  let regExpISO = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/;\n\n  return regExpISO.test(value);\n}\n\n/**\n * Helper function to convert ms -> HHMMSS\n * @param {number} ms\n * @returns {string}\n */\nexport function msToHMS(ms) {\n  // 1- Convert to seconds:\n  var seconds = ms / 1000;\n  // 2- Extract hours:\n  var hours = parseInt(seconds / 3600); // 3,600 seconds in 1 hour\n  seconds = seconds % 3600; // seconds remaining after extracting hours\n  // 3- Extract minutes:\n  var minutes = parseInt(seconds / 60); // 60 seconds in 1 minute\n  // 4- Keep only seconds not extracted to minutes:\n  seconds = Math.floor(seconds); // % 60;\n\n  return hours + \":\" + minutes + \":\" + seconds;\n}\n\n/**\n * Helper function to pretty date\n */\nexport function prettyDate(time) {\n  if (typeof time !== \"string\" && !checkISO(time)) return;\n\n  let date = new Date((time || \"\").replace(/-/g, \"/\").replace(/[TZ]/g, \" \")),\n    diff = (new Date().getTime() - date.getTime()) / 1000,\n    day_diff = Math.floor(diff / 86400);\n\n  if (isNaN(day_diff) || day_diff < 0) return;\n\n  return (\n    (day_diff === 0 &&\n      ((diff < 60 && \"just now\") ||\n        (diff < 120 && \"1 minute ago\") ||\n        (diff < 3600 && Math.floor(diff / 60) + \" minutes ago\") ||\n        (diff < 7200 && \"1 hour ago\") ||\n        (diff < 86400 && Math.floor(diff / 3600) + \" hours ago\"))) ||\n    (day_diff === 1 && \"Yesterday\") ||\n    (day_diff < 7 && day_diff + \" days ago\") ||\n    (day_diff < 31 && Math.ceil(day_diff / 7) + \" weeks ago\") ||\n    day_diff + \" days ago\"\n  );\n}\n\n/**\n * Helper function to get current timezone\n */\nexport function currentISODate() {\n  let tzOffest = new Date().getTimezoneOffset() * 60000;\n  let localISOTime = new Date(Date.now() - tzOffest).toISOString().slice(0, -1);\n\n  return localISOTime;\n}\n","import * as Checkers from \"./utilities\";\nimport * as Colors from \"./colors\";\nimport * as UDate from \"./date\";\nimport { guidGenerator } from \"./unique\";\nimport { debounce } from \"./debounce\";\nimport { styleToProp } from \"./styles\";\n\nexport default { Checkers, Colors, UDate, guidGenerator, debounce, styleToProp };\n","/**\n * Returns a function, that, as long as it continues to be invoked,\n * will not be triggered. The function will be called after it\n * stops being called for N milliseconds. If `immediate` is passed,\n * trigger the function on the leading edge, instead of the trailing.\n *\n * @param {function} func\n * @param {number} wait\n * @param {boolean} immediate\n */\nexport function debounce(func, wait, immediate) {\n  let timeout;\n\n  return function() {\n    const context = this,\n      args = arguments;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n","/**\n * Parses a string of inline styles into a JavaScript object with casing for React\n *\n * @see TemplateEngine via MIT Licensed https://github.com/NervJS/taro/blob/master/packages/taro-components-rn/src/utils/index.ts\n *\n * @param {string} styles\n * @returns {Object}\n */\nexport function styleToProp(styles) {\n  if (!styles) return null;\n  return styles\n    .split(\";\")\n    .filter(style => style.split(\":\")[0] && style.split(\":\")[1])\n    .map(style => [\n      style\n        .split(\":\")[0]\n        .trim()\n        .replace(/-./g, c => c.substr(1).toUpperCase()),\n      style\n        .split(\":\")\n        .slice(1)\n        .join(\":\")\n        .trim(),\n    ])\n    .reduce(\n      (styleObj, style) => ({\n        ...styleObj,\n        [style[0]]: style[1],\n      }),\n      {},\n    );\n}\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { List } from \"semantic-ui-react\";\nimport { Card, Button, Icon, Tooltip, Badge } from \"antd\";\n\nimport Utils from \"../../utils\";\nimport styles from \"./Completions.module.scss\";\n\nconst Completion = observer(({ item, store }) => {\n  let removeHoney = () => (\n    <Button\n      type=\"primary\"\n      onClick={ev => {\n        ev.preventDefault();\n        item.removeHoneypot();\n      }}\n    >\n      Ground Truth\n    </Button>\n  );\n\n  let setHoney = () => (\n    <Button\n      type=\"primary\"\n      ghost={true}\n      onClick={ev => {\n        ev.preventDefault();\n        item.setHoneypot();\n      }}\n    >\n      Ground Truth\n    </Button>\n  );\n\n  /**\n   * Default badge for saved completions\n   */\n  let badge = <Badge status=\"default\" />;\n\n  /**\n   *\n   */\n  let completionID;\n\n  /**\n   * Title of card\n   */\n  if (item.userGenerate && !item.sentUserGenerate) {\n    completionID = \"New Completion\";\n  } else {\n    if (item.pk) {\n      completionID = `ID ${item.pk}`;\n    } else if (item.id) {\n      completionID = `ID ${item.id}`;\n    }\n  }\n\n  /**\n   * Badge for processing of user generate completion\n   */\n  if (item.userGenerate) {\n    badge = <Badge status=\"processing\" />;\n  }\n\n  /**\n   * Badge for complete of user generate completion\n   */\n  if (item.userGenerate && item.sentUserGenerate) {\n    badge = <Badge status=\"success\" />;\n  }\n\n  return (\n    <List.Item\n      className={item.selected ? `${styles.completion} ${styles.completion_selected}` : styles.completion}\n      onClick={ev => {\n        !item.selected && store.completionStore.selectCompletion(item.id);\n      }}\n    >\n      <List.Content>\n        <List.Header as=\"a\" style={{ marginBottom: \"1em\" }}>\n          {badge}\n          {completionID}\n        </List.Header>\n\n        <List.Description as=\"a\">\n          Created\n          <i>{item.createdAgo ? ` ${item.createdAgo} ago` : ` ${Utils.UDate.prettyDate(item.createdDate)}`}</i>\n          {item.createdBy ? ` by ${item.createdBy}` : null}\n        </List.Description>\n\n        {item.selected && (\n          <div className={styles.buttons}>\n            <Tooltip placement=\"topLeft\" title=\"Delete selected completion\">\n              <Button\n                type=\"danger\"\n                onClick={ev => {\n                  ev.preventDefault();\n                  item.store.deleteCompletion(item);\n                }}\n              >\n                Delete\n              </Button>\n            </Tooltip>\n\n            {item.honeypot ? removeHoney() : setHoney()}\n          </div>\n        )}\n      </List.Content>\n    </List.Item>\n  );\n});\n\nclass Completions extends Component {\n  render() {\n    const { store } = this.props;\n\n    let content = [];\n    let title = (\n      <div className={styles.title}>\n        <h3>Completions</h3>\n        <Tooltip placement=\"topLeft\" title=\"Add new completion\">\n          <Button\n            onClick={ev => {\n              ev.preventDefault();\n              store.completionStore.addUserCompletion();\n            }}\n          >\n            <Icon type=\"plus\" />\n          </Button>\n        </Tooltip>\n      </div>\n    );\n\n    store.completionStore.savedCompletions.forEach(c => {\n      if (c) {\n        content.push(<Completion key={c.pk} item={c} store={store} />);\n      }\n    });\n\n    return (\n      <Card title={title} bodyStyle={{ padding: \"0\", paddingTop: \"1px\" }}>\n        <List divided relaxed>\n          {store.completionStore.savedCompletions ? content : <p>No completions submitted yet</p>}\n        </List>\n      </Card>\n    );\n  }\n}\n\nexport default observer(Completions);\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Card } from \"antd\";\nimport { List } from \"semantic-ui-react\";\nimport Utils from \"../../utils\";\nimport styles from \"../Completions/Completions.module.scss\";\n\nconst Prediction = observer(({ item, store }) => {\n  return (\n    <List.Item\n      className={item.selected ? `${styles.completion} ${styles.completion_selected}` : styles.completion}\n      onClick={ev => {\n        !item.selected && store.completionStore.selectPrediction(item.id);\n      }}\n    >\n      <List.Content>\n        <List.Header as=\"a\" style={{ marginBottom: \"1em\" }}>\n          {item.createdBy ? `Model (v. ${item.createdBy})` : null}\n        </List.Header>\n        <List.Description as=\"a\" style={{ marginBottom: \"1em\" }}>\n          Created\n          <i>{item.createdAgo ? ` ${item.createdAgo} ago` : ` ${Utils.UDate.prettyDate(item.createdDate)}`}</i>\n        </List.Description>\n      </List.Content>\n    </List.Item>\n  );\n});\n\nclass Predictions extends Component {\n  render() {\n    const { store } = this.props;\n\n    let content = [];\n\n    store.completionStore.predictions &&\n      store.completionStore.predictions.map(predict => {\n        if (predict) {\n          content.push(<Prediction key={predict.pk} item={predict} store={store} />);\n        }\n      });\n\n    return (\n      <Card title=\"Predictions\" bodyStyle={{ padding: \"0\" }}>\n        <List>\n          {store.completionStore.predictions && store.completionStore.predictions.length ? (\n            content\n          ) : (\n            <List.Item>\n              <List.Description>\n                <div style={{ padding: \"1em 24px\" }}>No predictions</div>\n              </List.Description>\n            </List.Item>\n          )}\n        </List>\n      </Card>\n    );\n  }\n}\n\nexport default observer(Predictions);\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport styles from \"./Hint.module.scss\";\n\n/**\n * Hint Component\n * @param {object} style\n * @param {ant} children\n */\nexport default class Hint extends Component {\n  render() {\n    let style;\n    let localClass = `${styles.main}`;\n\n    if (this.props.style) style = this.props.style;\n\n    if (this.props.className) {\n      localClass = `${styles.main} ${this.props.className}`;\n    }\n\n    return (\n      <sup data-copy={this.props.copy} className={localClass} style={style}>\n        {this.props.children}\n      </sup>\n    );\n  }\n}\n\nHint.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  copy: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object]),\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button } from \"antd\";\n\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Controls.module.scss\";\n\nexport default inject(\"store\")(\n  observer(({ store }) => {\n    /**\n     * Buttons of Controls\n     */\n    let buttons = {\n      skip: \"\",\n      update: \"\",\n      submit: \"\",\n    };\n\n    const { userGenerate, update, sentUserGenerate } = store.completionStore.selected;\n    const { enableHotkeys, enableTooltips } = store.settings;\n\n    /**\n     * Task information\n     */\n    let taskInformation;\n    if (store.task) {\n      taskInformation = <h4 className={styles.task}>Task ID: {store.task.id}</h4>;\n    }\n\n    /**\n     * Hotkeys\n     */\n    if (enableHotkeys && enableTooltips) {\n      buttons.submit = <Hint> [ Ctrl+Enter ]</Hint>;\n      buttons.skip = <Hint> [ Ctrl+Space ]</Hint>;\n      buttons.update = <Hint> [ Alt+Enter] </Hint>;\n    }\n\n    let skipButton;\n    let updateButton;\n    let submitButton;\n\n    /**\n     * Check for Predict Menu\n     */\n    if (!store.completionStore.predictSelect || store.explore) {\n      if (store.hasInterface(\"skip\")) {\n        skipButton = (\n          <Button type=\"ghost\" onClick={store.skipTask} className={styles.skip}>\n            Skip {buttons.skip}\n          </Button>\n        );\n      }\n\n      if ((userGenerate && !sentUserGenerate) || (store.explore && !userGenerate && store.hasInterface(\"submit\"))) {\n        submitButton = (\n          <Button type=\"primary\" icon=\"check\" onClick={store.sendTask} className={styles.submit}>\n            Submit {buttons.submit}\n          </Button>\n        );\n      }\n\n      if ((userGenerate && sentUserGenerate) || (!userGenerate && store.hasInterface(\"update\"))) {\n        updateButton = (\n          <Button type=\"primary\" icon=\"rollback\" onClick={store.updateTask}>\n            Update {buttons.update}\n          </Button>\n        );\n      }\n    }\n\n    let content = (\n      <div className={styles.block}>\n        <div className={styles.wrapper}>\n          <div className={styles.container}>\n            {skipButton}\n            {updateButton}\n            {submitButton}\n          </div>\n          {taskInformation}\n        </div>\n      </div>\n    );\n\n    return (!store.completionStore.predictSelect || store.explore) && content;\n  }),\n);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport styles from \"./Segment.module.scss\";\n\n/**\n * Segment Component\n */\nexport default class Segment extends React.Component {\n  render() {\n    return <div className={styles.block}>{this.props.children}</div>;\n  }\n}\n\nSegment.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Icon } from \"antd\";\n\nimport styles from \"./Panel.module.scss\";\nimport Hint from \"../Hint/Hint\";\nimport Segment from \"../Segment/Segment\";\n\n/**\n * Panel component with buttons:\n * Undo\n * Redo\n * Reset\n * Show Instructions\n * Settings\n */\nexport default observer(({ store }) => {\n  const { history } = store.completionStore.selected;\n\n  return (\n    <div className={styles.container}>\n      <div className={`${styles.block} ${styles.block__controls}`}>\n        <Button\n          type=\"ghost\"\n          icon=\"undo\"\n          onClick={ev => {\n            history && history.canUndo && history.undo();\n            ev.preventDefault();\n          }}\n        >\n          Undo\n          {store.settings.enableHotkeys && store.settings.enableTooltips && <Hint>[ Ctrl+z ]</Hint>}\n        </Button>\n        <Button\n          type=\"ghost\"\n          icon=\"redo\"\n          onClick={ev => {\n            history && history.canRedo && history.redo();\n            ev.preventDefault();\n          }}\n        >\n          Redo\n        </Button>\n        <Button\n          type=\"ghost\"\n          icon=\"rest\"\n          onClick={ev => {\n            history && history.reset();\n          }}\n        >\n          Reset\n        </Button>\n        {store.setPrelabeling && (\n          <Button\n            style={{ display: \"none\" }}\n            onClick={ev => {\n              store.resetPrelabeling();\n            }}\n          >\n            {\" \"}\n            Reset Prelabeling\n          </Button>\n        )}\n      </div>\n\n      <div className={styles.block}>\n        {store.showingDescription && (\n          <Button\n            type=\"primary\"\n            onClick={ev => {\n              store.closeDescription();\n            }}\n          >\n            Hide Instructions\n          </Button>\n        )}\n        {!store.showingDescription && (\n          <Button\n            type=\"primary\"\n            onClick={ev => {\n              store.openDescription();\n            }}\n          >\n            Show Instructions\n          </Button>\n        )}\n\n        <Button\n          type=\"dashed\"\n          icon=\"setting\"\n          onClick={ev => {\n            store.toggleSettings();\n            ev.preventDefault();\n            return false;\n          }}\n        />\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Modal, Checkbox, Tabs } from \"antd\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(({ store }) => {\n  return (\n    <Modal\n      visible={store.showingSettings}\n      title=\"Settings\"\n      bodyStyle={{ paddingTop: \"0\" }}\n      footer=\"\"\n      onCancel={store.toggleSettings}\n    >\n      <Tabs defaultActiveKey=\"1\">\n        <Tabs.TabPane tab=\"Hotkeys\" key=\"1\">\n          <Checkbox\n            value=\"Enable labeling hotkeys\"\n            defaultChecked={store.settings.enableHotkeys}\n            onChange={() => {\n              store.settings.toggleHotkeys();\n            }}\n          >\n            Enable labeling hotkeys\n          </Checkbox>\n          <br />\n          <Checkbox\n            value=\"Show tooltips\"\n            defaultChecked={store.settings.enableTooltips}\n            onChange={() => {\n              store.settings.toggleTooltips();\n            }}\n          >\n            Show tooltips\n          </Checkbox>\n        </Tabs.TabPane>\n      </Tabs>\n    </Modal>\n  );\n});\n","import React, { Component } from \"react\";\nimport { Form, Button, Header } from \"semantic-ui-react\";\n\nimport { observer } from \"mobx-react\";\n\nclass DebugComponent extends Component {\n  state = { res: null };\n\n  render() {\n    const self = this;\n    const { store } = this.props;\n    const completion = store.completionStore.selected;\n\n    return (\n      <div>\n        <br />\n        <Header>Debug</Header>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: JSON.stringify(store.completionStore.selected.toJSON()) });\n          }}\n        >\n          Serialize whole tree\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: JSON.stringify(store.completionStore.selected.serializeCompletion()) });\n          }}\n        >\n          Seriealize results tree\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            if (self.state.res) completion.deserializeCompletion(JSON.parse(self.state.res));\n          }}\n        >\n          Load Serialized Results\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            const c = store.completionStore.addInitialCompletion();\n            store.completionStore.selectCompletion(c.id);\n\n            if (self.state.res) c.deserializeCompletion(JSON.parse(self.state.res));\n            // this.setState.res;\n          }}\n        >\n          Load As New Completion\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            this.setState({ res: store.task.data });\n          }}\n        >\n          Task data\n        </Button>\n\n        <Button\n          basic\n          onClick={ev => {\n            // this.setState.res;\n            const data = JSON.parse(self.state.res);\n            const task = {\n              id: data[\"id\"],\n              project: 2,\n              data: JSON.stringify(data),\n            };\n\n            store.resetState();\n            store.addTask(task);\n            store.addGeneratedCompletion(task);\n            store.markLoading(false);\n\n            if (store.completionStore.selected)\n              store.completionStore.selected.traverseTree(node => node.updateValue && node.updateValue(self));\n          }}\n        >\n          Simulate Loading Task\n        </Button>\n\n        <br />\n        <br />\n        <Form>\n          <Form.TextArea\n            value={this.state.res}\n            className=\"is-search\"\n            // label={item.label}\n            onChange={ev => {\n              this.setState({ res: ev.target.value });\n            }}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default observer(DebugComponent);\n","import React, { Component, Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { getType, getRoot } from \"mobx-state-tree\";\nimport { Icon } from \"antd\";\n\nconst Node = observer(({ node }) => {\n  const click = ev => {\n    ev.preventDefault();\n    getRoot(node).completionStore.selected.regionStore.unselectAll();\n    node.selectRegion();\n\n    return false;\n  };\n\n  const style = {\n    color: \"black\",\n    textDecorationLine: \"underline\",\n    textDecorationStyle: \"dotted\",\n  };\n\n  if (getType(node).name === \"TextRegionModel\") {\n    return (\n      <div>\n        <Icon type=\"font-colors\" />\n        Text &nbsp;\n        <span style={{ color: \"#5a5a5a\" }}>{node.text}</span>\n      </div>\n    );\n  }\n\n  if (getType(node).name === \"AudioRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} style={style}>\n          <i className=\"microphone icon\" />\n          Audio &nbsp;{node.start.toFixed(2)} - {node.end.toFixed(2)}\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"TextAreaRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} style={style}>\n          <i className=\"i cursor icon\" />\n          Input &nbsp;<span style={{ color: \"#5a5a5a\" }}>{node._value}</span>\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"RectRegionModel\") {\n    const w = node.width * node.scaleX;\n    const y = node.height * node.scaleY;\n    return (\n      <p>\n        <a href=\"\" onClick={click} style={style}>\n          <i className=\"expand icon\" />\n          Rectangle &nbsp;{w.toFixed(2)} x {y.toFixed(2)}\n        </a>\n      </p>\n    );\n  }\n\n  if (getType(node).name === \"PolygonRegionModel\") {\n    return (\n      <p>\n        <a href=\"\" onClick={click} style={style}>\n          <i className=\"i object ungroup outline icon\" />\n          Polygon\n        </a>\n      </p>\n    );\n  }\n});\n\nconst NodeMinimal = ({ node }) => {\n  if (getType(node).name == \"TextRegionModel\") {\n    return (\n      <Fragment>\n        <Icon type=\"font-colors\" /> Text\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name == \"RectRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"expand icon\" />\n        Rectangle\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name == \"AudioRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"microphone icon\" />\n        Audio\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name == \"TextAreaRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i cursor icon\" />\n        Input\n      </Fragment>\n    );\n  }\n\n  if (getType(node).name == \"PolygonRegionModel\") {\n    return (\n      <Fragment>\n        <i className=\"i object ungroup outline icon\" />\n        Polygon\n      </Fragment>\n    );\n  }\n};\n\nexport { Node, NodeMinimal };\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { isValidReference } from \"mobx-state-tree\";\nimport { Icon } from \"antd\";\n\nimport { NodeMinimal } from \"../Node\";\nimport styles from \"./Relations.module.scss\";\n\n/**\n * Relation Component\n *\n * Shows the relationship between two selected items\n */\nconst Relation = ({ store, rl }) => {\n  if (!isValidReference(() => rl.node1) || !isValidReference(() => rl.node2)) {\n    return null;\n  }\n\n  return (\n    <div className={styles.block}>\n      <div\n        className={styles.section}\n        onMouseOver={() => {\n          rl.toggleHighlight();\n        }}\n        onMouseOut={() => {\n          rl.toggleHighlight();\n        }}\n      >\n        <div className={styles.section__blocks}>\n          <div>\n            <NodeMinimal node={rl.node1} />\n          </div>\n          <Icon type=\"arrow-right\" />\n          <div>\n            <NodeMinimal node={rl.node2} />\n          </div>\n        </div>\n      </div>\n      <a\n        href=\"#\"\n        className={styles.delete}\n        onClick={() => {\n          store.deleteRelation(rl);\n          return false;\n        }}\n      >\n        <Icon type=\"delete\" />\n      </a>\n    </div>\n  );\n};\n\nexport default observer(({ store }) => {\n  const completion = store.completionStore.selected;\n  const { relations } = completion.relationStore;\n\n  return (\n    <Fragment>\n      <h4>Relations ({relations.length})</h4>\n\n      {!relations.length && <p>No Relations added yet</p>}\n\n      {completion.relationStore.relations.map(rl => (\n        <Relation store={completion.relationStore} rl={rl} />\n      ))}\n    </Fragment>\n  );\n});\n","import React, { Component, Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Typography } from \"antd\";\n\nimport { Node, NodeMinimal } from \"../Node\";\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Entities.module.scss\";\n\nexport default observer(({ store, regionStore }) => {\n  const { regions } = regionStore;\n\n  let buttonRemove = () => {\n    return (\n      <Button\n        type=\"link\"\n        style={{ paddingLeft: 0 }}\n        onClick={ev => {\n          store.completionStore.selected.deleteAllRegions();\n          ev.preventDefault();\n        }}\n      >\n        Remove all\n        {regions.length > 0 && store.settings.enableHotkeys && store.settings.enableTooltips && (\n          <Hint>[ Ctrl+bksp ]</Hint>\n        )}\n      </Button>\n    );\n  };\n\n  return (\n    <div>\n      <h4>Entities ({regions.length})</h4>\n      {regions.length > 0 && buttonRemove()}\n      {!regions.length && <p>No Entitied added yet</p>}\n      <ul>\n        {regions.map(region => (\n          <li\n            key={region.id}\n            className={styles.item}\n            onMouseOver={() => {\n              region.toggleHightlight();\n            }}\n            onMouseOut={() => {\n              region.toggleHightlight();\n            }}\n          >\n            <Node node={region} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import React, { Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { getType } from \"mobx-state-tree\";\nimport { Input, Form } from \"semantic-ui-react\";\nimport { Icon, Button, Tag } from \"antd\";\n\nimport { Node, NodeMinimal } from \"../Node\";\nimport Hint from \"../Hint/Hint\";\nimport styles from \"./Entity.module.scss\";\n\nconst templateElement = element => {\n  return (\n    <div key={element.pid} className={styles.labels}>\n      Labels:&nbsp;\n      {element.getSelectedNames().map(title => {\n        let bgColor = element.findLabel(title).background ? element.findLabel(title).background : \"#000000\";\n\n        return (\n          <Tag key={element.findLabel(title).id} color={bgColor} className={styles.tag}>\n            {title}\n          </Tag>\n        );\n      })}\n    </div>\n  );\n};\n\nconst RenderStates = ({ node }) => {\n  const _render = s => {\n    if (\n      getType(s).name === \"LabelsModel\" ||\n      getType(s).name === \"RectangleLabelsModel\" ||\n      getType(s).name === \"PolygonLabelsModel\"\n    ) {\n      return templateElement(s);\n    } else if (getType(s).name === \"RatingModel\") {\n      return <p>Rating: {s.getSelectedString()}</p>;\n    }\n\n    return null;\n  };\n\n  return <Fragment>{node.states.map(s => _render(s))}</Fragment>;\n};\n\nexport default observer(({ store, completion }) => {\n  const node = completion.highlightedNode;\n\n  return (\n    <Fragment>\n      <p>\n        <NodeMinimal node={node} /> (id: {node.id})\n      </p>\n\n      {node.normalization && (\n        <p>\n          Normalization: {node.normalization}\n          <Icon\n            name=\"delete\"\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              node.deleteNormalization();\n            }}\n          />\n        </p>\n      )}\n      {node.states && <RenderStates node={node} />}\n\n      <div className={styles.block}>\n        <Button\n          className={styles.button}\n          onClick={() => {\n            completion.startRelationMode(node);\n          }}\n        >\n          <Icon type=\"link\" />\n          Relation\n        </Button>\n\n        <Button\n          className={styles.button}\n          onClick={() => {\n            completion.setNormalizationMode(true);\n          }}\n        >\n          <Icon type=\"plus\" />\n          Normalization\n        </Button>\n\n        <Button\n          className={styles.button}\n          type=\"dashed\"\n          onClick={() => {\n            completion.highlightedNode.unselectRegion();\n          }}\n        >\n          <Icon type=\"fullscreen-exit\" />\n          Unselect\n        </Button>\n\n        <Button\n          type=\"danger\"\n          className={styles.button}\n          onClick={() => {\n            completion.highlightedNode.deleteRegion();\n          }}\n        >\n          <Icon type=\"delete\" />\n          Delete\n          {store.settings.enableHotkeys && store.settings.enableTooltips && <Hint>[ Bksp ]</Hint>}\n        </Button>\n      </div>\n\n      {completion.normalizationMode && (\n        <div>\n          <Form\n            style={{ marginTop: \"0.5em\" }}\n            onSubmit={ev => {\n              const { value } = ev.target;\n              node.setNormalization(node.normInput);\n              completion.setNormalizationMode(false);\n\n              ev.preventDefault();\n              return false;\n            }}\n          >\n            <Form.Input\n              onChange={ev => {\n                const { value } = ev.target;\n                node.setNormInput(value);\n              }}\n              placeholder=\"Add Normalization\"\n            />\n          </Form>\n        </div>\n      )}\n    </Fragment>\n  );\n});\n","import React, { Component } from \"react\";\nimport { Card } from \"antd\";\nimport { observer } from \"mobx-react\";\n\nimport Relations from \"../Relations/Relations\";\nimport Entities from \"../Entities/Entities\";\nimport Entity from \"../Entity/Entity\";\nimport styles from \"./SideColumn.module.scss\";\n\n/**\n * Component Side with:\n * Completions\n * Entities\n * Relations\n */\nexport default observer(({ store }) => {\n  const completion = store.completionStore.selected;\n  const node = completion.highlightedNode;\n\n  return (\n    <Card title=\"Entity\" className={styles.card}>\n      {node && <Entity store={store} completion={completion} />}\n\n      {!completion.highlightedNode && <p>Nothing selected</p>}\n\n      <Entities store={store} regionStore={completion.regionStore} />\n\n      <Relations store={store} item={completion} />\n    </Card>\n  );\n});\n","import { types, getType, getParent } from \"mobx-state-tree\";\nimport Registry from \"./Registry\";\n\nfunction unionArray(arr) {\n  return types.maybeNull(types.array(oneOf(arr)));\n}\n\nfunction oneOf(arr) {\n  return types.union({\n    dispatcher: sn => {\n      if (arr.find(val => sn.type === val)) {\n        return Registry.getModelByTag(sn.type);\n      } else {\n        throw Error(\"Not expecting tag: \" + sn.type);\n      }\n    },\n  });\n}\n\nfunction allModelsTypes() {\n  const args = [\n    {\n      dispatcher: sn => {\n        if (Registry.tags.find(val => sn.type === val)) {\n          return Registry.getModelByTag(sn.type);\n        } else {\n          throw Error(\"Not expecting tag: \" + sn.type);\n        }\n      },\n    },\n    Registry.modelsArr(),\n  ];\n\n  const results = [].concat.apply([], args);\n\n  return types.union.apply(null, results);\n}\n\nfunction isType(node, types) {\n  const nt = getType(node);\n  for (let t of types) if (nt === t) return true;\n\n  return false;\n}\n\nfunction getParentOfTypeString(node, str) {\n  // same as getParentOfType but checks models .name instead of type\n  let parent = getParent(node);\n\n  if (!Array.isArray(str)) str = [str];\n\n  while (parent) {\n    const name = getType(parent).name;\n\n    if (str.find(c => c === name)) return parent;\n\n    parent = getParent(parent);\n  }\n\n  return null;\n}\n\nexport default { unionArray, allModelsTypes, oneOf, isType, getParentOfTypeString };\n","import React from \"react\";\nimport { types, getEnv, flow, getParentOfType } from \"mobx-state-tree\";\nimport { observer, Provider } from \"mobx-react\";\n\nimport Tree from \"../../core/Tree\";\n\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\n\n/**\n * View element. It's analogous to div element in html and can be used to visual configure display of blocks\n * @example\n * <View style=\"display: flex;\">\n *  <View style=\"flex: 50%\">\n *   <Header value=\"Facts:\"></Header>\n *   <Text name=\"text\" value=\"$fact\"></Text>\n *  </View>\n *  <View style=\"flex: 50%; margin-left: 1em\">\n *   <Header value=\"Enter your question:\"></Header>\n *   <TextArea name=\"question\" ></TextArea>\n *  </View>\n * </View>\n * @name View\n * @param {block|inline} display\n * @param {hexColor} backgroundColor background color\n * @param {style} style css style string\n */\nconst TagAttrs = types.model({\n  display: types.optional(types.string, \"block\"),\n  backgroundcolor: types.optional(types.string, \"\"),\n  margin: types.optional(types.string, \"\"),\n});\n\nconst Model = types.model({\n  id: types.identifier,\n  type: \"view\",\n  style: types.maybeNull(types.string),\n  children: Types.unionArray([\n    \"view\",\n    \"header\",\n    \"labels\",\n    \"textarea\",\n    \"choices\",\n    \"rating\",\n    \"ranker\",\n    \"rectangle\",\n    \"polygon\",\n    \"rectanglelabels\",\n    \"polygonlabels\",\n    \"text\",\n    \"audio\",\n    \"image\",\n    \"hypertext\",\n    \"audioplus\",\n    \"list\",\n    \"dialog\",\n  ]),\n});\n\nconst ViewModel = types.compose(\n  \"ViewModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = observer(({ item }) => {\n  let style = {};\n\n  if (item.display === \"inline\") {\n    style = { display: \"inline-block\", marginRight: \"15px\" };\n  }\n\n  if (item.style) {\n    style = Tree.cssConverter(item.style);\n  }\n\n  return <div style={style}>{Tree.renderChildren(item)}</div>;\n});\n\nRegistry.addTag(\"view\", ViewModel, HtxView);\n\nexport { HtxView, ViewModel };\n","/**\n * Convert JavaScript string in dot notation into an object reference\n * @param {Object} obj\n * @param {*} is\n * @param {*} value\n */\nfunction _index(obj, is, value) {\n  if (typeof is === \"string\") return _index(obj, is.split(\".\"), value);\n  else if (is.length === 1 && value !== undefined) return (obj[is[0]] = value);\n  else if (is.length === 0) return obj;\n  else return _index(obj[is[0]], is.slice(1), value);\n}\n\n/**\n *\n * @param {*} variable\n * @param {*} obj\n */\nfunction variableNotation(variable, obj) {\n  if (variable.charAt(0) === \"$\") {\n    const n = variable.substring(1);\n    return _index(obj, n);\n  } else {\n    return variable;\n  }\n}\n\n/**\n * A small templating engine for processing HTML with given data.\n *\n * @see TemplateEngine via MIT Licensed https://github.com/krasimir/absurd/\n *\n * @param {string} html\n * @param {Object} options\n * @returns {*}\n */\nfunction runTemplate(html, options) {\n  if (!options) options = {};\n\n  var re = /[$](.+)/g,\n    reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g,\n    code = \"with(obj) { var r=[];\\n\",\n    cursor = 0,\n    result,\n    match;\n\n  var add = function(line, js) {\n    js\n      ? (code += line.match(reExp) ? line + \"\\n\" : \"r.push(\" + line + \");\\n\")\n      : (code += line !== \"\" ? 'r.push(\"' + line.replace(/\"/g, '\\\\\"') + '\");\\n' : \"\");\n    return add;\n  };\n\n  while ((match = re.exec(html))) {\n    add(html.slice(cursor, match.index))(match[1], true);\n    cursor = match.index + match[0].length;\n  }\n\n  if (!html) return \"\";\n\n  add(html.substr(cursor, html.length - cursor));\n  code = (code + 'return r.join(\"\"); }').replace(/[\\r\\t\\n]/g, \" \");\n\n  try {\n    result = new Function(\"obj\", code).apply(options, [options]);\n  } catch (err) {\n    console.error(\"'\" + err.message + \"'\", \" in \\n\\nCode:\\n\", code, \"\\n\");\n  }\n\n  return result;\n}\n\nexport { variableNotation, runTemplate, _index };\n","import { types } from \"mobx-state-tree\";\n\nimport { runTemplate } from \"../../core/Template\";\n\nconst ProcessAttrsMixin = types.model().actions(self => ({\n  updateValue(store) {\n    self._value = runTemplate(self.value, store.task.dataObj) || \"\";\n  },\n}));\n\nexport default ProcessAttrsMixin;\n","import React from \"react\";\nimport { types } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport { Table, Header } from \"semantic-ui-react\";\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Table tag, show object keys and values in a table\n * @example\n * <Table name=\"text-1\" value=\"$text\"></Table>\n * @name Table\n * @param {string} value\n */\nconst Model = types.model({\n  type: \"table\",\n  size: types.optional(types.string, \"h4\"),\n  value: types.maybeNull(types.string),\n  _value: types.optional(types.string, \"\"),\n});\n\nconst TableModel = types.compose(\n  \"TableModel\",\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxTable = inject(\"store\")(\n  observer(({ store, item }) => {\n    let value = item._value;\n    if (!value) {\n      if (store.task) value = store.task.dataObj;\n    }\n\n    return (\n      <div style={{ marginTop: \"1em\" }}>\n        <Table basic=\"very\" celled collapsing>\n          <Table.Body>\n            {Object.keys(value).map(k => {\n              let v = value[k];\n              if (typeof v === \"object\") v = JSON.stringify(v);\n\n              return (\n                <Table.Row>\n                  <Table.Cell>\n                    <Header as=\"h4\">\n                      <Header.Subheader>{k}</Header.Subheader>\n                    </Header>\n                  </Table.Cell>\n                  <Table.Cell>{v}</Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table.Body>\n        </Table>\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"table\", TableModel, HtxTable);\n\nexport { HtxTable, TableModel };\n","import React from \"react\";\nimport { types } from \"mobx-state-tree\";\nimport { observer } from \"mobx-react\";\nimport { Typography } from \"antd\";\n\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Header tag, show header\n * @example\n * <Header name=\"text-1\" value=\"$text\"></Header>\n * @name Header\n * @param {string} size Size of header\n * @param {string} value Text of header\n * @param {boolean} underline Underline of header\n */\nconst Model = types.model({\n  type: \"header\",\n  size: types.optional(types.number, 4),\n  value: types.optional(types.string, \"\"),\n  underline: types.optional(types.boolean, false),\n});\n\nconst HeaderModel = types.compose(\n  \"HeaderModel\",\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxHeader = observer(({ item }) => {\n  return (\n    <Typography.Title underline={item.underline} level={item.size} style={{ margin: \"10px 0\" }}>\n      {item.value}\n    </Typography.Title>\n  );\n});\n\nRegistry.addTag(\"header\", HeaderModel, HtxHeader);\n\nexport { HtxHeader, HeaderModel };\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport Registry from \"../../core/Registry\";\nimport { runTemplate } from \"../../core/Template\";\n\n/**\n * HyperText element. Render html inside\n * @example\n * <View>\n *  <HyperText value=\"<p>Hey</p>\"></HyperText>\n * <View>\n * @param {string} name\n * @param {string} value\n */\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  name: types.maybeNull(types.string),\n});\n\nfunction HyperTextActions(self) {\n  return {\n    fromStateJSON(obj) {\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      if (obj.value.text) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n    },\n  };\n}\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"HyperText\",\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => HyperTextActions(self));\n\nconst HyperTextModel = types.compose(\n  \"HyperTextModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxHyperTextView = inject(\"store\")(\n  observer(({ store, item }) => {\n    if (!store.task) return null;\n\n    return <div dangerouslySetInnerHTML={{ __html: runTemplate(item.value, store.task.dataObj) }} />;\n  }),\n);\n\nRegistry.addTag(\"hypertext\", HyperTextModel, HtxHyperTextView);\n\nexport { HtxHyperTextView, HyperTextModel };\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Tag } from \"antd\";\n\nimport styles from \"./Dialog.module.scss\";\n\nexport default class DialogView extends React.Component {\n  render() {\n    let selectedStyle = `${styles.block}`;\n    let hint;\n    let bgColor;\n    let date;\n\n    if (this.props.hint) {\n      hint = <Tag color=\"blue\">{this.props.hint}</Tag>;\n    }\n\n    if (this.props.bg) {\n      bgColor = this.props.bg;\n    }\n\n    if (this.props.selected) {\n      selectedStyle = `${selectedStyle} ${styles.block_selected}`;\n      hint = (\n        <div>\n          <Tag color=\"magenta\">Selected Message</Tag>\n        </div>\n      );\n\n      if (this.props.hint) {\n        hint = (\n          <div className={styles.tag}>\n            <Tag color=\"magenta\">{this.props.hint}</Tag>\n          </div>\n        );\n      }\n    }\n\n    if (this.props.date) {\n      date = <span className={styles.date}>{this.props.date}</span>;\n    }\n\n    return (\n      <div className={selectedStyle} style={{ background: bgColor, width: \"max-content\", maxWidth: \"100%\" }}>\n        <span className={styles.name}>{this.props.name}:&nbsp;</span>\n        <p className={styles.text}>{this.props.text}</p>\n        {date}\n        {hint}\n      </div>\n    );\n  }\n}\n\nDialogView.propTypes = {\n  name: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  date: PropTypes.string,\n  hint: PropTypes.string,\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { Divider, Empty } from \"antd\";\n\nimport { guidGenerator } from \"../../utils/unique\";\nimport Registry from \"../../core/Registry\";\nimport DialogView from \"../../components/Dialog/Dialog\";\nimport { stringToColor, convertToRGBA } from \"../../utils/colors\";\n\n/**\n * Dialog tag renders a dialog\n * @example\n * <View>\n *  <Dialog name=\"dialog\" value=\"$dialog\"></Dialog>\n * <View>\n * @param {string} name name of the element\n * @param {object} value value of the element\n */\nconst Replica = types.model({\n  name: types.string,\n  text: types.string,\n  selected: types.optional(types.boolean, false),\n  date: types.optional(types.string, \"\"),\n  hint: types.optional(types.string, \"\"),\n});\n\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  name: types.maybeNull(types.string),\n});\n\nfunction DialogActions(self) {\n  return {\n    fromStateJSON(obj) {\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      if (obj.value.text) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n    },\n  };\n}\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"Dialog\",\n    data: types.map(Replica),\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => DialogActions(self));\n\nconst DialogModel = types.compose(\n  \"DialogModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxDialogView = inject(\"store\")(\n  observer(({ store, item }) => {\n    if (!store.task || !store.task.dataObj) {\n      return <Empty />;\n    }\n\n    let result = [];\n    let name = item.value;\n\n    if (name.charAt(0) === \"$\") {\n      name = name.substr(1);\n    }\n\n    store.task.dataObj[name].forEach((item, ind) => {\n      let bgColor;\n\n      if (item.name) {\n        bgColor = convertToRGBA(stringToColor(item.name), 0.1);\n      }\n\n      result.push(\n        <DialogView\n          key={ind}\n          name={item.name}\n          hint={item.hint}\n          text={item.text}\n          selected={item.selected}\n          date={item.date}\n          id={item.id}\n          bg={bgColor}\n        />,\n      );\n    });\n\n    return (\n      <div>\n        <div\n          style={{\n            display: \"flex\",\n            flexFlow: \"column\",\n            maxHeight: \"500px\",\n            overflowY: \"scroll\",\n            paddingRight: \"10px\",\n            marginTop: \"10px\",\n          }}\n        >\n          {result}\n        </div>\n        <Divider dashed={true} />\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"dialog\", DialogModel, HtxDialogView);\n\nexport { DialogModel, HtxDialogView };\n","import React, { Fragment } from \"react\";\nimport { Button, Icon } from \"antd\";\n\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, true),\n  volume: types.optional(types.boolean, true),\n  speed: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"audio\",\n    _value: types.optional(types.string, \"\"),\n    playing: types.optional(types.boolean, false),\n    height: types.optional(types.number, 20),\n  })\n  .views(self => ({\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    wsCreated(ws) {\n      self._ws = ws;\n    },\n\n    /**\n     * Play and stop\n     */\n    handlePlay() {\n      self.playing = !self.playing;\n    },\n  }));\n\nconst AudioHOCModel = types.compose(\n  \"AudioHOCModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nexport { AudioHOCModel };\n","import React, { Fragment, Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Button, Icon } from \"antd\";\n\nconst AudioControls = observer(({ item, store }) => {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"1em\" }}>\n      <Button\n        type=\"primary\"\n        onClick={ev => {\n          item._ws.playPause();\n        }}\n      >\n        {item.playing && (\n          <Fragment>\n            <Icon type=\"pause-circle\" /> Pause\n          </Fragment>\n        )}\n        {!item.playing && (\n          <Fragment>\n            <Icon type=\"play-circle\" /> Play\n          </Fragment>\n        )}\n      </Button>\n    </div>\n  );\n});\n\nexport default observer(AudioControls);\n","import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport RegionsPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.regions.min.js\";\nimport TimelinePlugin from \"wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js\";\nimport CursorPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.cursor\";\nimport { Slider, InputNumber, Row, Col } from \"antd\";\n\nimport styles from \"./Waveform.module.scss\";\n\n/**\n * Use formatTimeCallback to style the notch labels as you wish, such\n * as with more detail as the number of pixels per second increases.\n *\n * Here we format as M:SS.frac, with M suppressed for times < 1 minute,\n * and frac having 0, 1, or 2 digits as the zoom increases.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override timeInterval, primaryLabelInterval and/or\n * secondaryLabelInterval so they all work together.\n *\n * @param: seconds\n * @param: pxPerSec\n */\nfunction formatTimeCallback(seconds, pxPerSec) {\n  seconds = Number(seconds);\n  var minutes = Math.floor(seconds / 60);\n  seconds = seconds % 60;\n\n  // fill up seconds with zeroes\n  var secondsStr = Math.round(seconds).toString();\n  if (pxPerSec >= 25 * 10) {\n    secondsStr = seconds.toFixed(2);\n  } else if (pxPerSec >= 25 * 1) {\n    secondsStr = seconds.toFixed(1);\n  }\n\n  if (minutes > 0) {\n    if (seconds < 10) {\n      secondsStr = \"0\" + secondsStr;\n    }\n    return `${minutes}:${secondsStr}`;\n  }\n  return secondsStr;\n}\n\n/**\n * Use timeInterval to set the period between notches, in seconds,\n * adding notches as the number of pixels per second increases.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param: pxPerSec\n */\nfunction timeInterval(pxPerSec) {\n  var retval = 1;\n  if (pxPerSec >= 25 * 100) {\n    retval = 0.01;\n  } else if (pxPerSec >= 25 * 40) {\n    retval = 0.025;\n  } else if (pxPerSec >= 25 * 10) {\n    retval = 0.1;\n  } else if (pxPerSec >= 25 * 4) {\n    retval = 0.25;\n  } else if (pxPerSec >= 25) {\n    retval = 1;\n  } else if (pxPerSec * 5 >= 25) {\n    retval = 5;\n  } else if (pxPerSec * 15 >= 25) {\n    retval = 15;\n  } else {\n    retval = Math.ceil(0.5 / pxPerSec) * 60;\n  }\n  return retval;\n}\n\n/**\n * Return the cadence of notches that get labels in the primary color.\n * EG, return 2 if every 2nd notch should be labeled,\n * return 10 if every 10th notch should be labeled, etc.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param pxPerSec\n */\nfunction primaryLabelInterval(pxPerSec) {\n  var retval = 1;\n  if (pxPerSec >= 25 * 100) {\n    retval = 10;\n  } else if (pxPerSec >= 25 * 40) {\n    retval = 4;\n  } else if (pxPerSec >= 25 * 10) {\n    retval = 10;\n  } else if (pxPerSec >= 25 * 4) {\n    retval = 4;\n  } else if (pxPerSec >= 25) {\n    retval = 1;\n  } else if (pxPerSec * 5 >= 25) {\n    retval = 5;\n  } else if (pxPerSec * 15 >= 25) {\n    retval = 15;\n  } else {\n    retval = Math.ceil(0.5 / pxPerSec) * 60;\n  }\n  return retval;\n}\n\n/**\n * Return the cadence of notches to get labels in the secondary color.\n * EG, return 2 if every 2nd notch should be labeled,\n * return 10 if every 10th notch should be labeled, etc.\n *\n * Secondary labels are drawn after primary labels, so if\n * you want to have labels every 10 seconds and another color labels\n * every 60 seconds, the 60 second labels should be the secondaries.\n *\n * Note that if you override the default function, you'll almost\n * certainly want to override formatTimeCallback, primaryLabelInterval\n * and/or secondaryLabelInterval so they all work together.\n *\n * @param pxPerSec\n */\nfunction secondaryLabelInterval(pxPerSec) {\n  // draw one every 10s as an example\n  return Math.floor(10 / timeInterval(pxPerSec));\n}\n\nexport default class Waveform extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      src: this.props.src,\n      pos: 0,\n      colors: {\n        waveColor: \"#97A0AF\",\n        progressColor: \"#52c41a\",\n      },\n      zoom: 20,\n      speed: 1,\n      volume: 1,\n    };\n  }\n\n  /**\n   * Handle to change zoom of wave\n   */\n  onChangeZoom = value => {\n    this.setState({\n      ...this.state,\n      zoom: value,\n    });\n\n    this.wavesurfer.zoom(value);\n  };\n\n  onChangeVolume = value => {\n    this.setState({\n      ...this.state,\n      volume: value,\n    });\n\n    this.wavesurfer.setVolume(value);\n  };\n\n  /**\n   * Handle to change speed of wave\n   */\n  onChangeSpeed = value => {\n    this.setState({\n      ...this.state,\n      speed: value,\n    });\n\n    this.wavesurfer.setPlaybackRate(value);\n  };\n\n  componentDidMount() {\n    this.$el = ReactDOM.findDOMNode(this);\n\n    this.$waveform = this.$el.querySelector(\"#wave\");\n\n    let wavesurferConfigure = {\n      container: this.$waveform,\n      waveColor: this.state.colors.waveColor,\n      height: this.props.height,\n      backend: \"MediaElement\",\n      progressColor: this.state.colors.progressColor,\n    };\n\n    if (this.props.regions) {\n      wavesurferConfigure = {\n        ...wavesurferConfigure,\n        plugins: [\n          RegionsPlugin.create({\n            dragSelection: {\n              slop: 5, // slop\n            },\n          }),\n          TimelinePlugin.create({\n            container: \"#timeline\", // the element in which to place the timeline, or a CSS selector to find it\n            formatTimeCallback: formatTimeCallback, // custom time format callback. (Function which receives number of seconds and returns formatted string)\n            timeInterval: timeInterval, // number of intervals that records consists of. Usually it is equal to the duration in minutes. (Integer or function which receives pxPerSec value and returns value)\n            primaryLabelInterval: primaryLabelInterval, // number of primary time labels. (Integer or function which receives pxPerSec value and reurns value)\n            secondaryLabelInterval: secondaryLabelInterval, // number of secondary time labels (Time labels between primary labels, integer or function which receives pxPerSec value and reurns value).\n            primaryColor: \"blue\", // the color of the modulo-ten notch lines (e.g. 10sec, 20sec). The default is '#000'.\n            secondaryColor: \"blue\", // the color of the non-modulo-ten notch lines. The default is '#c0c0c0'.\n            primaryFontColor: \"#000\", // the color of the non-modulo-ten time labels (e.g. 10sec, 20sec). The default is '#000'.\n            secondaryFontColor: \"#000\",\n          }),\n          CursorPlugin.create({\n            wrapper: this.$waveform,\n            showTime: true,\n            opacity: 1,\n          }),\n        ],\n      };\n    }\n\n    this.wavesurfer = WaveSurfer.create(wavesurferConfigure);\n\n    /**\n     * Load data\n     */\n    this.wavesurfer.load(this.props.src);\n\n    /**\n     * Speed of waveform\n     */\n    this.wavesurfer.setPlaybackRate(this.state.speed);\n\n    const self = this;\n\n    if (this.props.regions) {\n      /**\n       * Mouse enter on region\n       */\n      this.wavesurfer.on(\"region-mouseenter\", reg => {\n        reg._region.onMouseOver();\n      });\n\n      /**\n       * Mouse leave on region\n       */\n      this.wavesurfer.on(\"region-mouseleave\", reg => {\n        reg._region.onMouseLeave();\n      });\n\n      /**\n       * Add region to wave\n       */\n      this.wavesurfer.on(\"region-created\", reg => {\n        const region = self.props.addRegion(reg);\n        reg._region = region;\n        reg.color = region.selectedregionbg;\n\n        reg.on(\"click\", () => region.onClick(self.wavesurfer));\n        reg.on(\"update-end\", () => region.onUpdateEnd(self.wavesurfer));\n\n        reg.on(\"dblclick\", e => {\n          window.setTimeout(function() {\n            reg.play();\n          }, 0);\n        });\n\n        reg.on(\"out\", () => {});\n      });\n    }\n\n    /**\n     * Handler of slider\n     */\n    const slider = document.querySelector(\"#slider\");\n\n    if (slider) {\n      slider.oninput = function() {\n        self.wavesurfer.zoom(Number(this.value));\n      };\n    }\n\n    this.wavesurfer.on(\"ready\", () => {\n      self.props.onCreate(this.wavesurfer);\n    });\n\n    /**\n     * Pause trigger of audio\n     */\n    this.wavesurfer.on(\"pause\", self.props.handlePlay);\n\n    /**\n     * Play trigger of audio\n     */\n    this.wavesurfer.on(\"play\", self.props.handlePlay);\n\n    if (this.props.regions) {\n      this.props.onLoad(this.wavesurfer);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"wave\" className={styles.wave} />\n\n        <div id=\"timeline\" />\n\n        <Row className={styles.menu}>\n          {this.props.speed && (\n            <Col span={24}>\n              <Col span={12}>\n                Speed:{\" \"}\n                <InputNumber\n                  min={0.5}\n                  max={3}\n                  value={this.state.speed}\n                  onChange={value => {\n                    this.onChangeSpeed(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={0.5}\n                  max={3}\n                  step={0.1}\n                  value={typeof this.state.speed === \"number\" ? this.state.speed : 1}\n                  onChange={range => {\n                    this.onChangeSpeed(range);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n          {this.props.volume && (\n            <Col span={24}>\n              <Col span={12}>\n                Volume:{\" \"}\n                <InputNumber\n                  min={0}\n                  max={1}\n                  value={this.state.volume}\n                  step={0.1}\n                  onChange={value => {\n                    this.onChangeVolume(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={0}\n                  max={1}\n                  step={0.1}\n                  value={typeof this.state.volume === \"number\" ? this.state.volume : 1}\n                  onChange={value => {\n                    this.onChangeVolume(value);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n          {this.props.zoom && (\n            <Col span={24}>\n              <Col span={12}>\n                Zoom:{\" \"}\n                <InputNumber\n                  min={20}\n                  max={500}\n                  value={this.state.zoom}\n                  onChange={value => {\n                    this.onChangeZoom(value);\n                  }}\n                />\n              </Col>\n              <Col span={24}>\n                <Slider\n                  min={20}\n                  step={10}\n                  max={500}\n                  value={typeof this.state.zoom === \"number\" ? this.state.zoom : 0}\n                  onChange={value => {\n                    this.onChangeZoom(value);\n                  }}\n                />\n              </Col>\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { Button, Icon } from \"antd\";\n\nimport { types, getRoot } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { AudioHOCModel } from \"./AudioHOC\";\n\nimport AudioControls from \"./Audio/Controls\";\n\nimport Waveform from \"../../components/Waveform/Waveform\";\n\n/**\n * Audio tag plays a simple audio file\n * @example\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n * </View>\n * @example\n * <!-- Audio classification -->\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n *   <Choices name=\"ch\" toName=\"audio\">\n *     <Choice value=\"Positive\"></Choice>\n *     <Choice value=\"Negative\"></Choice>\n *   </Choices>\n * </View>\n * @example\n * <!-- Audio transcription -->\n * <View>\n *   <Audio name=\"audio\" value=\"$audio\"></Audio>\n *   <TextArea name=\"ta\" toName=\"audio\"></TextArea>\n * </View>\n * @name Audio\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {string} hotkey hotkey used to play/pause audio\n */\nconst Model = AudioHOCModel.named(\"AudioModel\").actions(self => ({\n  fromStateJSON(obj, fromModel) {\n    if (obj.value.choices) {\n      self.completion.names.get(obj.from_name).fromStateJSON(obj);\n    }\n\n    if (obj.value.text) {\n      self.completion.names.get(obj.from_name).fromStateJSON(obj);\n    }\n  },\n\n  onLoad(ws) {\n    self._ws = ws;\n  },\n}));\n\nconst AudioModel = types.compose(\n  \"AudioModel\",\n  Model,\n);\n\nconst HtxAudioView = observer(({ store, item }) => {\n  if (!item._value) return null;\n\n  return (\n    <div>\n      <Waveform\n        src={item._value}\n        onCreate={item.wsCreated}\n        onLoad={item.onLoad}\n        handlePlay={item.handlePlay}\n        speed={item.speed}\n        zoom={item.zoom}\n        volume={item.volume}\n        regions={false}\n        height={item.height}\n      />\n\n      <AudioControls item={item} />\n    </div>\n  );\n});\n\nconst HtxAudio = inject(\"store\")(observer(HtxAudioView));\n\nRegistry.addTag(\"audio\", AudioModel, HtxAudio);\n\nexport { AudioModel, HtxAudio };\n","import { types } from \"mobx-state-tree\";\n\nconst RegionsMixin = types\n  .model({\n    selected: types.optional(types.boolean, false),\n    highlighted: types.optional(types.boolean, false),\n  })\n  .actions(self => ({\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n    },\n\n    unselectRegion() {\n      const completion = self.completion;\n      if (completion.relationMode) {\n        completion.stopRelationMode();\n      }\n\n      self.selected = false;\n      self.completion.setHighlightedNode(null);\n    },\n\n    onClickRegion() {\n      const completion = self.completion;\n\n      if (completion.relationMode) {\n        completion.addRelation(self);\n        completion.stopRelationMode();\n        completion.regionStore.unselectAll();\n      } else {\n        if (self.selected) {\n          self.unselectRegion();\n        } else {\n          completion.regionStore.unselectAll();\n          self.selectRegion();\n        }\n      }\n    },\n\n    deleteRegion() {\n      self.unselectRegion();\n\n      self.completion.relationStore.deleteNodeRelation(self);\n\n      self.completion.regionStore.deleteRegion(self);\n\n      self.completion.deleteRegion(self);\n    },\n\n    setHighlight(val) {\n      self.highlighted = val;\n    },\n\n    toggleHightlight() {\n      self.setHighlight(!self.highlighted);\n    },\n  }));\n\nexport default RegionsMixin;\n","import { types } from \"mobx-state-tree\";\n\n/**\n * Normalization\n * For normalize many labels to one value\n */\nconst NormalizationMixin = types\n  .model({\n    normInput: types.maybeNull(types.string),\n    normalization: types.maybeNull(types.string),\n  })\n  .actions(self => ({\n    /**\n     * Set normalization\n     * @param {*} val\n     */\n    setNormalization(val) {\n      self.normalization = val;\n    },\n\n    /**\n     * Delete normalization\n     */\n    deleteNormalization() {\n      self.setNormalization(\"\");\n    },\n\n    setNormInput(val) {\n      self.normInput = val;\n    },\n  }));\n\nexport default NormalizationMixin;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types } from \"mobx-state-tree\";\nimport { Tag } from \"antd\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Utils from \"../../utils\";\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Hint from \"../../components/Hint/Hint\";\n\n/**\n * Label tag represents a single label\n * @example\n * <View>\n *   <Labels name=\"type\" toName=\"txt-1\">\n *     <Label alias=\"B\" value=\"Brand\"></Label>\n *     <Label alias=\"P\" value=\"Product\"></Label>\n *   </Labels>\n *   <Text name=\"txt-1\" value=\"$text\"></Text>\n * </View>\n * @name Label\n * @param {string} value A value of the label\n * @param {boolean} selected If this label should be preselected\n * @param {string} alias Label alias\n * @param {string} hotkey Hotkey\n * @param {boolean} showalias Show alias inside label text\n * @param {string} aliasstyle Alias CSS style default=opacity: 0.6\n * @param {string} size Size of text in the label\n * @param {string} background The background color of active label\n * @param {string} selectedColor Color of text in an active label\n */\nconst TagAttrs = types.model({\n  value: types.maybeNull(types.string),\n  selected: types.optional(types.boolean, false),\n  alias: types.maybeNull(types.string),\n  hotkey: types.maybeNull(types.string),\n  showalias: types.optional(types.boolean, false),\n  aliasstyle: types.optional(types.string, \"opacity: 0.6\"),\n  size: types.optional(types.string, \"medium\"),\n  background: types.optional(types.string, \"#36B37E\"),\n  selectedcolor: types.optional(types.string, \"white\"),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"label\",\n    _value: types.optional(types.string, \"\"),\n  })\n  .actions(self => ({\n    toggleSelected() {\n      const sel = self.selected;\n\n      const labels = Types.getParentOfTypeString(self, [\"LabelsModel\", \"RectangleLabelsModel\", \"PolygonLabelsModel\"]);\n      labels.shouldBeUnselected && labels.unselectAll();\n\n      if (labels.shouldBeUnselected && sel === true) {\n      } else {\n        self.selected = !self.selected;\n      }\n    },\n\n    markSelected(val) {\n      self.selected = val;\n    },\n\n    onHotKey() {\n      return self.toggleSelected();\n    },\n  }));\n\nconst LabelModel = types.compose(\n  \"LabelModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxLabelView = inject(\"store\")(\n  observer(({ item, store }) => {\n    const bg = {\n      backgroundColor: item.selected ? item.background : \"#e8e8e8\",\n      color: item.selected ? item.selectedcolor : \"#333333\",\n      cursor: \"pointer\",\n      margin: \"5px\",\n    };\n\n    return (\n      <Tag\n        onClick={ev => {\n          item.toggleSelected();\n          return false;\n        }}\n        style={bg}\n        size={item.size}\n      >\n        {item._value}\n        {item.showalias === true && item.alias && (\n          <span style={Utils.styleToProp(item.aliasstyle)}>&nbsp;{item.alias}</span>\n        )}\n        {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n      </Tag>\n    );\n  }),\n);\n\nRegistry.addTag(\"label\", LabelModel, HtxLabelView);\n\nexport { HtxLabelView, LabelModel };\n","import { types } from \"mobx-state-tree\";\n\nconst SelectedModelMixin = types\n  .model()\n  .views(self => ({\n    get selectedLabels() {\n      return self.children.filter(c => c.selected === true);\n    },\n\n    get isSelected() {\n      return self.selectedLabels.length > 0;\n    },\n  }))\n  .actions(self => ({\n    findLabel(value) {\n      return self.children.find(c => c.alias === value || c.value === value);\n    },\n\n    unselectAll() {\n      self.children.map(c => c.markSelected(false));\n    },\n\n    getSelectedNames() {\n      return self.selectedLabels.map(c => (c.alias ? c.alias : c.value));\n    },\n\n    getSelectedString(joinstr) {\n      joinstr = joinstr || \" \";\n      return self.getSelectedNames().join(joinstr);\n    },\n  }));\n\nexport default SelectedModelMixin;\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { types } from \"mobx-state-tree\";\n\nimport Tree from \"../../core/Tree\";\nimport Registry from \"../../core/Registry\";\nimport Types from \"../../core/Types\";\n\nimport { LabelModel } from \"./Label\"; // eslint-disable-line no-unused-vars\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\n/**\n * Labels tag, create a group of labels\n * @example\n * <View>\n *   <Labels name=\"type\" toName=\"txt-1\">\n *     <Label alias=\"B\" value=\"Brand\"></Label>\n *     <Label alias=\"P\" value=\"Product\"></Label>\n *   </Labels>\n *   <Text name=\"txt-1\" value=\"$text\"></Text>\n * </View>\n * @name Labels\n * @param {string} name name of the element\n * @param {string} toName name of the element that you want to label\n * @param {single|multiple=} [choice=single] configure if you can select just one or multiple labels\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  choice: types.optional(types.enumeration([\"single\", \"multiple\"]), \"single\"),\n\n  // TODO make enum\n  selectionstyle: types.maybeNull(types.optional(types.string, \"basic\", \"border\", \"bottom\")),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"labels\",\n    children: Types.unionArray([\"labels\", \"label\", \"choices\", \"choice\"]),\n  })\n  .views(self => ({\n    get shouldBeUnselected() {\n      return self.choice === \"single\";\n    },\n  }))\n  .actions(self => ({\n    getSelectedColor() {\n      // return first selected label color\n      const sel = self.children.find(c => c.selected === true);\n      return sel && sel.background;\n    },\n\n    toStateJSON() {\n      const names = self.getSelectedNames();\n\n      if (names && names.length) {\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: self.name,\n          type: self.type,\n          value: {\n            labels: names,\n          },\n        };\n      }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.labels) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.labels.forEach(l => {\n        const label = self.findLabel(l);\n        if (!label) throw new Error(\"No label \" + obj.value.label);\n\n        label.markSelected(true);\n      });\n    },\n  }));\n\nconst LabelsModel = types.compose(\n  \"LabelsModel\",\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst HtxLabels = observer(({ item }) => {\n  return (\n    <div\n      style={{\n        marginTop: \"1em\",\n        marginBottom: \"1em\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        flexFlow: \"wrap\",\n      }}\n    >\n      {Tree.renderChildren(item)}\n    </div>\n  );\n});\n\nRegistry.addTag(\"labels\", LabelsModel, HtxLabels);\n\nexport { HtxLabels, LabelsModel };\n","import React, { Component } from \"react\";\nimport { Rating } from \"semantic-ui-react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\nimport Types from \"../../core/Types\";\n\n/**\n * Rating tag\n * @example\n * <View>\n *   <Text name=\"txt\" value=\"$text\"></Text>\n *   <Rating name=\"rating\" toName=\"txt\" maxRating=\"10\"></Rating>\n * </View>\n * @name Rating\n * @param {string} name of the element\n * @param {string} toName name of the element that you want to label\n * @param {integer=} [maxRating=5] maxmium rating value\n * @param {string=} [size=large] one of: mini tiny small large huge massive\n * @param {string=} [icon=star] one of: star heart\n * @param {string=} hotkey hokey\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  maxrating: types.optional(types.string, \"5\"),\n  icon: types.optional(types.string, \"star\"),\n  size: types.optional(types.string, \"large\"),\n\n  hotkey: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"rating\",\n    rating: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get isSelected() {\n      return self.rating > 0;\n    },\n  }))\n  .actions(self => ({\n    getSelectedString() {\n      return self.rating + \" star\";\n    },\n\n    getSelectedNames() {\n      return self.rating;\n    },\n\n    unselectAll() {\n      self.rating = 0;\n    },\n\n    handleRate(e, { rating, maxrating }) {\n      self.rating = rating;\n    },\n\n    increaseValue() {\n      if (self.rating >= self.maxrating) {\n        self.rating = 0;\n      } else {\n        if (self.rating > 0) {\n          self.rating = self.rating + 1;\n        } else {\n          self.rating = 1;\n        }\n      }\n    },\n\n    onHotKey() {\n      return self.increaseValue();\n    },\n\n    toStateJSON() {\n      if (self.rating) {\n        const toname = self.toname || self.name;\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: toname,\n          type: self.type,\n          value: {\n            rating: self.rating,\n          },\n        };\n      }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      if (obj.id) self.pid = obj.id;\n\n      self.rating = obj.value.rating;\n    },\n  }));\n\nconst RatingModel = types.compose(\n  \"RatingModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxRating = inject(\"store\")(\n  observer(({ item, store }) => {\n    return (\n      <div>\n        <Rating\n          icon=\"star\"\n          size={item.size}\n          defaultRating={0}\n          rating={item.rating}\n          maxRating={item.maxrating}\n          onRate={item.handleRate}\n          clearable\n        />\n        {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && (\n          <sup style={{ fontSize: \"9px\" }}>[{item.hotkey}]</sup>\n        )}\n      </div>\n    );\n  }),\n);\n\nRegistry.addTag(\"rating\", RatingModel, HtxRating);\n\nexport { HtxRating, RatingModel };\n","import { types, getParentOfType, destroy, getRoot } from \"mobx-state-tree\";\n\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\n\nimport { AudioPlusModel } from \"./AudioPlus\";\nimport Utils from \"../../utils\";\n\nconst Model = types\n  .model(\"AudioRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    start: types.number,\n    end: types.number,\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel))),\n    selectedregionbg: types.optional(types.string, \"rgba(0, 0, 0, 0.5)\"),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, AudioPlusModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    /**\n     * When you try to send completion\n     */\n    toStateJSON() {\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.pid,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"region\",\n          value: {\n            start: self.start,\n            end: self.end,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n\n    /**\n     * Select audio region\n     */\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n    },\n\n    /**\n     * Unselect audio region\n     */\n    unselectRegion() {\n      self.selected = false;\n      self.completion.setHighlightedNode(null);\n      if (self._ws_region.update) {\n        self._ws_region.update({ color: self.selectedregionbg });\n      }\n    },\n\n    setHighlight(val) {\n      self.highlighted = val;\n\n      if (val) {\n        self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n        self._ws_region.element.style.border = \"2px solid red\";\n      } else {\n        self._ws_region.update({ color: self.selectedregionbg });\n        self._ws_region.element.style.border = \"none\";\n      }\n    },\n\n    setNormalization(val) {\n      // console.log(val)\n    },\n\n    beforeDestroy() {\n      if (self._ws_region) self._ws_region.remove();\n    },\n\n    onClick(wavesurfer) {\n      if (!self.completion.relationMode) {\n        // Object.values(wavesurfer.regions.list).forEach(r => {\n        //   // r.update({ color: self.selectedregionbg });\n        // });\n\n        self._ws_region.update({ color: Utils.Colors.rgbaChangeAlpha(self.selectedregionbg, 0.8) });\n      }\n\n      self.onClickRegion();\n    },\n\n    onMouseOver() {\n      if (self.completion.relationMode) {\n        self.setHighlight(true);\n        self._ws_region.element.style.cursor = \"crosshair\";\n      }\n    },\n\n    onMouseLeave() {\n      if (self.completion.relationMode) {\n        self.setHighlight(false);\n        self._ws_region.element.style.cursor = \"move\";\n      }\n    },\n\n    onUpdateEnd(wavesurfer) {\n      self.start = self._ws_region.start;\n      self.end = self._ws_region.end;\n    },\n  }));\n\nconst AudioRegionModel = types.compose(\n  \"AudioRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nexport { AudioRegionModel };\n","import React, { Fragment } from \"react\";\n\nimport { types, getRoot, getType } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button, Icon, Slider, Row, Col } from \"antd\";\n\nimport { cloneNode } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Waveform from \"../../components/Waveform/Waveform\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nimport Utils from \"../../utils\";\n\nimport { AudioRegionModel } from \"./AudioRegion\";\nimport AudioControls from \"./Audio/Controls\";\nimport styles from \"./AudioPlus/AudioPlus.module.scss\";\n\n/**\n * AudioPlus tag plays audio and shows its wave\n * @example\n * <View>\n *  <Labels name=\"lbl-1\" toName=\"audio-1\"><Label value=\"Hello\"></Label><Label value=\"World\"></Label></Labels>\n *  <Rating name=\"rate-1\" toName=\"audio-1\"></Rating>\n *  <AudioPlus name=\"audio-1\" value=\"$audio\"></AudioPlus>\n * </View>\n * @name AudioPlus\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {boolean} hasZoom speficy if audio has zoom functionality\n * @param {string} regionBG region color\n * @param {string} selectedRegionBG selected region background\n * @param {boolean} volume from 0 to 1\n * @param {boolean} speed from 0.5 to 3\n * @param {boolean} zoom\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  zoom: types.optional(types.boolean, true),\n  volume: types.optional(types.boolean, true),\n  speed: types.optional(types.boolean, true),\n  regs: types.optional(types.boolean, true),\n});\n\nconst Model = types\n  .model(\"AudioPlusModel\", {\n    id: types.identifier,\n    type: \"audio\",\n    _value: types.optional(types.string, \"\"),\n    playing: types.optional(types.boolean, false),\n    regions: types.array(AudioRegionModel),\n    height: types.optional(types.number, 128),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states\n        ? states.filter(s => s.isSelected && (getType(s).name === \"LabelsModel\" || getType(s).name === \"RatingModel\"))\n        : null;\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      return self.regions.map(r => r.toStateJSON());\n    },\n\n    /**\n     * Find region of audio\n     */\n    findRegion(start, end) {\n      let findedRegion = self.regions.find(r => r.start === start && r.end === end);\n      return findedRegion;\n    },\n\n    fromStateJSON(obj, fromModel) {\n      let r;\n      let m;\n\n      /**\n       *\n       */\n      const tree = {\n        pid: obj.id,\n        start: obj.value.start,\n        end: obj.value.end,\n        normalization: obj.normalization,\n      };\n\n      const region = self.findRegion(obj.value.start, obj.value.end);\n\n      if (obj.value.labels) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      if (fromModel) {\n        m = restoreNewsnapshot(fromModel);\n\n        m.fromStateJSON(obj);\n\n        if (!region) {\n          tree.states = [m];\n          r = self.addRegion(tree);\n        } else {\n          region.states.push(m);\n        }\n      }\n\n      if (self._ws) {\n        self._ws.addRegion({\n          start: r.start,\n          end: r.end,\n        });\n      }\n\n      return r;\n    },\n\n    setRangeValue(val) {\n      self.rangeValue = val;\n    },\n\n    setPlaybackRate(val) {\n      self.playBackRate = val;\n    },\n\n    addRegion(ws_region) {\n      const states = self.activeStates();\n\n      const clonedStates = states\n        ? states.map(s => {\n            return cloneNode(s);\n          })\n        : null;\n\n      const find_r = self.findRegion(ws_region.start, ws_region.end);\n\n      if (self.findRegion(ws_region.start, ws_region.end)) {\n        find_r._ws_region = ws_region;\n        return find_r;\n      }\n\n      const bgColor =\n        states && states[0] ? Utils.Colors.convertToRGBA(states[0].getSelectedColor(), 0.3) : self.selectedregionbg;\n\n      const r = AudioRegionModel.create({\n        id: ws_region.id ? ws_region.id : guidGenerator(),\n        pid: ws_region.pid ? ws_region.pid : guidGenerator(),\n        start: ws_region.start,\n        end: ws_region.end,\n        regionbg: self.regionbg,\n        selectedregionbg: bgColor,\n        states: clonedStates,\n      });\n\n      r._ws_region = ws_region;\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      states && states.forEach(s => s.unselectAll());\n\n      return r;\n    },\n\n    /**\n     * Play and stop\n     */\n    handlePlay() {\n      self.playing = !self.playing;\n    },\n\n    onLoad(ws) {\n      self._ws = ws;\n\n      self.regions.forEach(obj => {\n        self._ws.addRegion({\n          start: obj.start,\n          end: obj.end,\n        });\n      });\n    },\n\n    wsCreated(ws) {\n      self._ws = ws;\n    },\n  }));\n\nconst AudioPlusModel = types.compose(\n  \"AudioPlusModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxAudioView = observer(({ store, item }) => {\n  if (!item._value) return null;\n\n  return (\n    <div>\n      <Waveform\n        src={item._value}\n        selectRegion={item.selectRegion}\n        handlePlay={item.handlePlay}\n        onCreate={item.wsCreated}\n        addRegion={item.addRegion}\n        onLoad={item.onLoad}\n        speed={item.speed}\n        zoom={item.zoom}\n        volume={item.volume}\n        regions={item.regs}\n        height={item.height}\n      />\n\n      <AudioControls item={item} />\n    </div>\n  );\n});\n\nconst HtxAudioPlus = inject(\"store\")(observer(HtxAudioView));\n\nRegistry.addTag(\"audioplus\", AudioPlusModel, HtxAudioPlus);\n\nexport { AudioRegionModel, AudioPlusModel, HtxAudioPlus };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Button, Icon } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { RectRegionModel } from \"../object/RectRegion\";\n\n/**\n * Rectangle tag\n * Rectangle is used to add rectangle (BBox) to an image\n * @example\n * <View>\n *   <Rectangle name=\"rect-1\" toName=\"img-1\"></Rectangle>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name Rectangle\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of rectangle\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of the stroke\n * @param {boolean=} [canRotate=true] show or hide rotation handle\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.6\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokewidth: types.optional(types.string, \"1\"),\n  strokecolor: types.optional(types.string, \"#f48a42\"),\n\n  canrotate: types.optional(types.string, \"true\"),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"rectangle\",\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    fromStateJSON(obj) {\n      // const rect = self._createRect();\n      // rect.setPosition(obj.value.x, obj.value.y, obj.value.width, obj.value.height, obj.value.rotation);\n      // return rect;\n    },\n  }));\n\nconst RectangleModel = types.compose(\n  \"RectangleModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = () => {\n  return null;\n};\n\nRegistry.addTag(\"rectangle\", RectangleModel, HtxView);\n\nexport { HtxView, RectangleModel };\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\n\nimport { types } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Tree from \"../../core/Tree\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { RectangleModel } from \"./Rectangle\";\n\n/**\n * RectangleLabels tag creates labeled rectangles\n * @example\n * <View>\n *   <RectangleLabels name=\"labels\" toName=\"image\">\n *     <Label value=\"Person\"></Label>\n *     <Label value=\"Animal\"></Label>\n *   </RectangleLabels>\n *   <Image name=\"image\" value=\"$image\"></Image>\n * </View>\n * @name RectangleLabels\n * @param {string} name name of the element\n * @param {string} toname name of the image to label\n * @param {float=} [opacity=0.6] opacity of rectangle\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {boolean=} [canRotate=true] show or hide rotation handle\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model(\"RectangleLabelsModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"rectanglelabels\",\n    children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n  })\n  .views(self => ({\n    get shouldBeUnselected() {\n      return self.choice === \"single\";\n    },\n  }))\n  .actions(self => ({\n    getSelectedColor() {\n      // return first selected label color\n      const sel = self.children.find(c => c.selected === true);\n      return sel && sel.background;\n    },\n\n    toStateJSON() {\n      const names = self.getSelectedNames();\n\n      if (names) {\n        self.unselectAll();\n      }\n\n      // if (names && names.length) {\n      //   return {\n      //     id: self.pid,\n      //     from_name: self.name,\n      //     to_name: self.name,\n      //     type: self.type,\n      //     value: {\n      //       labels: names,\n      //     },\n      //   };\n      // }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.rectanglelabels) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.rectanglelabels.forEach(l => {\n        const label = self.findLabel(l);\n\n        if (!label) throw new Error(\"No label \" + obj.value.label);\n\n        label.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(\n  LabelsModel,\n  RectangleModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\nconst RectangleLabelsModel = types.compose(\n  \"RectangleLabelsModel\",\n  Composition,\n);\n\nconst HtxRectangleLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n  return (\n    <div\n      style={{\n        marginTop: \"1em\",\n        marginBottom: \"1em\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        flexFlow: \"wrap\",\n      }}\n    >\n      {Tree.renderChildren(item)}\n    </div>\n  );\n});\n\nRegistry.addTag(\"rectanglelabels\", RectangleLabelsModel, HtxRectangleLabels);\n\nexport { HtxRectangleLabels, RectangleLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Rect, Text, Transformer } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RectangleLabelsModel } from \"../control/RectangleLabels\";\n\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"rectangleregion\",\n\n    x: types.number,\n    y: types.number,\n    width: types.number,\n    height: types.number,\n\n    scaleX: types.optional(types.number, 1),\n    scaleY: types.optional(types.number, 1),\n\n    rotation: types.optional(types.number, 0),\n\n    opacity: types.number,\n    strokewidth: types.number,\n\n    fillcolor: types.maybeNull(types.string),\n    strokecolor: types.optional(types.string, \"blue\"),\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, RectangleLabelsModel))),\n\n    // fromName: types.maybeNull(types.string),\n\n    wp: types.maybeNull(types.number),\n    hp: types.maybeNull(types.number),\n\n    sw: types.maybeNull(types.number),\n    sh: types.maybeNull(types.number),\n\n    coordstype: types.optional(types.enumeration([\"px\", \"perc\"]), \"px\"),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    coordsInside(x, y) {\n      // check if x and y are inside the rectangle\n      const rx = self.x;\n      const ry = self.y;\n      const rw = self.width * (self.scaleX || 1);\n      const rh = self.height * (self.scaleY || 1);\n\n      if (x > rx && x < rx + rw && y > ry && y < ry + rh) return true;\n\n      return false;\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    setPosition(x, y, width, height, rotation) {\n      self.x = x;\n      self.y = y;\n      self.width = width;\n      self.height = height;\n\n      self.rotation = rotation;\n    },\n\n    setScale(x, y) {\n      self.scaleX = x;\n      self.scaleY = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp, sw, sh) {\n      self.wp = wp;\n      self.hp = hp;\n\n      self.sw = sw;\n      self.sh = sh;\n\n      if (self.coordstype == \"perc\") {\n        self.x = (sw * self.x) / 100;\n        self.y = (sh * self.y) / 100;\n        self.width = (sw * self.width) / 100;\n        self.height = (sh * self.height) / 100;\n        self.coordstype = \"px\";\n      }\n    },\n\n    toStateJSON() {\n      const parent = self.parent;\n      let fromEl = parent.states()[0];\n\n      if (parent.states().length > 1) {\n        parent.states().forEach(state => {\n          if (state.type === \"rectanglelabels\") {\n            fromEl = state;\n          }\n        });\n      }\n\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: fromEl.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"rectangle\",\n          value: {\n            x: (self.x * 100) / self.parent.stageWidth,\n            y: (self.y * 100) / self.parent.stageHeight,\n            width: (self.width * (self.scaleX || 1) * 100) / self.parent.stageWidth, //  * (self.scaleX || 1)\n            height: (self.height * (self.scaleY || 1) * 100) / self.parent.stageHeight,\n            rotation: self.rotation,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst RectRegionModel = types.compose(\n  \"RectRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxRectangleView = ({ store, item }) => {\n  const self = this;\n  const { name, wwidth, wheight, onChangedPosition } = item;\n\n  const wp = item.wp || item.parent.stageWidth / item.parent.naturalWidth;\n  const hp = item.hp || item.parent.stageHeight / item.parent.naturalHeight;\n\n  const x = item.x;\n  const y = item.y;\n  const w = item.width;\n  const h = item.height;\n\n  const props = {};\n\n  props[\"opacity\"] = item.opacity;\n\n  if (item.fillcolor) {\n    props[\"fill\"] = item.fillcolor;\n  }\n\n  props[\"stroke\"] = item.strokecolor;\n  props[\"strokeWidth\"] = item.strokewidth;\n  props[\"strokeScaleEnabled\"] = false;\n  props[\"shadowBlur\"] = 0;\n\n  if (item.highlighted) {\n    props[\"stroke\"] = \"#ff0000\";\n  }\n\n  return (\n    <Fragment>\n      <Rect\n        x={x}\n        y={y}\n        width={w}\n        height={h}\n        scaleX={item.scaleX}\n        scaleY={item.scaleY}\n        name={item.id}\n        onTransformEnd={e => {\n          const t = e.target;\n\n          const wp = item.wp || item.parent.stageWidth / item.parent.naturalWidth;\n          const hp = item.hp || item.parent.stageHeight / item.parent.naturalHeight;\n\n          item.setPosition(\n            t.getAttr(\"x\"),\n            t.getAttr(\"y\"),\n            t.getAttr(\"width\"),\n            t.getAttr(\"height\"),\n            t.getAttr(\"rotation\"),\n          );\n          item.setScale(t.getAttr(\"scaleX\"), t.getAttr(\"scaleY\"));\n        }}\n        onDragEnd={e => {\n          const t = e.target;\n\n          const wp = item.wp || item.parent.stageWidth / item.parent.naturalWidth;\n          const hp = item.hp || item.parent.stageHeight / item.parent.naturalHeight;\n\n          item.setPosition(\n            t.getAttr(\"x\"),\n            t.getAttr(\"y\"),\n            t.getAttr(\"width\"),\n            t.getAttr(\"height\"),\n            t.getAttr(\"rotation\"),\n          );\n          item.setScale(t.getAttr(\"scaleX\"), t.getAttr(\"scaleY\"));\n        }}\n        dragBoundFunc={function(pos) {\n          let { x, y } = pos;\n\n          if (x < 0) x = 0;\n          if (y < 0) y = 0;\n\n          return {\n            x: x,\n            y: y,\n          };\n        }}\n        onMouseOver={e => {\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(true);\n            stage.container().style.cursor = \"crosshair\";\n          } else {\n            stage.container().style.cursor = \"pointer\";\n          }\n        }}\n        onMouseOut={e => {\n          const stage = item.parent._stageRef;\n          stage.container().style.cursor = \"default\";\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(false);\n          }\n        }}\n        onClick={e => {\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            stage.container().style.cursor = \"default\";\n          }\n\n          item.setHighlight(false);\n          item.onClickRegion();\n        }}\n        {...props}\n        draggable\n      />\n    </Fragment>\n  );\n};\n\nconst HtxRectangle = inject(\"store\")(observer(HtxRectangleView));\n\nRegistry.addTag(\"rectangleregion\", RectRegionModel, HtxRectangle);\n\nexport { RectRegionModel, HtxRectangle };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot, getParent } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Rect, Text, Transformer, Line, Circle } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { Dropdown, Input } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst PolygonPoint = types\n  .model({\n    init_x: types.optional(types.number, 0),\n    init_y: types.optional(types.number, 0),\n\n    x: types.number,\n    y: types.number,\n\n    style: types.string,\n    size: types.string,\n    // isMouseOverStartPoint: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    get parent() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    afterCreate() {\n      self.init_x = self.x;\n      self.init_y = self.y;\n    },\n\n    movePoint(x, y) {\n      self.x = self.init_x + x;\n      self.y = self.init_y + y;\n    },\n\n    _movePoint(x, y) {\n      self.init_x = x;\n      self.init_y = y;\n\n      self.x = x;\n      self.y = y;\n    },\n\n    handleMouseOverStartPoint(ev) {\n      const stage = self.parent.parent._stageRef;\n      stage.container().style.cursor = \"crosshair\";\n\n      if (self.parent.closed || self.parent.points.length < 3) return;\n\n      const t = ev.target;\n\n      t.setX(t.x() - t.width() / 2);\n      t.setY(t.y() - t.height() / 2);\n\n      const scaleMap = {\n        small: 3,\n        medium: 2,\n        large: 2,\n      };\n\n      const scale = scaleMap[self.size];\n\n      t.scale({ x: scale, y: scale });\n\n      self.parent.setMouseOverStartPoint(true);\n    },\n\n    handleMouseOutStartPoint(ev) {\n      const t = ev.target;\n\n      const stage = self.parent.parent._stageRef;\n      stage.container().style.cursor = \"default\";\n\n      t.setX(t.x() + t.width() / 2);\n      t.setY(t.y() + t.height() / 2);\n      t.scale({ x: 1, y: 1 });\n\n      self.parent.setMouseOverStartPoint(false);\n    },\n  }));\n\nconst PolygonPointView = observer(({ item, index }) => {\n  const sizes = {\n    small: 4,\n    medium: 8,\n    large: 12,\n  };\n\n  const stroke = {\n    small: 1,\n    medium: 2,\n    large: 3,\n  };\n\n  const w = sizes[item.size];\n\n  const startPointAttr =\n    index === 0\n      ? {\n          hitStrokeWidth: 12,\n          onMouseOver: item.handleMouseOverStartPoint,\n          onMouseOut: item.handleMouseOutStartPoint,\n        }\n      : null;\n\n  const isOver = item.parent.mouseOverStartPoint;\n\n  const dragOpts = {\n    onDragStart: e => {\n      //handleDragStartPoint\n    },\n\n    onDragMove: e => {\n      item._movePoint(e.target.attrs.x, e.target.attrs.y);\n\n      /* const points = this.state.points; */\n      /* const index = e.target.index - 1; */\n      /* console.log(event.target); */\n      /* const pos = [event.target.attrs.x, event.target.attrs.y]; */\n      /* console.log(\"move\", event); */\n      /* console.log(pos); */\n      /* this.setState({ */\n      /*     points: [...points.slice(0, index), pos, ...points.slice(index + 1)] */\n      /* }); */\n    },\n\n    onDragEnd: e => {\n      // handleDragEndPoint\n    },\n\n    onMouseOver: e => {\n      const stage = item.parent.parent._stageRef;\n      stage.container().style.cursor = \"crosshair\";\n    },\n\n    onMouseOut: e => {\n      const stage = item.parent.parent._stageRef;\n      stage.container().style.cursor = \"default\";\n    },\n  };\n\n  if (item.style == \"circle\") {\n    return (\n      <Circle\n        key={index}\n        x={item.x - w / 2}\n        y={item.y - w / 2}\n        radius={w}\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={stroke[item.size]}\n        {...dragOpts}\n        {...startPointAttr}\n        draggable\n      />\n    );\n  } else {\n    return (\n      <Rect\n        key={index}\n        x={item.x - w / 2}\n        y={item.y - w / 2}\n        width={w}\n        height={w}\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={stroke[item.size]}\n        dragOnTop={false}\n        {...dragOpts}\n        {...startPointAttr}\n        draggable\n      />\n    );\n  }\n  // <Rect width={w}\n  //       height={w}\n  //       x={item.x - w/2}\n  //       y={item.y - w/2}\n  //       fill=\"black\"\n\n  //       onClick={(ev) => {\n  //           item.parent.closePoly();\n\n  //           ev.cancelBubble = true;\n  //           ev.evt.stopPropagation();\n  //       }}\n\n  //       dragBoundFunc={function(pos) {\n  //           let { x, y } = pos;\n  //           if (x < 0) x = 0;\n  //           if (y < 0) y = 0;\n\n  //           // /* const r = wwidth - this.getAttr('width'); */\n  //           // /* const b = wheight - this.getAttr('height'); */\n\n  //           item._movePoint(x, y);\n  //           // if (x > r) x = r;\n  //           // if (y > b) y = b;\n  //           // item.redrawParent();\n\n  //         return {\n  //             x: x,\n  //             y: y,\n  //         };\n\n  //       }}\n\n  //  draggable\n  // />\n});\n\nexport { PolygonPoint, PolygonPointView };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Button, Icon } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\nimport { isHtx, cloneNode } from \"../../core/Helpers\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { PolygonRegionModel } from \"../object/PolygonRegion\";\n\n/**\n * Polygon tag\n * Polygon is used to add polygons to an image\n * @example\n * <View>\n *   <Polygon name=\"rect-1\" toName=\"img-1\" value=\"Add Rectangle\"></Polygon>\n *   <Image name=\"img-1\" value=\"$img\"></Image>\n * </View>\n * @name Polygon\n * @param {string} name name of tag\n * @param {string} toname name of image to label\n * @param {number=} [opacity=0.6] opacity of polygon\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {small|medium|large=} [pointSize=medium] size of polygon handle points\n * @param {rectangle|circle=} [pointStyle=rectangle] style of points\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n\n  opacity: types.optional(types.string, \"0.6\"),\n  fillcolor: types.maybeNull(types.string),\n\n  strokewidth: types.optional(types.string, \"1\"),\n  strokecolor: types.optional(types.string, \"#f48a42\"),\n\n  pointsize: types.optional(types.string, \"medium\"),\n  pointstyle: types.optional(types.string, \"rectangle\"),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"polygon\",\n\n    // regions: types.array(RectRegionModel),\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states ? states.filter(c => c.isSelected === true) : null;\n    },\n  }))\n  .actions(self => ({}));\n\nconst PolygonModel = types.compose(\n  \"PolygonModel\",\n  TagAttrs,\n  Model,\n);\n\nconst HtxView = inject(\"store\")(\n  observer(({ store, item }) => {\n    return null;\n  }),\n);\n\nRegistry.addTag(\"polygon\", PolygonModel, HtxView);\n\nexport { HtxView, PolygonModel };\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\n\nimport { types } from \"mobx-state-tree\";\n\nimport Types from \"../../core/Types\";\nimport Tree from \"../../core/Tree\";\nimport Registry from \"../../core/Registry\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { PolygonModel } from \"./Polygon\";\n\n/**\n * PolygonLabels tag, create labeled polygons\n * @example\n * <View>\n *   <Image name=\"image\" value=\"$image\"></Image>\n *   <PolygonLabels name=\"lables\" toName=\"image\">\n *     <Label value=\"Car\"></Label>\n *     <Label value=\"Sign\"></Label>\n *   </PolygonLabels>\n * </View>\n * @name PolygonLabels\n * @param {string} name name of tag\n * @param {string} toname name of image to label\n * @param {number=} [opacity=0.6] opacity of polygon\n * @param {string=} fillColor rectangle fill color, default is transparent\n * @param {string=} strokeColor stroke color\n * @param {number=} [strokeWidth=1] width of stroke\n * @param {small|medium|large=} [pointSize=medium] size of polygon handle points\n * @param {rectangle|circle=} [pointStyle=rectangle] style of points\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model(\"PolygonLabelsModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"polygonlabels\",\n    children: Types.unionArray([\"labels\", \"label\", \"choice\"]),\n  })\n  .actions(self => ({\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.polygonlabels) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.polygonlabels.forEach(l => {\n        const label = self.findLabel(l);\n        if (!label) throw new Error(\"No label \" + obj.value.label);\n\n        label.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(\n  LabelsModel,\n  PolygonModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\nconst PolygonLabelsModel = types.compose(\n  \"PolygonLabelsModel\",\n  Composition,\n);\n\nconst HtxPolygonLabels = observer(({ item }) => {\n  return <HtxLabels item={item} />;\n});\n\nRegistry.addTag(\"polygonlabels\", PolygonLabelsModel, HtxPolygonLabels);\n\nexport { HtxPolygonLabels, PolygonLabelsModel };\n","import React, { createRef, Component, Fragment } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot, getParent } from \"mobx-state-tree\";\n\nimport Konva from \"konva\";\nimport { Shape, Label, Stage, Layer, Rect, Text, Transformer, Group, Line } from \"react-konva\";\n\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\n\nimport { Dropdown, Input } from \"semantic-ui-react\";\n\nimport Registry from \"../../core/Registry\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport { ImageModel } from \"../object/Image\";\nimport { PolygonPoint, PolygonPointView } from \"./PolygonPoint\";\n\nimport { PolygonLabelsModel } from \"../control/PolygonLabels\";\n\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"polygonregion\",\n\n    opacity: types.number,\n    fillcolor: types.maybeNull(types.string),\n\n    strokewidth: types.number,\n    strokecolor: types.string,\n\n    pointsize: types.string,\n    pointstyle: types.string,\n\n    closed: types.optional(types.boolean, false),\n\n    points: types.array(PolygonPoint, []),\n\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel, PolygonLabelsModel))),\n\n    mouseOverStartPoint: types.optional(types.boolean, false),\n\n    fromName: types.maybeNull(types.string),\n\n    wp: types.maybeNull(types.number),\n    hp: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, ImageModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    get isCW() {},\n\n    linePoints() {\n      const p = self.points.map(p => [p[\"x\"], p[\"y\"]]);\n\n      const flatten = arr => {\n        return arr.reduce(function(flat, toFlatten) {\n          return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n        }, []);\n      };\n\n      return flatten(p);\n    },\n  }))\n  .actions(self => ({\n    setMouseOverStartPoint(val) {\n      self.mouseOverStartPoint = val;\n    },\n\n    findPolyOutline() {\n      const { points } = self;\n      const left = points.reduce((acc, loc) => (acc.x < loc.x ? acc : loc));\n      const right = points.reduce((acc, loc) => (acc.x > loc.x ? acc : loc));\n\n      const top = points.reduce((acc, loc) => (acc.y < loc.y ? acc : loc));\n      const bottom = points.reduce((acc, loc) => (acc.y > loc.y ? acc : loc));\n\n      return {\n        x: left.x,\n        y: top.y,\n        width: right.x - left.x,\n        height: bottom.y - top.y,\n      };\n    },\n\n    coordsInside(x, y) {\n      const inside = false;\n      const vs = self.points;\n\n      for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n        var xi = vs[i][0],\n          yi = vs[i][1];\n        var xj = vs[j][0],\n          yj = vs[j][1];\n\n        var intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n\n        if (intersect) inside = !inside;\n      }\n\n      return inside;\n    },\n\n    addPoint(x, y) {\n      if (self.closed) return;\n\n      if (self.mouseOverStartPoint) {\n        self.closePoly();\n        return;\n      }\n      // if (self.canClose(x, y)) {\n      //     self.closePoly();\n      //     return;\n      // }\n\n      self._addPoint(x, y);\n    },\n\n    insertPoint(insertIdx, x, y) {\n      const p = { x: x, y: y, size: self.pointsize, style: self.pointstyle };\n      self.points.splice(insertIdx, 0, p);\n    },\n\n    _addPoint(x, y) {\n      self.points.push({ x: x, y: y, size: self.pointsize, style: self.pointstyle });\n    },\n\n    closePoly() {\n      self.closed = true;\n      self.selectRegion();\n    },\n\n    canClose(x, y) {\n      if (self.points.length < 2) return false;\n\n      const p1 = self.points[0];\n      const p2 = { x: x, y: y };\n\n      var r = 50;\n      var dist_points = (p1[\"x\"] - p2[\"x\"]) * (p1[\"x\"] - p2[\"x\"]) + (p1[\"y\"] - p2[\"y\"]) * (p2[\"y\"] - p2[\"y\"]);\n\n      if (dist_points < r) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    unselectRegion() {\n      self.selected = false;\n      self.parent.setSelected(undefined);\n      self.completion.setHighlightedNode(null);\n    },\n\n    selectRegion() {\n      self.selected = true;\n      self.completion.setHighlightedNode(self);\n      self.parent.setSelected(self.id);\n    },\n\n    setPosition(x, y, width, height, rotation) {\n      self.x = x;\n      self.y = y;\n      self.width = width;\n      self.height = height;\n\n      self.rotation = rotation;\n    },\n\n    setScale(x, y) {\n      self.scaleX = x;\n      self.scaleY = y;\n    },\n\n    addState(state) {\n      self.states.push(state);\n    },\n\n    setFill(color) {\n      self.fill = color;\n    },\n\n    updateImageSize(wp, hp) {\n      self.wp = wp;\n      self.hp = hp;\n    },\n\n    toStateJSON() {\n      // console.log(self.parent.naturalWidth);\n      const { naturalWidth, naturalHeight, stageWidth, stageHeight } = self.parent;\n\n      const perc_w = (stageWidth * 100) / naturalWidth;\n      const perc_h = (stageHeight * 100) / naturalHeight;\n\n      const perc_points = self.points.map(p => {\n        const orig_w = (p.x * 100) / perc_w;\n        const res_w = (orig_w * 100) / naturalWidth;\n\n        const orig_h = (p.y * 100) / perc_h;\n        const res_h = (orig_h * 100) / naturalHeight;\n\n        return [res_w, res_h];\n      });\n\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.id,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"polygon\",\n          value: {\n            points: perc_points,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst PolygonRegionModel = types.compose(\n  \"PolygonRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nfunction getAnchorPoint({ flattenedPoints, a, b }) {\n  const [x1, y1, x2, y2] = flattenedPoints;\n  const y =\n    ((x2 - x1) * (x2 * y1 - x1 * y2) + (x2 - x1) * (y2 - y1) * a + (y2 - y1) * (y2 - y1) * b) /\n    ((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n  const x =\n    a -\n    ((y2 - y1) * (x2 * y1 - x1 * y2 + a * (y2 - y1) - b * (x2 - x1))) / ((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n  return [x, y];\n}\n\nfunction getFlattenedPoints(points) {\n  const p = points.map(p => [p[\"x\"], p[\"y\"]]);\n  return p.reduce(function(flattenedPoints, point) {\n    return flattenedPoints.concat(point);\n  }, []);\n}\n\nconst HtxPolygonView = ({ store, item }) => {\n  const self = this;\n  const { name, wwidth, wheight, onChangedPosition } = item;\n\n  let opacity = 0.5;\n\n  const wp = item.wp || item.parent.stageWidth / item.parent.naturalWidth;\n  const hp = item.hp || item.parent.stageHeight / item.parent.naturalHeight;\n\n  const x = item.x;\n  const y = item.y;\n  const w = item.width;\n  const h = item.height;\n\n  const props = {};\n\n  props[\"opacity\"] = item.opacity;\n\n  if (item.fillcolor) {\n    props[\"fill\"] = item.fillcolor;\n  }\n\n  props[\"stroke\"] = item.strokecolor;\n  props[\"strokeWidth\"] = item.strokewidth;\n\n  if (item.highlighted) {\n    props[\"stroke\"] = \"red\";\n  }\n\n  return (\n    <Fragment>\n      {item.mouseOverStartPoint}\n\n      <Line\n        points={item.linePoints()}\n        fill={item.fill}\n        opacity={item.opacity}\n        closed={item.closed}\n        redraw={item.update}\n        stroke={item.stroke}\n        strokeWidth={parseInt(item.strokewidth)}\n        onDragStart={e => {\n          item.completion.setDragMode(true);\n        }}\n        dragBoundFunc={function(pos) {\n          let { x, y } = pos;\n          /* if (x < 0) x = 0; */\n          /* if (y < 0) y = 0; */\n\n          const r = item.parent.stageWidth - this.getAttr(\"width\");\n          const b = item.parent.stageHeight - this.getAttr(\"height\");\n\n          /* const r = wwidth - this.getAttr('width'); */\n          /* const b = wheight - this.getAttr('height'); */\n\n          if (x > r) x = r;\n          if (y > b) y = b;\n\n          item.points.forEach(p => {\n            p.movePoint(x, y);\n          });\n\n          return {\n            x: 0,\n            y: 0,\n          };\n        }}\n        onDragEnd={e => {\n          item.completion.setDragMode(false);\n\n          if (!item.closed) item.closePoly();\n\n          item.parent.setActivePolygon(null);\n\n          item.points.forEach(p => {\n            p.afterCreate();\n          });\n        }}\n        onMouseOver={e => {\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(true);\n            stage.container().style.cursor = \"crosshair\";\n          } else {\n            stage.container().style.cursor = \"pointer\";\n          }\n        }}\n        onMouseOut={e => {\n          const stage = item.parent._stageRef;\n          stage.container().style.cursor = \"default\";\n\n          if (store.completionStore.selected.relationMode) {\n            item.setHighlight(false);\n          }\n        }}\n        onClick={e => {\n          e.cancelBubble = true;\n\n          if (!item.closed) return;\n\n          const stage = item.parent._stageRef;\n\n          if (store.completionStore.selected.relationMode) {\n            stage.container().style.cursor = \"default\";\n          }\n\n          item.setHighlight(false);\n          item.onClickRegion();\n        }}\n        {...props}\n        draggable\n      />\n\n      {!item.closed && item.points.map((p, index) => <PolygonPointView item={p} index={index} />)}\n      {item.closed && item.selected && item.points.map((p, index) => <PolygonPointView item={p} index={index} />)}\n    </Fragment>\n  );\n};\n\nconst HtxPolygon = inject(\"store\")(observer(HtxPolygonView));\n\nRegistry.addTag(\"polygonregion\", PolygonRegionModel, HtxPolygon);\n\nexport { PolygonRegionModel, HtxPolygon };\n","import React, { Component } from \"react\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, getType, getParentOfType, destroy, getRoot } from \"mobx-state-tree\";\n\nimport { Stage, Layer, Rect, Text, Transformer } from \"react-konva\";\n\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, cloneNode, restoreNewsnapshot } from \"../../core/Helpers\";\nimport Tree from \"../../core/Tree\";\n\n// import { ImageEditorModel } from './ImageEditor';\nimport { RectRegionModel } from \"./RectRegion\";\nimport { PolygonRegionModel } from \"./PolygonRegion\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * Image tag shows an image on the page\n * @example\n * <View>\n *   <Image value=\"$url\"></Image>\n * </View>\n * @example\n * <View>\n *   <Image value=\"https://imgflip.com/s/meme/Leonardo-Dicaprio-Cheers.jpg\" width=\"100%\" maxWidth=\"750px\"></Image>\n * </View>\n * @name Image\n * @param {string} name name of the element\n * @param {string} value value\n * @param {string=} [width=100%] image width\n * @param {string=} [maxWidth=750px] image maximum width\n */\nconst TagAttrs = types.model({\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  resize: types.maybeNull(types.string),\n  width: types.optional(types.string, \"100%\"),\n  maxwidth: types.optional(types.string, \"750px\"),\n});\n\nconst Model = types\n  .model({\n    id: types.identifier,\n    type: \"image\",\n    _value: types.optional(types.string, \"\"),\n    stageWidth: types.optional(types.integer, 1),\n    stageHeight: types.optional(types.integer, 1),\n    naturalWidth: types.optional(types.integer, 1),\n    naturalHeight: types.optional(types.integer, 1),\n    selectedShape: types.safeReference(types.union(RectRegionModel, PolygonRegionModel)),\n    activePolygon: types.maybeNull(types.safeReference(PolygonRegionModel)),\n    shapes: types.array(types.union(RectRegionModel, PolygonRegionModel), []),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    controlButton() {\n      const names = self.completion.toNames.get(self.name);\n\n      let r = names[0];\n\n      names.forEach(item => {\n        if (item.type === \"rectanglelabels\") {\n          r = item;\n        }\n      });\n\n      return r;\n    },\n\n    controlButtonType() {\n      const name = self.controlButton();\n      return getType(name).name;\n    },\n  }))\n  .actions(self => ({\n    setActivePolygon(poly) {\n      self.activePolygon = poly;\n    },\n\n    updateIE(ev) {\n      const { width, height, naturalWidth, naturalHeight } = ev.target;\n\n      if (self.hasStates) {\n        self.naturalWidth = naturalWidth;\n        self.naturalHeight = naturalHeight;\n        self.stageWidth = width;\n        self.stageHeight = height;\n\n        // const IE = getParentOfType(self, ImageEditorModel);\n        // IE.updateStageSize(width, height);\n        self.shapes.forEach(s => s.updateImageSize(width / naturalWidth, height / naturalHeight, width, height));\n      }\n    },\n\n    _setStageRef(ref) {\n      self._stageRef = ref;\n    },\n\n    _deleteSelectedShape() {\n      if (self.selectedShape) destroy(self.selectedShape);\n    },\n\n    setSelected(shape) {\n      self.selectedShape = shape;\n    },\n\n    _addShape(shape) {\n      self.shapes.push(shape);\n      self.completion.addRegion(shape);\n      self.setSelected(shape.id);\n      shape.selectRegion();\n    },\n\n    onImageClick(ev) {\n      if (self.controlButtonType() === \"RectangleModel\") {\n        self._addRect(ev);\n      } else if (self.controlButtonType() === \"PolygonModel\") {\n        self._addPoly(ev);\n      } else if (self.controlButtonType() === \"PolygonLabelsModel\") {\n        if (self.activePolygon && !self.activePolygon.closed) {\n          self._addPoly(ev);\n        } else {\n          const states = self.completion.toNames.get(self.name);\n          const activeStates = states ? states.filter(c => c.isSelected == true) : null;\n          const clonedStates = activeStates ? activeStates.map(s => cloneNode(s)) : null;\n\n          if (clonedStates.length === 0) return;\n\n          self._addPoly(ev, clonedStates);\n\n          activeStates && activeStates.forEach(s => s.unselectAll());\n        }\n      } else if (self.controlButtonType() === \"RectangleLabelsModel\") {\n        const states = self.completion.toNames.get(self.name);\n        const activeStates = states ? states.filter(c => c.isSelected === true) : null;\n        const clonedStates = activeStates ? activeStates.map(s => cloneNode(s)) : null;\n\n        // don't allow to add RectangleLabel when there is no label selected\n        if (clonedStates.length === 0) return;\n\n        clonedStates.forEach(item => {\n          if (item.type !== \"choices\" && item.isSelected) {\n            self._addRect(ev, item);\n          }\n        });\n\n        activeStates &&\n          activeStates.forEach(s => {\n            console.log(s);\n            if (s.type !== \"choices\") {\n              s.unselectAll();\n            }\n          });\n      }\n    },\n\n    _addRect(ev, states) {\n      // const _states = self.activeStates();\n      // const states = (_states) ? _states.map(s => cloneNode(s)) : null;\n      // const states = null;\n\n      // const image = self.completion.names.get(self.toname);\n\n      const iw = 200;\n      const ih = 200;\n\n      // console.log(states.toJSON());\n\n      // based on image width and height we can place rect somewhere\n      // in the center\n      const sw = 100;\n      const sh = 100;\n      // const name = guidGenerator();\n      let stroke = self.controlButton().rectstrokecolor;\n      // let stroke = self.editor.rectstrokecolor;\n      // const states = self.states;\n      // TODO you may need to filter this states, check Text.js\n      if (states) {\n        // console.log(states[0].toJSON());\n        // console.log(states);\n        stroke = states.getSelectedColor();\n      }\n\n      const wp = self.stageWidth / self.naturalWidth;\n      const hp = self.stageHeight / self.naturalHeight;\n\n      const wx = ev.evt.offsetX;\n      const wy = ev.evt.offsetY;\n\n      self.__addRect(Math.floor(wx - sw / 2), Math.floor(wy - sh / 2), sw, sh, stroke, states);\n    },\n\n    __addRect(x, y, sw, sh, stroke, states, coordstype) {\n      const c = self.controlButton();\n\n      let localStates = states;\n\n      if (!states.length) {\n        localStates = [states];\n      }\n\n      const rect = RectRegionModel.create({\n        id: guidGenerator(),\n\n        x: x,\n        y: y,\n\n        width: sw,\n        height: sh,\n\n        opacity: parseFloat(c.opacity),\n        fillcolor: c.fillcolor,\n\n        strokewidth: parseInt(c.strokewidth),\n        strokecolor: stroke,\n\n        states: localStates,\n\n        coordstype: coordstype,\n      });\n\n      self._addShape(rect);\n    },\n\n    /**\n     * Resize of image canvas\n     * @param {*} width\n     * @param {*} height\n     */\n    onResizeSize(width, height) {\n      self.stageHeight = height;\n      self.stageWidth = width;\n    },\n\n    _addPoly(ev, states) {\n      let poly;\n      const w = 10;\n\n      if (self.activePolygon && self.activePolygon.closed) {\n        self.setActivePolygon(null);\n        return;\n      }\n\n      if (self.completion.dragMode === false) {\n        if (self.activePolygon) {\n          poly = self.activePolygon;\n        } else {\n          const c = self.controlButton();\n          poly = PolygonRegionModel.create({\n            id: guidGenerator(),\n            x: ev.evt.offsetX - w / 2,\n            y: ev.evt.offsetY - w / 2,\n            width: w,\n            height: w,\n\n            opacity: parseFloat(c.opacity),\n            fillcolor: c.fillcolor,\n\n            strokewidth: parseInt(c.strokewidth),\n            strokecolor: c.strokecolor,\n\n            pointsize: c.pointsize,\n            pointstyle: c.pointstyle,\n\n            states: states,\n          });\n\n          self.setActivePolygon(poly);\n\n          self.shapes.push(poly);\n          self.completion.addRegion(poly);\n\n          // self._addShape(poly);\n        }\n\n        poly.addPoint(ev.evt.offsetX - w / 2, ev.evt.offsetY - w / 2);\n\n        const stage = self._stageRef;\n        stage.container().style.cursor = \"default\";\n      }\n    },\n\n    toStateJSON() {\n      let t = self.shapes.map(r => r.toStateJSON());\n      return t;\n    },\n\n    fromStateJSON(obj, fromModel) {\n      const params = [\"choices\", \"shape\", \"rectanglelabels\"];\n\n      /**\n       * Check correct controls for image object\n       */\n      params.forEach(item => {\n        if (!item in obj.value) {\n          throw new Error(\"Not valid param\");\n        }\n      });\n\n      /**\n       * Choices\n       */\n      if (obj.value.choices) {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n      }\n\n      /**\n       * Rectangle labels\n       */\n      if (obj.value.rectanglelabels) {\n        const states = restoreNewsnapshot(fromModel);\n\n        states.fromStateJSON(obj);\n\n        self.__addRect(\n          obj.value.x,\n          obj.value.y,\n          obj.value.width,\n          obj.value.height,\n          states.getSelectedColor(),\n          [states],\n          \"perc\",\n        );\n      }\n\n      /**\n       * Shapes\n       */\n      if (obj.value.shape) {\n        let modifySnap;\n        let shapeModel;\n\n        if (obj.from_name !== obj.to_name) {\n          modifySnap = restoreNewsnapshot(fromModel);\n          shapeModel = modifySnap.fromStateJSON(obj);\n          self.shapes.push(shapeModel);\n        }\n      }\n    },\n  }));\n\nconst ImageModel = types.compose(\n  \"ImageModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nclass TransformerComponent extends React.Component {\n  componentDidMount() {\n    this.checkNode();\n  }\n\n  componentDidUpdate() {\n    this.checkNode();\n  }\n\n  checkNode() {\n    // here we need to manually attach or detach Transformer node\n    const stage = this.transformer.getStage();\n    const { selectedShapeName } = this.props;\n\n    if (!selectedShapeName) {\n      this.transformer.detach();\n      this.transformer.getLayer().batchDraw();\n      return;\n    }\n\n    const selectedNode = stage.findOne(\".\" + selectedShapeName.id);\n    // do nothing if selected node is already attached\n    if (selectedNode === this.transformer.node()) {\n      return;\n    }\n\n    if (selectedNode) {\n      // attach to another node\n      this.transformer.attachTo(selectedNode);\n    } else {\n      // remove transformer\n      this.transformer.detach();\n    }\n    this.transformer.getLayer().batchDraw();\n  }\n\n  render() {\n    return (\n      <Transformer\n        resizeEnabled={true}\n        rotateEnabled={this.props.rotateEnabled}\n        anchorSize={8}\n        ref={node => {\n          this.transformer = node;\n        }}\n      />\n    );\n  }\n}\n\nclass HtxImageView extends Component {\n  handleDblClick = ev => {\n    // const item = this.props.item;\n    // const poly = item.activePolygon;\n    // if (poly)\n    //     poly.closePoly();\n    // item.setActivePolygon(null);\n  };\n\n  handleOnClick = ev => {\n    const { item } = this.props;\n\n    // TODO this is a hack, for some reason stopPropagation is not\n    // working. And when you try to select a Rectangle the event\n    // propagates to Image as well. Which calls this function even\n    // if you click inside Rectangle. Current workaround is to\n    // check if our click lands inside the Rectangle/Polygon or\n    // not :-/\n    // const { offsetX, offsetY } = ev.evt;\n    // const shape = item.shapes.find(sh => sh.coordsInside(offsetX, offsetY));\n\n    // if (shape)\n    //     return;\n\n    return item.onImageClick(ev);\n  };\n\n  handleStageMouseDown = e => {\n    if (e.target === e.target.getStage()) {\n      return;\n    }\n\n    // clicked on transformer - do nothing\n    const clickedOnTransformer = e.target.getParent().className === \"Transformer\";\n    if (clickedOnTransformer) {\n      return;\n    }\n  };\n\n  updateDimensions() {\n    // this.props.item.onResizeSize(this.container.offsetWidth, this.container.offsetHeight);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    // const width = 750;\n    const { item, store } = this.props;\n\n    // TODO fix me\n    if (!store.task) return null;\n\n    const divStyle = {};\n    const style = {\n      width: item.width,\n      maxWidth: item.maxwidth,\n    };\n\n    if (item.resize) {\n      style[\"transform\"] = \"scale(\" + item.resize + \", \" + item.resize + \")\";\n    }\n\n    if (item.hasStates) {\n      // divStyle[\"position\"] = \"absolute\";\n      // const rotateEnabled = (item.editor.rectcanrotate == \"true\") ? true : false;\n      const rotateEnabled = item.controlButton().canrotate === \"true\" ? true : false;\n\n      return (\n        <div style={{ position: \"relative\" }}>\n          <div\n            ref={node => {\n              this.container = node;\n            }}\n            style={divStyle}\n          >\n            <img style={style} src={item._value} onLoad={item.updateIE} />\n          </div>\n          <Stage\n            ref={ref => {\n              item._setStageRef(ref);\n            }}\n            width={item.stageWidth}\n            height={item.stageHeight}\n            onDblClick={this.handleDblClick}\n            onClick={this.handleOnClick}\n            onMouseDown={this.handleStageMouseDown}\n            style={{ position: \"absolute\", top: 0, left: 0 }}\n          >\n            <Layer>\n              {item.shapes.map(s => {\n                return Tree.renderItem(s);\n              })}\n              <TransformerComponent rotateEnabled={rotateEnabled} selectedShapeName={this.props.item.selectedShape} />\n            </Layer>\n          </Stage>\n        </div>\n      );\n    } else {\n      divStyle[\"marginTop\"] = \"1em\";\n      return (\n        <div style={divStyle}>\n          <img style={style} src={item._value} onLoad={item.updateIE} />\n        </div>\n      );\n    }\n  }\n}\n\nconst HtxImage = inject(\"store\")(observer(HtxImageView));\n\nRegistry.addTag(\"image\", ImageModel, HtxImage);\n\nexport { ImageModel, HtxImage };\n","/**\n * Class for text data with 4 params:\n * start -> int: the index of the character where the range start.\n * end -> int: the index of the character where the range stop.\n * text -> string: the highlighted text.\n * data -> object: extra data (the props of the highlight component)\n */\nexport default class Range {\n  constructor(start, end, text, data = {}) {\n    this.start = start;\n    this.end = end;\n    this.text = text;\n    this.data = data;\n  }\n}\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport default class TextNode extends Component {\n  render() {\n    return (\n      <span\n        data-position={this.props.position}\n        overlap={this.props.overlap}\n        key={this.props.keyNode ? this.props.keyNode : null}\n        style={this.props.style}\n      >\n        {this.props.children}\n      </span>\n    );\n  }\n}\n\nTextNode.propTypes = {\n  position: PropTypes.number,\n  overlap: PropTypes.string,\n  key: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n};\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport Utils from \"../../utils\";\nimport TextNode from \"../TextNode/TextNode\";\n\nconst HtxTextNodeView = ({ store, range, id, highlightStyle, style, charIndex, children, overlap }) => {\n  const getStyle = range => (range ? highlightStyle : style);\n  const getRangeKey = () => `${id}-${range.start}-${charIndex}`;\n  const getNormalKey = () => `${id}-${charIndex}`;\n  const getKey = range => (range ? getRangeKey() : getNormalKey());\n\n  let wrapper = (\n    <span data-position={charIndex} key={getKey(range)} style={getStyle(range)}>\n      {children}\n    </span>\n  );\n\n  if (overlap && overlap.length) {\n    let bg;\n\n    if (range.states) {\n      range.states.map(i => {\n        bg = Utils.Colors.convertToRGBA(i.getSelectedColor(), 0.3);\n      });\n    }\n\n    store.completionStore.selected.regionStore.regions.map(i => {\n      if (i.selected) {\n        overlap.map(overlapItem => {\n          if (overlapItem === i.id) {\n            bg = \"#ff4d4f\";\n          }\n        });\n      }\n\n      if (i.highlighted && overlap.includes(i.id)) {\n        bg = \"#ff4d4f\";\n      }\n    });\n\n    wrapper = overlap.reduceRight((value, key) => {\n      return (\n        <TextNode\n          style={{ background: bg, padding: \"2px 0\" }}\n          position={charIndex}\n          overlap={key}\n          keyNode={getKey(range)}\n        >\n          {value}\n        </TextNode>\n      );\n    }, children);\n  }\n\n  return wrapper;\n};\n\nconst HtxTextNode = inject(\"store\")(observer(HtxTextNodeView));\nexport { HtxTextNode };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { HtxTextNode } from \"./Node\";\n\n/**\n * Node for URL\n * @param {*} props\n */\nconst UrlNode = props => {\n  const style = { wordWrap: \"break-word\" };\n\n  return (\n    <HtxTextNode\n      id={props.id}\n      highlightStyle={Object.assign({}, style, props.highlightStyle)}\n      charIndex={props.charIndex}\n      range={props.range}\n      overlap={props.overlap}\n      style={style}\n    >\n      <a data-position={props.charIndex + props.url.length} href={props.url} target=\"blank\">\n        {props.url}\n      </a>\n    </HtxTextNode>\n  );\n};\n\nUrlNode.propTypes = {\n  highlightStyle: PropTypes.object,\n  id: PropTypes.string,\n  charIndex: PropTypes.number,\n  range: PropTypes.object,\n  url: PropTypes.string,\n};\n\nexport default UrlNode;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport { HtxTextNode } from \"./Node\";\n\n/**\n * Node for Emoji\n * @param {*} props\n */\nconst EmojiNode = props => {\n  return (\n    <HtxTextNode\n      id={props.id}\n      highlightStyle={props.highlightStyle}\n      charIndex={props.charIndex}\n      range={props.range}\n      overlap={props.overlap}\n    >\n      {`${props.text[props.charIndex]}${props.text[props.charIndex + 1]}`}\n    </HtxTextNode>\n  );\n};\n\nEmojiNode.propTypes = {\n  id: PropTypes.string.isRequired,\n  highlightStyle: PropTypes.object,\n  charIndex: PropTypes.number.isRequired,\n  range: PropTypes.oneOfType([PropTypes.number, PropTypes.object]),\n  overlap: PropTypes.array,\n  text: PropTypes.string.isRequired,\n};\n\nexport default EmojiNode;\n","import emojiRegex from \"emoji-regex\";\nimport React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport Utils from \"../../utils\";\nimport Range from \"./Range\";\nimport { HtxTextNode } from \"./Node\";\nimport UrlNode from \"./UrlNode\";\nimport EmojiNode from \"./EmojiNode\";\nimport styles from \"./TextHighlight.module.scss\";\n\nclass TextHighlight extends Component {\n  constructor() {\n    super();\n\n    this.dismissMouseUp = 0;\n  }\n\n  /**\n   * Return first ok element\n   */\n  getRange(charIndex) {\n    if (this.props.ranges && this.props.ranges.length) {\n      return this.props.ranges.find(range => charIndex >= range.start && charIndex <= range.end);\n    }\n  }\n\n  /**\n   * Function when the user mouse is over an highlighted text\n   */\n  onMouseOverHighlightedWord(range, visible) {\n    if (visible && this.props.onMouseOverHighlightedWord) {\n      this.props.onMouseOverHighlightedWord(range);\n    }\n  }\n\n  getLetterNode(charIndex, range) {\n    /**\n     * Current symbol\n     */\n    const char = this.props.text[charIndex];\n\n    let nl;\n\n    /**\n     * Line break\n     */\n    if (char && char.charCodeAt()) {\n      nl = char.charCodeAt(0) === 10;\n    }\n\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <HtxTextNode\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        charIndex={charIndex}\n        key={`${this.props.id}-${charIndex}`}\n        highlightStyle={this.props.highlightStyle}\n        // style={{padding: \"2px 0\", background: \"linear-gradient(180deg, #fdcd3b 60%, #ffed4b 60%, red 9%)\"}}\n      >\n        {nl ? <br /> : char}\n      </HtxTextNode>\n    );\n  }\n\n  getEmojiNode(charIndex, range) {\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <EmojiNode\n        text={this.props.text}\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        key={`${this.props.id}-emoji-${charIndex}`}\n        charIndex={charIndex}\n        highlightStyle={this.props.highlightStyle}\n      />\n    );\n  }\n\n  getUrlNode(charIndex, range, url) {\n    let arrOverlap = [];\n\n    if (this.props.ranges) {\n      this.props.ranges.map(range => {\n        if (charIndex >= range.start && charIndex <= range.end) {\n          return (arrOverlap = [...arrOverlap, range.id]);\n        }\n\n        return arrOverlap;\n      });\n    }\n\n    return (\n      <UrlNode\n        url={url}\n        id={this.props.id}\n        overlap={arrOverlap}\n        range={range}\n        key={`${this.props.id}-url-${charIndex}`}\n        charIndex={charIndex}\n        highlightStyle={this.props.highlightStyle}\n      />\n    );\n  }\n\n  mouseEvent() {\n    if (!this.props.enabled) {\n      return false;\n    }\n\n    let text = \"\";\n\n    if (window.getSelection) {\n      /**\n       * Get highlited text\n       * Tip: with helper elements (hints)\n       */\n      // text = window.getSelection().toString();\n\n      if (window.getSelection().type === \"None\") return;\n\n      /**\n       * Create clone range\n       */\n      let cloneCont = window\n        .getSelection()\n        .getRangeAt(0)\n        .cloneRange();\n\n      /**\n       * The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.\n       */\n      let selectionContents = cloneCont.cloneContents();\n      /**\n       * Create virtual div with text\n       */\n      let virtualDiv = document.createElement(\"div\");\n\n      virtualDiv.appendChild(selectionContents);\n\n      let elementsWithSup = virtualDiv.getElementsByTagName(\"sup\");\n\n      if (elementsWithSup.length > 0) {\n        for (let i = 0; i < elementsWithSup.length; i++) {\n          elementsWithSup[i].innerText = \"\";\n        }\n        text = virtualDiv.innerText;\n      } else {\n        text = virtualDiv.innerText;\n      }\n    } else if (document.selection && document.selection.type !== \"Control\") {\n      text = document.selection.createRange().text;\n    }\n\n    if (!text || !text.length) return false;\n\n    const range = window.getSelection().getRangeAt(0);\n\n    /**\n     * Check for hint\n     */\n    if (range.startContainer.parentNode.dataset.hint || range.endContainer.parentNode.dataset.hint) return;\n\n    /**\n     * Start position of selected item\n     */\n    const startContainerPosition = parseInt(range.startContainer.parentNode.dataset.position);\n    /**\n     * End position of selected item\n     */\n    const endContainerPosition = parseInt(range.endContainer.parentNode.dataset.position);\n\n    let startHL = startContainerPosition < endContainerPosition ? startContainerPosition : endContainerPosition;\n    let endHL = startContainerPosition < endContainerPosition ? endContainerPosition : startContainerPosition;\n\n    const rangeObj = new Range(startHL, endHL, text, {\n      ...this.props,\n      ranges: undefined,\n    });\n\n    this.props.onTextHighlighted(rangeObj);\n  }\n\n  /**\n   *\n   * @param {*} event\n   */\n  onMouseUp(event) {\n    this.mouseEvent.bind(this)();\n\n  }\n\n  onMouseDown(event) {\n    // console.log(event)\n  }\n\n  onMouseEnter(event) {\n    // console.log(event)\n  }\n\n  /**\n   * Double click on text\n   * @param {*} event\n   */\n  onDoubleClick(event) {\n    // WARN\n    // event.stopPropagation();\n    // this.doucleckicked = true;\n    // this.mouseEvent.bind(this)();\n  }\n\n  /**\n   * @param {object} letterGroup All marked sections of text\n   * @param {object} range Range of marked section\n   * @param {number} textCharIndex The last number of selection\n   * @param {function} onMouseOverHighlightedWord\n   */\n  rangeRenderer(letterGroup, range, textCharIndex, onMouseOverHighlightedWord) {\n    if (this.props.rangeRenderer) {\n      return this.props.rangeRenderer(letterGroup, range, textCharIndex, onMouseOverHighlightedWord);\n    }\n\n    return letterGroup;\n  }\n\n  getNode(i, range, text, url, isEmoji) {\n    if (url.length) {\n      return this.getUrlNode(i, range, url);\n    } else if (isEmoji) {\n      return this.getEmojiNode(i, range);\n    }\n\n    return this.getLetterNode(i, range);\n  }\n\n  getRanges() {\n    /**\n     * Text with nodes\n     */\n    const newText = [];\n\n    let lastRange;\n\n    /**\n     * For all the characters on the text\n     */\n    for (let textCharIndex = 0; textCharIndex < this.props.text.length; textCharIndex++) {\n      /**\n       * Get range text\n       */\n      const range = this.getRange(textCharIndex);\n\n      /**\n       * Check characters for URL\n       */\n      const url = Utils.Checkers.getUrl(textCharIndex, this.props.text);\n\n      /**\n       * Check characters for emoji\n       */\n      const isEmoji = emojiRegex().test(this.props.text[textCharIndex] + this.props.text[textCharIndex + 1]);\n\n      /**\n       * Get the current character node\n       */\n      const node = this.getNode(textCharIndex, range, this.props.text, url, isEmoji);\n\n      /**\n       * If the next node is an url one, we fast forward to the end of it\n       */\n      if (url.length) {\n        textCharIndex += url.length - 1;\n      } else if (isEmoji) {\n        /**\n         * Because an emoji is composed of 2 chars\n         */\n        textCharIndex++;\n      }\n\n      if (!range) {\n        newText.push(node);\n        continue;\n      }\n\n      /**\n       * If the char is in range\n       */\n      lastRange = range;\n\n      // console.log(this.props.text[lastRange.start], this.props.text[lastRange.end])\n\n      /**\n       * We put the first range node on the array\n       */\n      const letterGroup = [node];\n\n      /**\n       * For all the characters in the highlighted range\n       */\n      let rangeCharIndex = textCharIndex + 1;\n\n      // if (rangeCharIndex >= parseInt(range.start) && rangeCharIndex <= parseInt(range.end)) {\n      //   console.log(this.props.text[parseInt(range.end)])\n      // }\n      // console.log(textCharIndex, range.start, range.end)\n\n      for (; rangeCharIndex < parseInt(range.end) + 1; rangeCharIndex++) {\n        /**\n         * Emoji handler\n         */\n        const isEmoji = emojiRegex().test(`${this.props.text[rangeCharIndex]}${this.props.text[rangeCharIndex + 1]}`);\n\n        if (isEmoji) {\n          letterGroup.push(this.getEmojiNode(rangeCharIndex, range));\n          // Because an emoji is composed of 2 chars\n          rangeCharIndex++;\n        } else {\n          letterGroup.push(this.getLetterNode(rangeCharIndex, range));\n        }\n\n        textCharIndex = rangeCharIndex;\n      }\n\n      newText.push(this.rangeRenderer(letterGroup, range, textCharIndex, this.onMouseOverHighlightedWord.bind(this)));\n    }\n\n    if (lastRange) {\n      // Callback function\n      this.onMouseOverHighlightedWord(lastRange, true);\n    }\n\n    return newText;\n  }\n\n  render() {\n    const newText = this.getRanges();\n\n    return (\n      <div\n        className={styles.block}\n        style={this.props.style}\n        onMouseUp={this.onMouseUp.bind(this)}\n        onMouseDown={this.onMouseDown.bind(this)}\n        onMouseEnter={this.onMouseEnter.bind(this)}\n        onDoubleClick={this.onDoubleClick.bind(this)}\n      >\n        {newText}\n      </div>\n    );\n  }\n}\n\nexport default observer(TextHighlight);\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\n\nimport { LabelsModel } from \"../control/Labels\";\nimport { RatingModel } from \"../control/Rating\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { TextModel } from \"./Text\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\nimport Hint from \"../../components/Hint/Hint\";\nimport Utils from \"../../utils\";\n\nimport styles from \"./TextRegion/TextRegion.module.scss\";\n\nconst Model = types\n  .model(\"TextRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"textrange\",\n    start: types.integer,\n    end: types.integer,\n    text: types.string,\n    states: types.maybeNull(types.array(types.union(LabelsModel, RatingModel))),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, TextModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }))\n  .actions(self => ({\n    highlightStates() {},\n\n    /**\n     *\n     */\n    toStateJSON() {\n      const parent = self.parent;\n      const buildTree = obj => {\n        const tree = {\n          id: self.pid,\n          from_name: obj.name,\n          to_name: parent.name,\n          source: parent.value,\n          type: \"region\",\n          // text: parent.text,\n          value: {\n            start: self.start,\n            end: self.end,\n            text: self.text,\n          },\n        };\n\n        if (self.normalization) tree[\"normalization\"] = self.normalization;\n\n        return tree;\n      };\n\n      if (self.states && self.states.length) {\n        return self.states.map(s => {\n          const tree = buildTree(s);\n          // in case of labels it's gonna be, labels: [\"label1\", \"label2\"]\n          tree[\"value\"][s.type] = s.getSelectedNames();\n          tree[\"type\"] = s.type;\n\n          return tree;\n        });\n      } else {\n        return buildTree(parent);\n      }\n    },\n  }));\n\nconst TextRegionModel = types.compose(\n  \"TextRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\n/**\n * Region state hint\n * @param {*} props\n */\nconst RegionState = props => {\n  const localState = props.state;\n\n  /**\n   * Get name of label\n   */\n  const selectedString = localState.getSelectedString();\n  const selectedColor = Utils.Colors.convertToRGBA(localState.getSelectedColor(), 0.3);\n  let style = {\n    background: selectedColor,\n  };\n\n  if (props.style) style = { ...style, outline: props.style.outline };\n\n  return (\n    <Hint className={styles.state} style={style}>\n      <span data-hint={true}>&nbsp;[{selectedString}]</span>\n    </Hint>\n  );\n};\n\nconst HtxTextRegionView = ({ store, item, letterGroup, range, textCharIndex, onMouseOverHighlightedWord }) => {\n  /**\n   * Get color of label\n   */\n  let labelColor = \"rgba(0, 0, 255, 0.1)\";\n\n  if (range.states) {\n    labelColor = range.states.map(s => {\n      return s.getSelectedColor();\n    });\n  }\n\n  /**\n   * TODO\n   * Update function to all formats\n   */\n  if (labelColor.length !== 0) {\n    labelColor = Utils.Colors.convertToRGBA(labelColor[0], 0.3);\n  }\n\n  let markStyle = {\n    padding: \"2px 0px\",\n    position: \"relative\",\n    borderRadius: \"2px\",\n    cursor: store.completionStore.selected.relationMode ? \"crosshair\" : \"pointer\",\n  };\n\n  let regionStates = [];\n\n  if ((range.states && range.states.length) > 0) {\n    range.states.map(state => {\n      regionStates.push(\n        <RegionState\n          key={range.id}\n          state={state}\n          bg={labelColor}\n          hover={store.completionStore.selected.relationMode ? true : false}\n          selected={range.selected}\n          style={range.highlighted ? { outline: \"2px solid red\" } : null}\n        />,\n      );\n    });\n  }\n\n  /**\n   * Without label\n   */\n  if (!regionStates.length) {\n    markStyle = {\n      ...markStyle,\n      background: \"rgba(0, 0, 255, 0.1)\",\n    };\n  }\n\n  return (\n    <span\n      style={markStyle}\n      onClick={range.onClickRegion}\n      onMouseOver={() => {\n        if (store.completionStore.selected.relationMode) {\n          range.setHighlight(true);\n        }\n      }}\n      onMouseOut={() => {\n        if (store.completionStore.selected.relationMode) {\n          range.setHighlight(false);\n        }\n      }}\n    >\n      {letterGroup}\n      {regionStates}\n    </span>\n  );\n};\n\nconst HtxTextRegion = inject(\"store\")(observer(HtxTextRegionView));\n\nRegistry.addTag(\"textrange\", TextRegionModel, HtxTextRegion);\n\nexport { TextRegionModel, HtxTextRegion };\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { types, getType, getRoot } from \"mobx-state-tree\";\n\nimport { cloneNode } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\nimport TextHighlight from \"../../components/TextHighlight/TextHighlight\";\nimport { runTemplate } from \"../../core/Template\";\nimport { TextRegionModel, HtxTextRegion } from \"./TextRegion\";\n\n/**\n * Text tag shows a text that can be labeled\n * @example\n * <Text name=\"text-1\" value=\"$text\"></Text>\n * @name Text\n * @param {string} name of the element\n * @param {string} value of the element\n * @param {boolean} selelectWithoutLabel controls if text can be selected without any labels selected\n */\nconst TagAttrs = types.model(\"TextModel\", {\n  name: types.maybeNull(types.string),\n  // text: types.maybeNull(types.optional(types.string, \"Please set \\\"value\\\" attribute of Text\")),\n  value: types.maybeNull(types.string),\n  selelectwithoutlabel: types.optional(types.string, \"false\"),\n\n  hidden: types.optional(types.enumeration([\"true\", \"false\"]), \"false\"),\n  /**\n   * If we allow selecting parts of words of we select whole word only\n   */\n  adjustselection: types.optional(types.string, \"true\"),\n  selectionenabled: types.optional(types.string, \"true\"),\n});\n\nconst Model = types\n  .model(\"TextModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"text\",\n    regions: types.array(TextRegionModel),\n\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get hasStates() {\n      const states = self.states();\n      return states && states.length > 0;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n\n    activeStates() {\n      const states = self.states();\n      return states\n        ? states.filter(s => s.isSelected && (getType(s).name === \"LabelsModel\" || getType(s).name === \"RatingModel\"))\n        : null;\n    },\n  }))\n  .actions(self => ({\n    remove() {\n      // if (self.generated) {\n      //     const m = Registry.getModelByTag('textarea');\n      //     const ta = getParentOfType(self, m);\n      //     ta.deleteText(self);\n      // }\n    },\n\n    findRegion(start, end) {\n      const immutableRange = self.regions.find(r => r.start === start && r.end === end);\n      return immutableRange;\n    },\n\n    updateValue(store) {\n      self._value = runTemplate(self.value, store.task.dataObj);\n    },\n\n    _addRegion(params) {\n      const r = TextRegionModel.create(params);\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      return r;\n    },\n\n    addRegion(range) {\n      const states = self.activeStates();\n      const clonedStates = states\n        ? states.map(s => {\n            return cloneNode(s);\n          })\n        : null;\n\n      /**\n       * Selelect without label\n       * Default: false\n       */\n      if (self.selelectwithoutlabel === \"false\" && !clonedStates.length) return null;\n\n      const r = self._addRegion({\n        start: range.start,\n        end: range.end,\n        text: range.text,\n        states: clonedStates, // tl.cloneActiveStates()\n      });\n\n      states &&\n        states.forEach(s => {\n          return s.unselectAll();\n        });\n\n      return r;\n    },\n\n    /**\n     * Return JSON\n     */\n    toStateJSON() {\n      const objectsToReturn = self.regions.map(r => r.toStateJSON());\n      return objectsToReturn;\n    },\n\n    /**\n     *\n     * @param {*} obj\n     * @param {*} fromModel\n     */\n    fromStateJSON(obj, fromModel) {\n      let r;\n\n      const tree = {\n        pid: obj.id,\n        start: obj.value.start,\n        end: obj.value.end,\n        text: obj.value.text,\n        normalization: obj.normalization,\n      };\n\n      if (fromModel.type === \"choices\") {\n        self.completion.names.get(obj.from_name).fromStateJSON(obj);\n        return;\n      }\n\n      if (obj.from_name === obj.to_name) {\n        r = self._addRegion(tree);\n      } else {\n        const region = self.findRegion(obj.value.start, obj.value.end);\n        const m = restoreNewsnapshot(fromModel);\n\n        // update state\n        m.fromStateJSON(obj);\n\n        if (!region) {\n          tree.states = [m];\n          r = self._addRegion(tree);\n        } else {\n          region.states.push(m);\n        }\n      }\n\n      return r;\n    },\n  }));\n\nconst TextModel = types.compose(\n  \"TextModel\",\n  TagAttrs,\n  Model,\n);\n\nclass HtxTextView extends Component {\n  renderRegion(letterGroup, range, textCharIndex, onMouseOverHighlightedWord) {\n    return (\n      <HtxTextRegion\n        key={range.id}\n        store={this.props.store}\n        item={this.props.item}\n        letterGroup={letterGroup}\n        range={range}\n        selected={range.selected}\n        textCharIndex={textCharIndex}\n        onMouseOverHighlightedWord={onMouseOverHighlightedWord}\n      />\n    );\n  }\n\n  render() {\n    const self = this;\n\n    const { item } = this.props;\n    const style = {};\n    if (item.hidden === \"true\") style[\"display\"] = \"none\";\n\n    return (\n      <div style={style}>\n        <TextHighlight\n          id={item.id}\n          key={item.id}\n          text={item._value}\n          enabled={item.selectionenabled === \"true\" ? true : false}\n          ranges={item.regions}\n          adjustSelection={item.adjustselection}\n          rangeRenderer={self.renderRegion.bind(this)}\n          onTextHighlighted={range => {\n            item.addRegion(range);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst HtxText = inject(\"store\")(observer(HtxTextView));\n\nRegistry.addTag(\"text\", TextModel, HtxText);\n\nexport { TextModel, HtxText };\n","import React, { Component } from \"react\";\n\nimport { observer, inject } from \"mobx-react\";\nimport { types, getParentOfType } from \"mobx-state-tree\";\nimport { Checkbox, Form } from \"semantic-ui-react\";\n\nimport { ChoicesModel } from \"./Choices\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\n\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\nimport Hint from \"../../components/Hint/Hint\";\n\n/**\n * Choice tag represents a single choice\n * @example\n * <View>\n *   <Choices name=\"gender\" toName=\"txt-1\" choice=\"single\">\n *     <Choice value=\"Male\"></Choice>\n *     <Choice value=\"Female\"></Choice>\n *   </Choices>\n *   <Text name=\"txt-1\" value=\"John went to see Marry\"></Text>\n * </View>\n * @name Choice\n * @param {string} value label value\n * @param {boolean=} selected If this label should be preselected\n * @param {string=} hotkey hokey\n */\nconst TagAttrs = types.model({\n  selected: types.optional(types.boolean, false),\n  alias: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  hotkey: types.maybeNull(types.string),\n  style: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    type: \"choice\",\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get isCheckbox() {\n      const choice = getParentOfType(self, ChoicesModel).choice;\n      return choice === \"multiple\" || choice === \"single\";\n    },\n\n    get name() {\n      return getParentOfType(self, ChoicesModel).name;\n    },\n  }))\n  .actions(self => ({\n    toggleSelected() {\n      const choice = getParentOfType(self, ChoicesModel);\n\n      choice.shouldBeUnselected && choice.unselectAll();\n\n      self.markSelected(!self.selected);\n    },\n\n    markSelected(val) {\n      self.selected = val;\n    },\n\n    onHotKey() {\n      return self.toggleSelected();\n    },\n  }));\n\nconst ChoiceModel = types.compose(\n  \"ChoiceModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxChoice = inject(\"store\")(\n  observer(({ item, store }) => {\n    let style = {};\n\n    if (item.style) style = Tree.cssConverter(item.style);\n\n    if (item.isCheckbox) {\n      const cStyle = Object.assign(\n        { marginRight: \"1em\", marginBottom: \"0.5em\", display: \"flex\", alignItems: \"center\" },\n        style,\n      );\n\n      return (\n        <div style={cStyle}>\n          <Checkbox\n            name={item._value}\n            label={item._value}\n            onChange={ev => {\n              item.toggleSelected();\n            }}\n            checked={item.selected}\n          />\n          {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n        </div>\n      );\n    } else {\n      const label = (\n        <label>\n          {item._value}\n          {store.settings.enableTooltips && store.settings.enableHotkeys && item.hotkey && <Hint>[{item.hotkey}]</Hint>}\n        </label>\n      );\n\n      return (\n        <div style={style}>\n          <Form.Radio\n            label={label}\n            value={item._value}\n            style={{ display: \"inline-block\" }}\n            checked={item.selected}\n            onChange={ev => {\n              item.toggleSelected();\n            }}\n          />\n        </div>\n      );\n    }\n  }),\n);\n\nRegistry.addTag(\"choice\", ChoiceModel, HtxChoice);\n\nexport { HtxChoice, ChoiceModel };\n","import React, { Component } from \"react\";\n\nimport { observer } from \"mobx-react\";\nimport { types, getRoot } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Registry from \"../../core/Registry\";\nimport Tree from \"../../core/Tree\";\nimport Types from \"../../core/Types\";\n\nimport { ChoiceModel } from \"./Choice\";\nimport { HtxLabels, LabelsModel } from \"./Labels\";\nimport { RectangleModel } from \"./Rectangle\";\nimport SelectedModelMixin from \"../mixins/SelectedModel\";\n\nimport { Form } from \"semantic-ui-react\";\n\n/**\n * Choices tag, create a group of choices, radio, or checkboxes. Shall\n * be used for a single or multi-class classification.\n * @example\n * <View>\n *   <Choices name=\"gender\" toName=\"txt-1\" choice=\"single-radio\">\n *     <Choice alias=\"M\" value=\"Male\"></Choice>\n *     <Choice alias=\"F\" value=\"Female\"></Choice>\n *   </Choices>\n *   <Text name=\"txt-1\" value=\"John went to see Marry\"></Text>\n * </View>\n * @name Choices\n * @param {string} name of the group\n * @param {string} toName name of the elements that you want to label\n * @param {single|single-radio|multiple=} [choice=single] single or multi-class\n * @param {boolean} showInline show items in the same visual line\n */\nconst TagAttrs = types.model({\n  name: types.string,\n  toname: types.maybeNull(types.string),\n  showinline: types.optional(types.boolean, false),\n  choice: types.optional(types.enumeration([\"single\", \"single-radio\", \"multiple\"]), \"single\"),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n    type: \"choices\",\n    children: Types.unionArray([\"choice\", \"choices\", \"labels\", \"label\"]),\n  })\n  .views(self => ({\n    get shouldBeUnselected() {\n      return self.choice === \"single\" || self.choice === \"single-radio\";\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    states() {\n      return self.completion.toNames.get(self.name);\n    },\n  }))\n  .actions(self => ({\n    toStateJSON() {\n      const names = self.getSelectedNames();\n\n      if (names && names.length) {\n        const toname = self.toname || self.name;\n        return {\n          id: self.pid,\n          from_name: self.name,\n          to_name: toname,\n          type: self.type,\n          value: {\n            choices: names,\n          },\n        };\n      }\n    },\n\n    fromStateJSON(obj, fromModel) {\n      self.unselectAll();\n\n      if (!obj.value.choices) throw new Error(\"No labels param\");\n\n      if (obj.id) self.pid = obj.id;\n\n      obj.value.choices.forEach(l => {\n        const choice = self.findLabel(l);\n        if (!choice) throw new Error(\"No label \" + l);\n\n        choice.markSelected(true);\n      });\n    },\n  }));\n\nconst Composition = types.compose(\n  LabelsModel,\n  RectangleModel,\n  TagAttrs,\n  Model,\n  SelectedModelMixin,\n);\n\nconst ChoicesModel = types.compose(\n  \"ChoicesModel\",\n  Composition,\n);\n\nconst HtxChoices = observer(({ item }) => {\n  return (\n    <div style={{ marginTop: \"1em\" }}>\n      <Form>\n        {item.showinline ? (\n          <Form.Group inline style={{ flexWrap: \"wrap\" }}>\n            {Tree.renderChildren(item)}\n          </Form.Group>\n        ) : (\n          <Form.Group grouped>{Tree.renderChildren(item)}</Form.Group>\n        )}\n      </Form>\n    </div>\n  );\n});\n\nRegistry.addTag(\"choices\", ChoicesModel, HtxChoices);\n\nexport { HtxChoices, ChoicesModel, TagAttrs };\n","import React, { createRef, Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Message, Icon, Popup, Button, Dropdown, Input } from \"semantic-ui-react\";\n\nimport Types from \"../../core/Types\";\n\nimport Registry from \"../../core/Registry\";\nimport { guidGenerator, restoreNewsnapshot } from \"../../core/Helpers\";\nimport { TextAreaModel } from \"../control/TextArea\";\nimport RegionsMixin from \"../mixins/Regions\";\nimport NormalizationMixin from \"../mixins/Normalization\";\n\nconst Model = types\n  .model(\"TextAreaRegionModel\", {\n    id: types.optional(types.identifier, guidGenerator),\n    pid: types.optional(types.string, guidGenerator),\n\n    type: \"textarearegion\",\n\n    _value: types.string,\n    // states: types.array(types.union(LabelsModel, ChoicesModel)),\n  })\n  .views(self => ({\n    get parent() {\n      return getParentOfType(self, TextAreaModel);\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n  }));\n\nconst TextAreaRegionModel = types.compose(\n  \"TextAreaRegionModel\",\n  RegionsMixin,\n  NormalizationMixin,\n  Model,\n);\n\nconst HtxTextAreaRegionView = ({ store, item }) => {\n  let markStyle = {\n    cursor: store.completionStore.selected.relationMode ? \"crosshair\" : \"pointer\",\n    display: \"block\",\n  };\n\n  if (item.selected) {\n    markStyle = {\n      ...markStyle,\n      border: \"1px solid red\",\n    };\n  } else if (item.highlighted) {\n    markStyle = {\n      ...markStyle,\n      border: \"2px solid red\",\n    };\n  }\n\n  return (\n    <Message\n      className=\"warning\"\n      style={markStyle}\n      onClick={item.onClickRegion}\n      onMouseOver={() => {\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(true);\n        }\n      }}\n      onMouseOut={() => {\n        /* range.setHighlight(false); */\n        if (store.completionStore.selected.relationMode) {\n          item.setHighlight(false);\n        }\n      }}\n    >\n      <p>{item._value}</p>\n    </Message>\n  );\n};\n\nconst HtxTextAreaRegion = inject(\"store\")(observer(HtxTextAreaRegionView));\n\nRegistry.addTag(\"textarearegion\", TextAreaRegionModel, HtxTextAreaRegion);\n\nexport { TextAreaRegionModel, HtxTextAreaRegion };\n","import React, { Component } from \"react\";\n\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, destroy, getEnv, flow, getParentOfType, getRoot } from \"mobx-state-tree\";\nimport { Form, Message } from \"semantic-ui-react\";\n\nimport { renderChildren } from \"../../core/Tree\";\nimport { guidGenerator } from \"../../core/Helpers\";\n\nimport { HtxTextAreaRegion, TextAreaRegionModel } from \"../object/TextAreaRegion\";\n\nimport Registry from \"../../core/Registry\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\n/**\n * TextArea tag shows the textarea for user input\n * @example\n * <View>\n *   <TextArea name=\"ta\"></TextArea>\n * </View>\n * @name TextArea\n * @param {string} name name of the element\n * @param {string} toName name of the element that you want to label if any\n * @param {string} value\n * @param {string=} label label text\n * @param {string=} placeholder placeholder text\n * @param {string=} maxSubmissions maximum number of submissions\n */\nconst TagAttrs = types.model({\n  allowSubmit: types.optional(types.string, \"true\"),\n  label: types.optional(types.string, \"\"),\n  name: types.maybeNull(types.string),\n  toname: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n  placeholder: types.maybeNull(types.string),\n  maxsubmissions: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"textarea\",\n    regions: types.array(TextAreaRegionModel),\n\n    _value: types.optional(types.string, \"\"),\n  })\n  .views(self => ({\n    get submissionsNum() {\n      return self.regions.length;\n    },\n\n    get completion() {\n      return getRoot(self).completionStore.selected;\n    },\n\n    get showSubmit() {\n      if (self.maxsubmissions) {\n        const num = parseInt(self.maxsubmissions);\n        return self.submissionsNum < num;\n      } else {\n        return true;\n      }\n    },\n  }))\n  .actions(self => ({\n    setValue(value) {\n      self._value = value;\n    },\n\n    addText(text, pid) {\n      const r = TextAreaRegionModel.create({\n        pid: pid,\n        _value: text,\n      });\n\n      self.regions.push(r);\n      self.completion.addRegion(r);\n\n      return r;\n    },\n\n    beforeSend() {\n      if (self._value && self._value.length) {\n        self.addText(self._value);\n      }\n    },\n\n    deleteText(text) {\n      destroy(text);\n    },\n\n    toStateJSON() {\n      const toname = self.toname || self.name;\n\n      return [\n        self.regions.map(r => {\n          return {\n            id: r.pid,\n            from_name: self.name,\n            to_name: toname,\n            type: self.type,\n            value: {\n              text: r._value,\n            },\n          };\n        }),\n      ];\n    },\n\n    fromStateJSON(obj, fromModel) {\n      return self.addText(obj.value.text, obj.id);\n    },\n  }));\n\nconst TextAreaModel = types.compose(\n  \"TextAreaModel\",\n  TagAttrs,\n  Model,\n  ProcessAttrsMixin,\n);\n\nconst HtxTextArea = observer(({ item }) => {\n  return (\n    <div>\n      {item.regions.length > 0 && (\n        <div style={{ marginTop: \"1em\", marginBottom: \"1em\" }}>\n          {item.regions.map(t => (\n            <HtxTextAreaRegion item={t} />\n          ))}\n        </div>\n      )}\n\n      {item.showSubmit && (\n        <Form\n          onSubmit={ev => {\n            if (item.allowSubmit === \"true\") {\n              item.addText(item._value);\n              item.setValue(\"\");\n            }\n\n            ev.preventDefault();\n            return false;\n          }}\n        >\n          <Form.Input\n            value={item._value}\n            className=\"is-search\"\n            label={item.label}\n            placeholder={item.placeholder}\n            onChange={ev => {\n              const { value } = ev.target;\n              item.setValue(value);\n            }}\n          />\n        </Form>\n      )}\n    </div>\n  );\n});\n\nRegistry.addTag(\"textarea\", TextAreaModel, HtxTextArea);\n\nexport { TextAreaModel, HtxTextArea };\n","import React from \"react\";\n\nimport Registry from \"../../core/Registry\";\nimport { types } from \"mobx-state-tree\";\nimport { observer, inject } from \"mobx-react\";\nimport { SortableContainer, SortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport arrayMove from \"array-move\";\nimport { List } from \"semantic-ui-react\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { variableNotation } from \"../../core/Template\";\n\nconst ListItemModel = types\n  .model({\n    backgroundColor: types.optional(types.string, \"transparent\"),\n    value: types.maybeNull(types.string),\n    _value: types.maybeNull(types.string),\n    selected: types.optional(types.boolean, false),\n    idx: types.number,\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setBG(val) {\n      self.backgroundColor = val;\n    },\n\n    setIdx(idx) {\n      self.idx = idx;\n    },\n\n    setSelected(val) {\n      self.selected = val;\n    },\n  }));\n\n/**\n * List element, used for ranking results. Great choice for recomendation systems.\n * @example\n * <View>\n *  <HyperText value=\"$markup\"></HyperText>\n *  <List name=\"ranker\" value=\"$replies\" elementValue=\"$text\" elementTag=\"Text\" ranked=\"true\" sortedHighlightColor=\"#fcfff5\"></List>\n * </View>\n * @name List\n * @param {string} elementValue lookup key for child object\n * @param {Text|Image|Audio} elementTag element used to render children\n * @param {string} value list value\n * @param {string} name of group\n * @param {string=} sortedHighlightColor color\n * @param {string=} axis axis used for drag-n-drop\n * @param {string=} lockAxis lock axis\n */\nconst TagAttrs = types.model({\n  axis: types.optional(types.string, \"y\"),\n  lockaxis: types.maybeNull(types.string),\n\n  elementvalue: types.maybeNull(types.string),\n  elementtag: types.optional(types.string, \"Text\"),\n  // ranked: types.optional(types.string, \"true\"),\n  // sortable: types.optional(types.string, \"true\"),\n\n  sortedhighlightcolor: types.maybeNull(types.string),\n\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"list\",\n    update: types.optional(types.number, 1),\n\n    regions: types.array(ListItemModel),\n    // update: types.optional(types.boolean, false)\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setUpdate() {\n      self.update = self.update + 1;\n    },\n\n    addRegion(vals, idx) {\n      const reg = ListItemModel.create({\n        value: self.elementvalue,\n        idx: idx,\n        _value: variableNotation(self.elementvalue, vals[idx]),\n      });\n\n      self.regions.push(reg);\n    },\n\n    updateValue(store) {\n      const val = variableNotation(self.value, store.task.dataObj);\n\n      // in case we're in expert mode it will call updateValue\n      // on each new task loaded, therefore we need to remove\n      // previously loaded regions here\n      self.regions = [];\n      val.forEach((v, idx) => self.addRegion(val, idx));\n\n      val.forEach((v, idx) => {\n        v[\"_orig_idx\"] = idx;\n      });\n\n      self._value = val;\n      self.setUpdate();\n    },\n\n    moveItems({ oldIndex, newIndex }) {\n      if (oldIndex === newIndex) return;\n\n      if (self.sortedhighlightcolor) {\n        self.regions[oldIndex].setBG(self.sortedhighlightcolor);\n      }\n\n      self.regions[oldIndex].setSelected(true);\n\n      if (self._value) self._value = arrayMove(self._value, oldIndex, newIndex);\n\n      self.regions = arrayMove(self.regions, oldIndex, newIndex);\n      self.setUpdate();\n    },\n\n    toStateJSON() {\n      const map = {};\n\n      self._value.forEach((v, idx) => {\n        map[self.regions[idx].idx] = 1 / (1 + idx);\n      });\n\n      const ranked = Object.keys(map)\n        .sort((a, b) => a - b)\n        .map(function(v) {\n          return map[v];\n        });\n\n      const selected = [];\n      for (let i = 0; i < Object.keys(map).length; i++) {\n        selected[self.regions[i].idx] = self.regions[i].selected ? 1 : 0;\n      }\n\n      return {\n        from_name: self.name,\n        to_name: self.name,\n        value: {\n          weights: ranked,\n          selected: selected,\n        },\n      };\n    },\n\n    fromStateJSON(obj, fromModel) {\n      const ranked = [];\n      const regions = [];\n      const item_weight = {};\n\n      obj.value.weights.forEach((v, idx) => {\n        if (item_weight[v]) {\n          item_weight[v].push(idx);\n        } else {\n          item_weight[v] = [idx];\n        }\n      });\n\n      Object.keys(item_weight)\n        .sort((a, b) => b - a)\n        .forEach(v => {\n          const idxes = item_weight[v];\n          idxes.forEach(idx => {\n            regions.push(self.regions[idx]);\n            ranked.push(self._value[idx]);\n          });\n        });\n\n      regions.forEach((r, idx) => r.setIdx(idx));\n\n      self._value = ranked;\n      self.regions = regions;\n\n      // self.regions = ranked;\n      self.setUpdate();\n    },\n  }));\n\nconst ListModel = types.compose(\n  \"ListModel\",\n  TagAttrs,\n  Model,\n);\n\nconst DragHandle = sortableHandle(() => <div className=\"drag-handle\"></div>);\n\nfunction isMobileDevice() {\n  try {\n    return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf(\"IEMobile\") !== -1;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst SortableText = SortableElement(({ item, value }) => {\n  let classNames;\n  if (isMobileDevice) {\n    classNames = \"noselect\";\n  }\n\n  const map = {\n    text: v => <span className={classNames}>{v._value}</span>,\n    image: v => <img src={v._value} alt=\"image\" />,\n    audio: v => <audio src={v._value} />,\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"1em\",\n        userSelect: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        background: value.selected ? item.sortedhighlightcolor : \"transparent\",\n      }}\n      className={classNames}\n      onClick={ev => {\n        if (value.selected) {\n          value.setSelected(false);\n          item.setUpdate();\n        } else {\n          value.setSelected(true);\n          item.setUpdate();\n        }\n        ev.preventDefault();\n        return false;\n      }}\n    >\n      <DragHandle />\n      {map[item.elementtag.toLowerCase()](value)}\n    </div>\n  );\n});\n\nconst SortableList = SortableContainer(({ item, items }) => {\n  return (\n    <List celled>\n      {items.map((value, index) => (\n        <SortableText\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          color={value.backgroundColor}\n          item={item}\n          onClick={ev => {}}\n        />\n      ))}\n    </List>\n  );\n});\n\nconst HtxListView = observer(({ store, item }) => {\n  const props = {};\n  if (isMobileDevice()) {\n    props[\"pressDelay\"] = 100;\n  } else {\n    props[\"distance\"] = 7;\n  }\n\n  return (\n    <div>\n      <SortableList update={item.update} item={item} items={item.regions} onSortEnd={item.moveItems} {...props} />\n    </div>\n  );\n});\n\nconst HtxList = inject(\"store\")(observer(HtxListView));\n\nRegistry.addTag(\"list\", ListModel, HtxList);\n\nexport { ListModel, HtxList };\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Registry from \"../../core/Registry\";\nimport { types, getParentOfType, destroy, getRoot, getParent } from \"mobx-state-tree\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { SortableContainer, SortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport arrayMove from \"array-move\";\nimport { List } from \"semantic-ui-react\";\n\nimport { guidGenerator } from \"../../core/Helpers\";\nimport { runTemplate, variableNotation } from \"../../core/Template\";\nimport ProcessAttrsMixin from \"../mixins/ProcessAttrs\";\n\nconst RankerItemModel = types\n  .model({\n    backgroundColor: types.optional(types.string, \"transparent\"),\n    value: types.maybeNull(types.string),\n    _value: types.maybeNull(types.string),\n    selected: types.optional(types.boolean, false),\n    idx: types.number,\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setBG(val) {\n      self.backgroundColor = val;\n    },\n\n    setIdx(idx) {\n      self.idx = idx;\n    },\n\n    setSelected(val) {\n      self.selected = val;\n    },\n  }));\n\n/**\n * Ranker tag, used to ranking models\n * @example\n * <View>\n *   <Ranker name=\"ranker\" value=\"$items\"></Ranker>\n * </View>\n * @name Ranker\n * @param {string} name of group\n * @param {y|x=} [axis=y] axis direction\n * @param {string} sortedHighlightColor sorted color\n */\nconst TagAttrs = types.model({\n  axis: types.optional(types.string, \"y\"),\n  lockaxis: types.maybeNull(types.string),\n\n  // elementvalue: types.maybeNull(types.string),\n  elementtag: types.optional(types.string, \"Text\"),\n  ranked: types.optional(types.string, \"true\"),\n  sortable: types.optional(types.string, \"true\"),\n\n  sortedhighlightcolor: types.maybeNull(types.string),\n\n  name: types.maybeNull(types.string),\n  value: types.maybeNull(types.string),\n});\n\nconst Model = types\n  .model({\n    id: types.optional(types.identifier, guidGenerator),\n    type: \"ranker\",\n    update: types.optional(types.number, 1),\n\n    regions: types.array(RankerItemModel),\n    // update: types.optional(types.boolean, false)\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    setUpdate() {\n      self.update = self.update + 1;\n    },\n\n    _addRegion(val, idx) {\n      const reg = RankerItemModel.create({\n        value: val,\n        idx: idx,\n        _value: val,\n      });\n\n      self.regions.push(reg);\n    },\n\n    moveItems({ oldIndex, newIndex }) {\n      if (oldIndex == newIndex) return;\n\n      if (self.sortedhighlightcolor) {\n        self.regions[oldIndex].setBG(self.sortedhighlightcolor);\n      }\n\n      self.regions[oldIndex].setSelected(true);\n\n      if (self._value) self._value = arrayMove(self._value, oldIndex, newIndex);\n\n      self.regions = arrayMove(self.regions, oldIndex, newIndex);\n      self.setUpdate();\n    },\n\n    toStateJSON() {\n      return {\n        from_name: self.name,\n        to_name: self.name,\n        value: {\n          // weights: ranked,\n          items: self.regions.map(r => r.value),\n          selected: self.regions.map(r => r.selected),\n        },\n      };\n    },\n\n    fromStateJSON(obj, fromModel) {\n      obj.value.items.forEach((v, idx) => {\n        self._addRegion(v, idx);\n      });\n\n      self.setUpdate();\n    },\n  }));\n\nconst RankerModel = types.compose(\n  \"RankerModel\",\n  TagAttrs,\n  Model,\n);\n\nconst DragHandle = sortableHandle(() => <div className=\"drag-handle\"></div>);\n\nfunction isMobileDevice() {\n  try {\n    return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf(\"IEMobile\") !== -1;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst SortableText = SortableElement(({ item, value }) => {\n  let classNames;\n  if (isMobileDevice) {\n    classNames = \"noselect\";\n  }\n\n  const map = {\n    text: v => <span className={classNames}>{v._value}</span>,\n    image: v => <img src={v._value} />,\n    audio: v => <audio src={v._value} />,\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"1em\",\n        userSelect: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        background: value.selected ? item.sortedhighlightcolor : \"transparent\",\n      }}\n      className={classNames}\n      onClick={ev => {\n        if (value.selected) {\n          value.setSelected(false);\n          item.setUpdate();\n        } else {\n          value.setSelected(true);\n          item.setUpdate();\n        }\n        ev.preventDefault();\n        return false;\n      }}\n    >\n      <DragHandle />\n      {map[item.elementtag.toLowerCase()](value)}\n    </div>\n  );\n});\n\nconst SortableList = SortableContainer(({ item, items }) => {\n  return (\n    <List celled>\n      {items.map((value, index) => (\n        <SortableText\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          color={value.backgroundColor}\n          item={item}\n          onClick={ev => {}}\n        />\n      ))}\n    </List>\n  );\n});\n\nconst HtxRankerView = observer(({ store, item }) => {\n  const props = {};\n  if (isMobileDevice()) {\n    props[\"pressDelay\"] = 100;\n  } else {\n    props[\"distance\"] = 7;\n  }\n\n  return (\n    <div>\n      <SortableList update={item.update} item={item} items={item.regions} onSortEnd={item.moveItems} {...props} />\n    </div>\n  );\n});\n\nconst HtxRanker = inject(\"store\")(observer(HtxRankerView));\n\nRegistry.addTag(\"ranker\", RankerModel, HtxRanker);\n\nexport { RankerModel, HtxRanker };\n","/**\n * Libraries\n */\nimport React, { Component } from \"react\";\nimport parse5 from \"parse5\";\nimport { observer, inject, Provider } from \"mobx-react\";\nimport { types, getSnapshot } from \"mobx-state-tree\";\nimport { Result, Spin } from \"antd\";\n\n/**\n * Core\n */\nimport Registry from \"../../core/Registry\";\nimport Requests from \"../../core/Requests\";\nimport { guidGenerator } from \"../../core/Helpers\";\nimport Tree from \"../../core/Tree\";\n\n/**\n * Components\n */\nimport Completions from \"../Completions/Completions\";\nimport Predictions from \"../Predictions/Predictions\";\nimport Controls from \"../Controls/Controls\";\nimport Panel from \"../Panel/Panel\";\nimport Settings from \"../Settings/Settings\";\nimport Debug from \"../Debug\";\nimport SideColumn from \"../SideColumn/SideColumn\";\nimport Segment from \"../Segment/Segment\";\n\n/**\n * Visual\n */\nimport { ViewModel } from \"../../interfaces/visual/View\";\nimport { TableModel } from \"../../interfaces/visual/Table\";\nimport { HeaderModel } from \"../../interfaces/visual/Header\";\nimport { HyperTextModel } from \"../../interfaces/visual/HyperText\";\nimport { DialogModel } from \"../../interfaces/visual/Dialog\";\n\n/**\n * Object\n */\nimport { AudioModel } from \"../../interfaces/object/Audio\";\nimport { AudioPlusModel } from \"../../interfaces/object/AudioPlus\";\nimport { ImageModel } from \"../../interfaces/object/Image\";\nimport { TextModel } from \"../../interfaces/object/Text\";\n\n/**\n * Control\n */\nimport { RectangleModel } from \"../../interfaces/control/Rectangle\";\nimport { PolygonModel } from \"../../interfaces/control/Polygon\";\nimport { RectangleLabelsModel } from \"../../interfaces/control/RectangleLabels\";\nimport { PolygonLabelsModel } from \"../../interfaces/control/PolygonLabels\";\nimport { ChoicesModel } from \"../../interfaces/control/Choices\";\nimport { TextAreaModel } from \"../../interfaces/control/TextArea\";\nimport { RatingModel } from \"../../interfaces/control/Rating\";\nimport { ListModel } from \"../../interfaces/control/List\";\nimport { RankerModel } from \"../../interfaces/control/Ranker\";\n\n/**\n * Styles\n */\nimport styles from \"./App.module.scss\";\n\n/**\n * App\n */\nconst App = inject(\"store\")(\n  observer(\n    class App extends Component {\n      renderSuccess() {\n        return <Result status=\"success\" title=\"Done!\" />;\n      }\n\n      renderNoCompletion() {\n        return <Result status=\"success\" title=\"No more completions\" />;\n      }\n\n      renderNothingToLabel() {\n        return <Result status=\"success\" title=\"No more data available for labeling\" />;\n      }\n\n      renderLoader() {\n        return <Result icon={<Spin size=\"large\" />} />;\n      }\n\n      render() {\n        const self = this;\n        const { store } = self.props;\n        let root;\n\n        if (store.completionStore.currentCompletion) {\n          root = store.completionStore.currentCompletion.root;\n        } else if (store.completionStore.currentPrediction) {\n          root = store.completionStore.currentPrediction.root;\n        }\n\n        if (store.isLoading) return self.renderLoader();\n\n        if (store.noTask) return self.renderNothingToLabel();\n\n        if (store.labeledSuccess) return self.renderSuccess();\n\n        if (!store.completionStore.currentCompletion && !store.completionStore.currentPrediction) {\n          return self.renderNoCompletion();\n        }\n\n        return (\n          <div className={styles.editor}>\n            <Settings store={store} />\n            <Provider store={store}>\n              <div>\n                {store.hasInterface(\"panel\") && <Panel store={store} />}\n\n                {store.showingDescription && (\n                  <Segment>\n                    <div dangerouslySetInnerHTML={{ __html: store.description }} />\n                  </Segment>\n                )}\n\n                <div className={styles.common}>\n                  <Segment>\n                    {Tree.renderItem(root)}\n                    {store.hasInterface(\"controls\") && <Controls />}\n                  </Segment>\n\n                  <div className={styles.menu}>\n                    {store.hasInterface(\"completions:menu\") && <Completions store={store} />}\n\n                    {store.hasInterface(\"predictions:menu\") && <Predictions store={store} />}\n\n                    {store.hasInterface(\"side-column\") && <SideColumn store={store} />}\n                  </div>\n                </div>\n              </div>\n            </Provider>\n            {store.hasInterface(\"debug\") && <Debug store={store} />}\n          </div>\n        );\n      }\n    },\n  ),\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types, getParent } from \"mobx-state-tree\";\n\nimport Utilities from \"../utils\";\n\n/**\n * Task Store\n */\nconst TaskStore = types\n  .model(\"Task\", {\n    /**\n     * Id of task\n     */\n    id: types.identifierNumber,\n    /**\n     * Data of task, may contain an object but in App Store will be transformed into string\n     * MST doesn't support processing of dynamic objects with unkown keys value\n     */\n    data: types.maybeNull(types.string),\n    // data: types.maybeNull(TaskData),\n    /**\n     * Id of project\n     */\n    project: types.maybeNull(types.number),\n  })\n  .views(self => ({\n    get app() {\n      return getParent(self);\n    },\n\n    /**\n     * Return JSON with task data\n     * @returns {object}\n     */\n    get dataObj() {\n      if (Utilities.Checkers.isStringJSON(self.data)) {\n        return JSON.parse(self.data);\n      } else if (typeof self.data === \"object\") {\n        return self.data;\n      } else {\n        return null;\n      }\n    },\n  }));\n\nexport default TaskStore;\n","import { types } from \"mobx-state-tree\";\n\n/**\n * User store of Label Studio\n */\nconst UserStore = types.model(\"UserStore\", {\n  /**\n   * Personal key of user\n   */\n  pk: types.integer,\n  /**\n   * Name of user\n   */\n  firstName: types.string,\n  /**\n   * Last name of user\n   */\n  lastName: types.string,\n});\n\nexport default UserStore;\n","import keymaster from \"keymaster\";\n\nlet _hotkeys_map = {};\n\n/**\n * Add key\n * @param {*} key\n * @param {*} func\n */\nfunction addKey(key, func) {\n  if (_hotkeys_map[key]) return;\n\n  _hotkeys_map[key] = true;\n  keymaster(key, \"main\", func);\n}\n\n/**\n * Unbund all hotkeys\n */\nfunction unbindAll() {\n  for (let key of Object.keys(_hotkeys_map)) keymaster.unbind(key);\n\n  _hotkeys_map = {};\n}\n\n/**\n * Set scope of hotkeys\n * @param {*} scope\n */\nfunction setScope(scope) {\n  keymaster.setScope(scope);\n}\n\n/**\n * Create combination\n */\nfunction makeComb() {\n  let prefix = null;\n  let st = \"1234567890qwertasdfgzxcvbyuiophjklnm\";\n  let combs = st.split(\"\");\n\n  for (var i = 0; i <= combs.length; i++) {\n    let comb;\n    if (prefix) comb = prefix + \"+\" + combs[i];\n    else comb = combs[i];\n\n    if (!_hotkeys_map.hasOwnProperty(comb)) return comb;\n  }\n\n  return null;\n}\n\nexport default { addKey, unbindAll, makeComb, setScope };\n","import { types } from \"mobx-state-tree\";\n\nimport Hotkey from \"../core/Hotkey\";\n\n/**\n * Setting store of Label Studio\n */\nconst SettingsModel = types\n  .model(\"SettingsModel\", {\n    /**\n     * Hotkey\n     */\n    enableHotkeys: types.optional(types.boolean, true),\n    /**\n     * Hotkey panel\n     */\n    enablePanelHotkeys: types.optional(types.boolean, true),\n    /**\n     * Tooltips preview\n     */\n    enableTooltips: types.optional(types.boolean, true),\n  })\n  .actions(self => ({\n    toggleHotkeys() {\n      self.enableHotkeys = !self.enableHotkeys;\n      if (self.enableHotkeys) {\n        Hotkey.setScope(\"main\");\n      } else {\n        Hotkey.setScope(\"none\");\n      }\n    },\n\n    /**\n     * Function to off/on panel of hotkeys\n     */\n    togglePanelHotkeys() {\n      self.enablePanelHotkeys = !self.enablePanelHotkeys;\n    },\n\n    /**\n     * Function to off/on tooltips\n     */\n    toggleTooltips() {\n      self.enableTooltips = !self.enableTooltips;\n    },\n  }));\n\nexport default SettingsModel;\n","import { types, resolvePath, getEnv, onSnapshot, getSnapshot, applySnapshot } from \"mobx-state-tree\";\nimport { IObservableArray } from \"mobx\";\n\nconst TimeTraveller = types\n  .model(\"TimeTraveller\", {\n    history: types.array(types.frozen()),\n    undoIdx: -1,\n    targetPath: \"\",\n\n    createdIdx: 1,\n\n    isFrozen: types.optional(types.boolean, false),\n    frozenIdx: -1,\n  })\n  .views(self => ({\n    get canUndo() {\n      // [TODO] since we initialize state a bit incorrectly we end up with 2 items in history\n      // before even any action takes place. To protect those items we keep them in history forever\n      return self.undoIdx > 1;\n    },\n    get canRedo() {\n      return self.undoIdx < self.history.length - 1;\n    },\n  }))\n  .actions(self => {\n    let targetStore;\n    let snapshotDisposer;\n    let skipNextUndoState = false;\n\n    return {\n      freeze() {\n        self.isFrozen = true;\n        skipNextUndoState = true;\n        self.frozenIdx = self.undoIdx;\n      },\n\n      addUndoState(ss) {\n        if (skipNextUndoState) {\n          // skip recording if this state was caused by undo / redo\n          skipNextUndoState = false;\n          return;\n        }\n        self.history.splice(self.undoIdx + 1);\n        self.history.push(ss);\n        self.undoIdx = self.history.length - 1;\n      },\n      afterCreate() {\n        targetStore = self.targetPath ? resolvePath(self, self.targetPath) : getEnv(self).targetStore;\n\n        if (!targetStore)\n          throw new Error(\n            \"Failed to find target store for TimeTraveller. Please provide `targetPath`  property, or a `targetStore` in the environment\",\n          );\n        // TODO: check if targetStore doesn't contain self\n        // if (contains(targetStore, self)) throw new Error(\"TimeTraveller shouldn't be recording itself. Please specify a sibling as taret, not some parent\")\n        // start listening to changes\n        snapshotDisposer = onSnapshot(targetStore, snapshot => this.addUndoState(snapshot));\n        // record an initial state if no known\n        if (self.history.length === 0) {\n          this.addUndoState(getSnapshot(targetStore));\n        }\n\n        self.createdIdx = self.undoIdx;\n      },\n      beforeDestroy() {\n        snapshotDisposer();\n      },\n      undo() {\n        if (self.isFrozen && self.frozenIdx <= self.undoIdx) return;\n\n        self.undoIdx--;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n      redo() {\n        self.undoIdx++;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n      set(idx) {\n        self.undoIdx = idx;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n      reset() {\n        self.undoIdx = 1;\n        skipNextUndoState = true;\n        applySnapshot(targetStore, self.history[self.undoIdx]);\n      },\n    };\n  });\n\nexport default TimeTraveller;\n","import { types, getParent, getEnv, flow, destroy, getMembers } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport { TextRegionModel } from \"../interfaces/object/TextRegion\";\nimport { RectRegionModel } from \"../interfaces/object/RectRegion\";\nimport { AudioRegionModel } from \"../interfaces/object/AudioRegion\";\nimport { TextAreaRegionModel } from \"../interfaces/object/TextAreaRegion\";\nimport { PolygonRegionModel } from \"../interfaces/object/PolygonRegion\";\n\nconst Relation = types\n  .model(\"Relation\", {\n    node1: types.reference(\n      types.union(TextRegionModel, RectRegionModel, AudioRegionModel, TextAreaRegionModel, PolygonRegionModel),\n    ),\n    node2: types.reference(\n      types.union(TextRegionModel, RectRegionModel, AudioRegionModel, TextAreaRegionModel, PolygonRegionModel),\n    ),\n  })\n  .actions(self => ({\n    toggleHighlight() {\n      if (self.node1 == self.node2) {\n        self.node1.toggleHightlight();\n      } else {\n        self.node1.toggleHightlight();\n        self.node2.toggleHightlight();\n      }\n    },\n  }));\n\nexport default types\n  .model(\"RelationStore\", {\n    relations: types.array(Relation),\n  })\n  .actions(self => ({\n    findRelations(node1, node2) {\n      if (!node2) {\n        return self.relations.filter(rl => {\n          return rl.node1.id == node1.id || rl.node2.id == node1.id;\n        });\n      }\n\n      return self.relations.filter(rl => {\n        return rl.node1.id == node1.id && rl.node2.id == node2.id;\n      });\n    },\n\n    nodesRelated(node1, node2) {\n      return self.findRelations(node1, node2).length > 0;\n    },\n\n    addRelation(node1, node2) {\n      if (self.nodesRelated(node1, node2)) return;\n\n      const rl = Relation.create({\n        node1: node1,\n        node2: node2,\n      });\n\n      // self.relations.unshift(rl);\n      self.relations.push(rl);\n\n      return rl;\n    },\n\n    deleteRelation(rl) {\n      destroy(rl);\n    },\n\n    deleteNodeRelation(node) {\n      // lookup $node and delete it's relation\n      const rl = self.findRelations(node);\n      rl.length && rl.forEach(self.deleteRelation);\n    },\n\n    serializeCompletion() {\n      return self.relations.map(r => {\n        return {\n          from_id: r.node1.pid,\n          to_id: r.node2.pid,\n          type: \"relation\",\n        };\n      });\n    },\n\n    deserializeRelation(node1, node2) {\n      self.addRelation(node1, node2);\n    },\n  }));\n","import { types, getParent, getEnv, flow, destroy, getMembers } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport { TextRegionModel } from \"../interfaces/object/TextRegion\";\nimport { RectRegionModel } from \"../interfaces/object/RectRegion\";\nimport { AudioRegionModel } from \"../interfaces/object/AudioRegion\";\n\nconst Normalization = types\n  .model(\"Normalization\", {\n    node1: types.union(\n      types.reference(TextRegionModel),\n      types.reference(RectRegionModel),\n      types.reference(AudioRegionModel),\n    ),\n    node2: types.union(\n      types.reference(TextRegionModel),\n      types.reference(RectRegionModel),\n      types.reference(AudioRegionModel),\n    ),\n  })\n  .actions(self => ({\n    toggleHighlight() {\n      if (self.node1 == self.node2) {\n        self.node1.toggleHightlight();\n      } else {\n        self.node1.toggleHightlight();\n        self.node2.toggleHightlight();\n      }\n    },\n  }));\n\nexport default types\n  .model(\"NormalizationStore\", {\n    normalizations: types.array(Normalization),\n  })\n  .actions(self => ({\n    findNormalization(node1, node2) {\n      if (!node2) {\n        return self.normalizations.find(rl => {\n          return rl.node1.id == node1.id || rl.node2.id == node1.id;\n        });\n      }\n\n      return self.normalizations.find(rl => {\n        return rl.node1.id == node1.id && rl.node2.id == node2.id;\n      });\n    },\n\n    addNormalization(node1, node2) {\n      if (self.findNormalization(node1, node2)) return;\n\n      const rl = Normalization.create({\n        node1: node1,\n        node2: node2,\n      });\n\n      self.normalizations.unshift(rl);\n\n      return rl;\n    },\n\n    deleteNormalization(rl) {\n      destroy(rl);\n    },\n\n    deleteNodeNormalization(node) {\n      // lookup $node and delete it's normalization\n      const rl = self.findNormalization(node);\n\n      if (rl) self.deleteNormalization(rl);\n    },\n  }));\n","import { types, getParent } from \"mobx-state-tree\";\n\nimport { TextRegionModel } from \"../interfaces/object/TextRegion\";\nimport { RectRegionModel } from \"../interfaces/object/RectRegion\";\nimport { PolygonRegionModel } from \"../interfaces/object/PolygonRegion\";\nimport { AudioRegionModel } from \"../interfaces/object/AudioRegion\";\nimport { TextAreaRegionModel } from \"../interfaces/object/TextAreaRegion\";\n\nexport default types\n  .model(\"RegionStore\", {\n    regions: types.array(\n      types.safeReference(\n        types.union(TextRegionModel, RectRegionModel, PolygonRegionModel, AudioRegionModel, TextAreaRegionModel),\n      ),\n    ),\n  })\n  .actions(self => ({\n    addRegion(region) {\n      self.regions.push(region);\n    },\n\n    findRegion(pid) {\n      return self.regions.find(r => r.pid === pid);\n    },\n\n    /**\n     * Delete region\n     * @param {obj} region\n     */\n    deleteRegion(region) {\n      const arr = self.regions;\n\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === region) {\n          arr.splice(i, 1);\n        }\n      }\n    },\n\n    unselectAll() {\n      self.regions.forEach(r => r.unselectRegion());\n      getParent(self).setHighlightedNode(null);\n    },\n\n    unhighlightAll() {\n      self.regions.forEach(r => r.setHighlight(false));\n    },\n  }));\n","import { types, getParent, getEnv, flow, destroy } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport Registry from \"../core/Registry\";\nimport Tree from \"../core/Tree\";\nimport TimeTraveller from \"../core/TimeTraveller\";\nimport Hotkey from \"../core/Hotkey\";\n\nimport RelationStore from \"./RelationStore\";\nimport NormalizationStore from \"./NormalizationStore\";\nimport RegionStore from \"./RegionStore\";\nimport { RectangleModel } from \"../interfaces/control/Rectangle\";\nimport Utils from \"../utils\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nconst Completion = types\n  .model(\"Completion\", {\n    id: types.identifier,\n    pk: types.optional(types.string, guidGenerator(5)),\n    selected: types.optional(types.boolean, false),\n\n    createdDate: types.optional(types.string, Utils.UDate.currentISODate()),\n    createdAgo: types.maybeNull(types.string),\n    createdBy: types.optional(types.string, \"Admin\"),\n\n    userGenerate: types.optional(types.boolean, true),\n    update: types.optional(types.boolean, false),\n    sentUserGenerate: types.optional(types.boolean, false),\n\n    honeypot: types.optional(types.boolean, false),\n\n    root: Types.allModelsTypes(),\n    names: types.map(types.reference(Types.allModelsTypes())),\n    toNames: types.map(types.array(types.reference(Types.allModelsTypes()))),\n\n    history: types.optional(TimeTraveller, { targetPath: \"../root\" }),\n\n    dragMode: types.optional(types.boolean, false),\n\n    relationMode: types.optional(types.boolean, false),\n    relationStore: types.optional(RelationStore, {\n      relations: [],\n    }),\n\n    normalizationMode: types.optional(types.boolean, false),\n    normalizationStore: types.optional(NormalizationStore, {\n      normalizations: [],\n    }),\n\n    regionStore: types.optional(RegionStore, {\n      regions: [],\n    }),\n\n    highlightedNode: types.maybeNull(\n      types.union(\n        types.safeReference(HtxObjectModel.TextRegionModel),\n        types.safeReference(HtxObjectModel.RectRegionModel),\n        types.safeReference(HtxObjectModel.AudioRegionModel),\n        types.safeReference(HtxObjectModel.TextAreaRegionModel),\n        types.safeReference(HtxObjectModel.PolygonRegionModel),\n        types.safeReference(RectangleModel),\n      ),\n    ),\n  })\n  .views(self => ({\n    get store() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    reinitHistory() {\n      self.history = { targetPath: \"../root\" };\n    },\n    /**\n     * Send update to serve\n     * @param {*} state\n     */\n    _updateServerState(state) {\n      let appStore = getParent(self, 3);\n      let url = \"/api/tasks/\" + appStore.task.id + \"/completions/\" + self.pk + \"/\";\n\n      getEnv(self).patch(url, JSON.stringify(state));\n    },\n\n    setHoneypot() {\n      self.honeypot = true;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    sendUserGenerate() {\n      self.sentUserGenerate = true;\n    },\n\n    setDragMode(val) {\n      self.dragMode = val;\n    },\n\n    updatePersonalKey(value) {\n      self.pk = value;\n    },\n\n    setNormalizationMode(val) {\n      self.normalizationMode = val;\n    },\n\n    setHighlightedNode(node) {\n      self.highlightedNode = node;\n    },\n\n    startRelationMode(node1) {\n      self._relationObj = node1;\n      self.relationMode = true;\n    },\n\n    stopRelationMode() {\n      self._relationObj = null;\n      self.relationMode = false;\n\n      self.regionStore.unhighlightAll();\n    },\n\n    deleteAllRegions() {\n      self.regionStore.regions.forEach(r => r.deleteRegion());\n    },\n\n    addRegion(reg) {\n      self.regionStore.unselectAll();\n      self.regionStore.addRegion(reg);\n\n      if (self.relationMode) {\n        self.addRelation(reg);\n        self.stopRelationMode();\n      }\n    },\n\n    /**\n     * Add relation\n     * @param {*} reg\n     */\n    addRelation(reg) {\n      self.relationStore.addRelation(self._relationObj, reg);\n    },\n\n    addNormalization(normalization) {\n      self.normalizationStore.addNormalization();\n    },\n\n    /**\n     * Remove honeypot\n     */\n    removeHoneypot() {\n      self.honeypot = false;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    traverseTree(cb) {\n      let visitNode;\n\n      visitNode = function(node) {\n        cb(node);\n\n        if (node.children) {\n          node.children.forEach(chld => visitNode(chld));\n        }\n      };\n\n      visitNode(self.root);\n    },\n\n    /**\n     *\n     */\n    beforeSend() {\n      self.traverseTree(node => {\n        if (node && node.beforeSend) {\n          node.beforeSend();\n        }\n      });\n\n      self.stopRelationMode();\n      self.regionStore.unselectAll();\n    },\n\n    /**\n     * Delete region\n     * @param {*} region\n     */\n    deleteRegion(region) {\n      destroy(region);\n    },\n\n    afterCreate() {\n      self.traverseTree(node => {\n        // create mapping from name to Model (by ref)\n        if (node && node.name && node.id) self.names.set(node.name, node.id);\n\n        if (node && node.toname && node.id) {\n          const val = self.toNames.get(node.toname);\n          if (val) {\n            val.push(node.id);\n          } else {\n            self.toNames.set(node.toname, [node.id]);\n          }\n        }\n      });\n\n      Hotkey.unbindAll();\n\n      // [TODO] we need to traverse this two times, fix\n      self.traverseTree(node => {\n        if (node && node.onHotKey && node.hotkey) Hotkey.addKey(node.hotkey, node.onHotKey);\n      });\n\n      self.traverseTree(node => {\n        if (node && node.onHotKey && !node.hotkey) {\n          const comb = Hotkey.makeComb();\n\n          if (!comb) return;\n\n          node.hotkey = comb;\n          Hotkey.addKey(node.hotkey, node.onHotKey);\n        }\n      });\n\n      Hotkey.setScope(\"main\");\n    },\n\n    serializeCompletion() {\n      const arr = [];\n\n      self.traverseTree(node => {\n        if (node.toStateJSON) {\n          const val = node.toStateJSON();\n\n          if (val) arr.push(val);\n        }\n      });\n\n      const relations = self.relationStore.serializeCompletion();\n      if (relations) arr.push(relations);\n\n      const flatten = arr => {\n        return arr.reduce(function(flat, toFlatten) {\n          return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n        }, []);\n      };\n\n      return flatten(arr);\n    },\n\n    /**\n     * Deserialize completion of models\n     */\n    deserializeCompletion(json) {\n      let objCompletion = json;\n\n      if (typeof objCompletion !== \"object\") {\n        objCompletion = JSON.parse(objCompletion);\n      }\n\n      objCompletion.forEach(obj => {\n        if (obj[\"type\"] !== \"relation\") {\n          const names = obj.to_name.split(\",\");\n          names.forEach(name => {\n            const toModel = self.names.get(name);\n            if (!toModel) throw new Error(\"No model found for \" + obj.to_name);\n\n            const fromModel = self.names.get(obj.from_name);\n            if (!fromModel) throw new Error(\"No model found for \" + obj.from_name);\n\n            toModel.fromStateJSON(obj, fromModel);\n          });\n        } else {\n          self.relationStore.deserializeRelation(\n            self.regionStore.findRegion(obj.from_id),\n            self.regionStore.findRegion(obj.to_id),\n          );\n        }\n      });\n    },\n  }));\n\nexport default types\n  .model(\"CompletionStore\", {\n    completions: types.array(Completion),\n    selected: types.maybeNull(types.reference(Completion)),\n    predictions: types.array(Completion),\n    predictSelect: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    /**\n     * Get current completion\n     */\n    get currentCompletion() {\n      return self.selected && self.completions.find(c => c.id === self.selected.id);\n    },\n\n    get currentPrediction() {\n      return self.selected && self.predictions.find(c => c.id === self.selected.id);\n    },\n\n    /**\n     * Get parent\n     */\n    get store() {\n      return getParent(self);\n    },\n\n    /**\n     * Get only those that were saved\n     */\n    get savedCompletions() {\n      return self.completions.filter(c => c);\n    },\n  }))\n  .actions(self => {\n    function selectedPredict() {\n      self.predictSelect = true;\n    }\n\n    function unSelectedPredict() {\n      self.predictSelect = false;\n    }\n\n    /**\n     * Select completion\n     * @param {*} id\n     */\n    function selectCompletion(id) {\n      self.completions.map(c => (c.selected = false));\n      if (self.predictions) self.predictions.map(c => (c.selected = false));\n      const c = self.completions.find(c => c.id === id);\n      unSelectedPredict();\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    function selectPrediction(id) {\n      self.predictions.map(c => (c.selected = false));\n      self.completions.map(c => (c.selected = false));\n      const c = self.predictions.find(c => c.id === id);\n      selectedPredict();\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    /**\n     * Adding new completion\n     * @param {object} node\n     * @param {string} type\n     */\n    function addCompletion(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdCompletion = Completion.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && type === \"initial\") {\n        createdCompletion.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.completions.unshift(createdCompletion);\n\n      return createdCompletion;\n    }\n\n    function addPredictionItem(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdPrediction = Completion.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && type === \"initial\") {\n        createdPrediction.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.predictions.unshift(createdPrediction);\n\n      return createdPrediction;\n    }\n\n    /**\n     * Send request to server for delete completion\n     */\n    const _deleteCompletion = flow(function* _deleteCompletion(pk) {\n      try {\n        const json = yield getEnv(self).remove(\"/api/tasks/\" + self.store.task.id + \"/completions/\" + pk + \"/\");\n      } catch (err) {\n        console.error(\"Failed to skip task \", err);\n      }\n    });\n\n    /**\n     * Destroy completion\n     * @param {*} completion\n     */\n    function destroyCompletion(completion) {\n      /**\n       * MST destroy completion\n       */\n      destroy(completion);\n\n      self.selected = null;\n      /**\n       * Select other completion\n       */\n      if (self.completions.length > 0) {\n        self.selectCompletion(self.completions[0].id);\n      }\n    }\n\n    function deleteCompletion(completion) {\n      _deleteCompletion(completion.pk);\n      destroyCompletion(completion);\n    }\n\n    /**\n     *\n     * @param {*} c\n     */\n    function addSavedCompletion(c) {\n      const completionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      let root = modelClass.create(completionModel);\n\n      const node = {\n        id: c.id || guidGenerator(5),\n        pk: c.id,\n        createdAgo: c.created_ago,\n        createdBy: c.created_username,\n        honeypot: c.honeypot,\n        root: root,\n        userGenerate: false,\n      };\n\n      const completion = self.addCompletion(node, \"list\");\n\n      return completion;\n    }\n\n    function addPrediction(prediction) {\n      const predictionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(predictionModel.type);\n\n      let root = modelClass.create(predictionModel);\n\n      const node = {\n        id: prediction.id || guidGenerator(),\n        pk: prediction.id,\n        createdAgo: prediction.created_ago,\n        createdBy: prediction.model_version,\n        root: root,\n      };\n\n      const returnPredict = self.addPredictionItem(node, \"list\");\n\n      return returnPredict;\n    }\n\n    /**\n     * Initial Completion\n     * @returns {object}\n     */\n    function addInitialCompletion() {\n      /**\n       * Convert config to model\n       */\n      const completionModel = Tree.treeToModel(self.store.config);\n\n      /**\n       * Get model by type of tag\n       */\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      /**\n       * Completion model init\n       */\n      let root = modelClass.create(completionModel);\n\n      const node = {\n        id: guidGenerator(5),\n        root: root,\n      };\n\n      /**\n       * Expert module for initial completion\n       */\n      if (self.store.expert) {\n        const { expert } = self.store;\n\n        node[\"createdBy\"] = `${expert.firstName} ${expert.lastName}`;\n      }\n\n      /**\n       *\n       */\n      const completion = self.addCompletion(node, \"initial\");\n\n      return completion;\n    }\n\n    function addUserCompletion() {\n      /**\n       * Convert config to model\n       */\n      const completionModel = Tree.treeToModel(self.store.config);\n\n      /**\n       * Get model by type of tag\n       */\n      const modelClass = Registry.getModelByTag(completionModel.type);\n\n      /**\n       * Completion model init\n       */\n      let root = modelClass.create(completionModel);\n\n      const node = {\n        id: guidGenerator(5),\n        root: root,\n        userGenerate: true,\n      };\n\n      /**\n       * Expert module for initial completion\n       */\n      if (self.store.expert) {\n        const { expert } = self.store;\n\n        node[\"createdBy\"] = `${expert.firstName} ${expert.lastName}`;\n      }\n\n      /**\n       *\n       */\n      const completion = self.addCompletion(node, \"initial\");\n\n      self.selectCompletion(node.id);\n\n      return completion;\n    }\n\n    return {\n      selectCompletion,\n      selectPrediction,\n      addCompletion,\n      deleteCompletion,\n      destroyCompletion,\n      addInitialCompletion,\n      addSavedCompletion,\n      addUserCompletion,\n      addPrediction,\n      addPredictionItem,\n    };\n  });\n","import { types, getParent, getEnv, flow, destroy } from \"mobx-state-tree\";\n\nimport { guidGenerator } from \"../core/Helpers\";\nimport Types from \"../core/Types\";\n\nimport Registry from \"../core/Registry\";\nimport Tree from \"../core/Tree\";\nimport TimeTraveller from \"../core/TimeTraveller\";\n\nimport RelationStore from \"./RelationStore\";\nimport NormalizationStore from \"./NormalizationStore\";\nimport RegionStore from \"./RegionStore\";\nimport { RectangleModel } from \"../interfaces/control/Rectangle\";\n\nimport * as HtxObjectModel from \"../interfaces/object\";\n\nconst Prediction = types\n  .model(\"Prediction\", {\n    id: types.identifier,\n    selected: types.optional(types.boolean, false),\n\n    createdDate: types.optional(types.string, new Date().toISOString()),\n    createdAgo: types.maybeNull(types.string),\n    model: types.optional(types.string, \"Model\"),\n\n    root: Types.allModelsTypes(),\n    names: types.map(types.reference(Types.allModelsTypes())),\n    toNames: types.map(types.array(types.reference(Types.allModelsTypes()))),\n\n    history: types.optional(TimeTraveller, { targetPath: \"../root\" }),\n\n    dragMode: types.optional(types.boolean, false),\n\n    relationMode: types.optional(types.boolean, false),\n    relationStore: types.optional(RelationStore, {\n      relations: [],\n    }),\n\n    normalizationMode: types.optional(types.boolean, false),\n    normalizationStore: types.optional(NormalizationStore, {\n      normalizations: [],\n    }),\n\n    regionStore: types.optional(RegionStore, {\n      regions: [],\n    }),\n\n    highlightedNode: types.maybeNull(\n      types.union(\n        types.safeReference(HtxObjectModel.TextRegionModel),\n        types.safeReference(HtxObjectModel.RectRegionModel),\n        types.safeReference(HtxObjectModel.AudioRegionModel),\n        types.safeReference(HtxObjectModel.TextAreaRegionModel),\n        types.safeReference(HtxObjectModel.PolygonRegionModel),\n        types.safeReference(RectangleModel),\n      ),\n    ),\n  })\n  .views(self => ({\n    get store() {\n      return getParent(self, 2);\n    },\n  }))\n  .actions(self => ({\n    reinitHistory() {\n      self.history = { targetPath: \"../root\" };\n    },\n\n    setDragMode(val) {\n      self.dragMode = val;\n    },\n\n    setNormalizationMode(val) {\n      self.normalizationMode = val;\n    },\n\n    setHighlightedNode(node) {\n      self.highlightedNode = node;\n    },\n\n    startRelationMode(node1) {\n      self._relationObj = node1;\n      self.relationMode = true;\n    },\n\n    stopRelationMode() {\n      self._relationObj = null;\n      self.relationMode = false;\n\n      self.regionStore.unhighlightAll();\n    },\n\n    unselectPrediction() {\n      self.selected = false;\n    },\n\n    addRegion(reg) {\n      self.regionStore.unselectAll();\n      self.regionStore.addRegion(reg);\n\n      if (self.relationMode) {\n        self.addRelation(reg);\n        self.stopRelationMode();\n      }\n    },\n\n    /**\n     * Add relation\n     * @param {*} reg\n     */\n    addRelation(reg) {\n      self.relationStore.addRelation(self._relationObj, reg);\n    },\n\n    addNormalization(normalization) {\n      self.normalizationStore.addNormalization();\n    },\n\n    /**\n     * Remove honeypot\n     */\n    removeHoneypot() {\n      self.honeypot = false;\n      self._updateServerState({ honeypot: self.honeypot });\n    },\n\n    traverseTree(cb) {\n      let visitNode;\n\n      visitNode = function(node) {\n        cb(node);\n\n        if (node.children) {\n          node.children.forEach(chld => visitNode(chld));\n        }\n      };\n\n      visitNode(self.root);\n    },\n\n    /**\n     *\n     */\n    beforeSend() {\n      self.traverseTree(node => {\n        if (node && node.beforeSend) {\n          node.beforeSend();\n        }\n      });\n\n      self.stopRelationMode();\n      self.regionStore.unselectAll();\n    },\n\n    /**\n     * Delete region\n     * @param {*} region\n     */\n    deleteRegion(region) {\n      destroy(region);\n    },\n\n    /**\n     * Deserialize predictions of models\n     */\n    deserializePrediction(json) {\n      json.forEach(obj => {\n        if (obj[\"type\"] !== \"relation\") {\n          const names = obj.to_name.split(\",\");\n          names.forEach(name => {\n            const toModel = self.store.store.completionStore.selected.names.get(name);\n            if (!toModel) throw new Error(\"No model found for \" + obj.to_name);\n\n            const fromModel = self.store.store.completionStore.selected.names.get(obj.from_name);\n            if (!fromModel) throw new Error(\"No model found for \" + obj.from_name);\n\n            toModel.fromStateJSON(obj, fromModel);\n          });\n        } else {\n          self.relationStore.deserializeRelation(\n            self.regionStore.findRegion(obj.from_id),\n            self.regionStore.findRegion(obj.to_id),\n          );\n        }\n      });\n    },\n  }));\n\nexport default types\n  .model(\"PredictionStore\", {\n    predictions: types.array(Prediction),\n    selected: types.maybeNull(types.reference(Prediction)),\n  })\n  .views(self => ({\n    /**\n     * Get current completion\n     */\n    get currentPrediction() {\n      return self.selected && self.predictions.find(c => c.id === self.selected.id);\n    },\n\n    /**\n     * Get parent\n     */\n    get store() {\n      return getParent(self);\n    },\n\n    /**\n     * Get only those that were saved\n     */\n    get savedPredictions() {\n      return self.predictions.filter(c => c);\n    },\n  }))\n  .actions(self => {\n    /**\n     *\n     * @param {*} id\n     */\n    function selectPrediction(id) {\n      self.store.completionStore.selected && self.store.completionStore.selected.unselectCompletion();\n\n      self.predictions.map(c => (c.selected = false));\n      const c = self.predictions.find(c => c.id === id);\n\n      // if (self.selected && self.selected.id !== c.id) c.history.reset();\n\n      c.selected = true;\n      self.selected = c;\n    }\n\n    /**\n     * Adding new completion\n     * @param {object} node\n     * @param {string} type\n     */\n    function addPredictionItem(node, type) {\n      /**\n       * Create Completion\n       */\n      const createdPrediction = Prediction.create(node);\n\n      /**\n       * If completion is initial completion\n       */\n      if (self.store.task && type === \"initial\") {\n        createdPrediction.traverseTree(node => node.updateValue && node.updateValue(self.store));\n      }\n\n      self.predictions.push(createdPrediction);\n\n      return createdPrediction;\n    }\n\n    /**\n     * Initial Completion\n     * @returns {object}\n     */\n    function addInitialPrediction() {\n      /**\n       * Convert config to model\n       */\n      const predictionModel = Tree.treeToModel(self.store.config);\n\n      /**\n       * Get model by type of tag\n       */\n      const modelClass = Registry.getModelByTag(predictionModel.type);\n\n      /**\n       * Completion model init\n       */\n      let root = modelClass.create(predictionModel);\n\n      const node = {\n        id: guidGenerator(),\n        root: root,\n      };\n\n      /**\n       *\n       */\n      const prediction = self.addPrediction(node, \"initial\");\n\n      return prediction;\n    }\n\n    /**\n     *\n     * @param {*} c\n     */\n    function addPrediction(c) {\n      const predictionModel = Tree.treeToModel(self.store.config);\n      const modelClass = Registry.getModelByTag(predictionModel.type);\n\n      let root = modelClass.create(predictionModel);\n\n      const node = {\n        pk: c.id,\n        id: c.id || guidGenerator(),\n        createdAgo: c.created_ago,\n        model: c.model_version,\n        root: root,\n      };\n\n      const prediction = self.addPredictionItem(node, \"list\");\n\n      console.log(prediction);\n\n      return prediction;\n    }\n\n    function destroyPrediction(prediction) {\n      destroy(prediction);\n\n      self.selected = null;\n      if (self.predictions.length > 0) self.selectPrediction(self.predictions[0].id);\n    }\n\n    return {\n      selectPrediction,\n      addPredictionItem,\n      addPrediction,\n      addInitialPrediction,\n      destroyPrediction,\n    };\n  });\n","export const API_URL = {\n  MAIN: \"/api\",\n  TASKS: \"/tasks\",\n  COMPLETIONS: \"/completions\",\n  CANCEL: \"/cancel\",\n  PROJECTS: \"/projects\",\n  NEXT: \"/next\",\n  EXPERT_INSRUCTIONS: \"/expert_instruction\",\n};\n","import { types, getEnv, flow, getSnapshot } from \"mobx-state-tree\";\n\nimport Task from \"./TaskStore\";\nimport User from \"./UserStore\";\nimport Settings from \"./SettingsStore\";\nimport CompletionStore from \"./CompletionStore\";\nimport PredictionStore from \"./PredictionStore\";\nimport Hotkey from \"../core/Hotkey\";\nimport { API_URL } from \"../constants/Api\";\nimport Utils from \"../utils\";\n\nexport default types\n  .model(\"AppStore\", {\n    /**\n     *\n     */\n    config: types.string,\n\n    /**\n     * Task with data, id and project\n     */\n    task: types.maybeNull(Task),\n    /**\n     * ID of task\n     */\n    taskID: types.maybeNull(types.number),\n\n    /**\n     * Interfaces for configure Label Studio\n     */\n    interfaces: types.array(types.string),\n    /**\n     * Flag fo labeling of tasks\n     */\n    explore: types.optional(types.boolean, false),\n\n    /**\n     * Completions Store\n     */\n    completionStore: types.optional(CompletionStore, {\n      completions: [],\n      predictions: [],\n    }),\n\n    /**\n     * Predictions Store\n     */\n    // predictionStore: types.optional(PredictionStore, {\n    //   predictions: [],\n    // }),\n\n    /**\n     * Project ID from platform\n     */\n    projectID: types.integer,\n\n    /**\n     * Expert of Label Studio\n     */\n    expert: User,\n\n    /**\n     * Debug for development environment\n     */\n    debug: types.optional(types.boolean, true),\n\n    /**\n     * Settings of Label Studio\n     */\n    settings: types.optional(Settings, {}),\n\n    /**\n     * Flag for settings\n     */\n    showingSettings: types.optional(types.boolean, false),\n    /**\n     * Flag\n     * Description of task in Label Studio\n     */\n    showingDescription: types.optional(types.boolean, false),\n    /**\n     * Data of description flag\n     */\n    description: types.maybeNull(types.string),\n    /**\n     * Loading of Label Studio\n     */\n    isLoading: types.optional(types.boolean, false),\n    /**\n     * Flag for disable task in Label Studio\n     */\n    noTask: types.optional(types.boolean, false),\n    /**\n     * Finish of labeling\n     */\n    labeledSuccess: types.optional(types.boolean, false),\n  })\n  .views(self => ({\n    /**\n     * Get fetch request\n     */\n    get fetch() {\n      return getEnv(self).fetch;\n    },\n    /**\n     * Get alert\n     */\n    get alert() {\n      return getEnv(self).alert;\n    },\n    /**\n     * Get pot request\n     */\n    get post() {\n      return getEnv(self).post;\n    },\n  }))\n  .actions(self => {\n    /**\n     * Update description of task\n     * @param {string} text\n     */\n    function setDescription(text) {\n      self.description = text;\n    }\n\n    /**\n     * Update settings display state\n     */\n    function toggleSettings() {\n      self.showingSettings = !self.showingSettings;\n    }\n\n    /**\n     * Request to get description of this task\n     */\n    const openDescription = flow(function* openDescription() {\n      let url = `${API_URL.MAIN}${API_URL.PROJECTS}/${self.projectID}${API_URL.EXPERT_INSRUCTIONS}`;\n\n      const res = yield self.fetch(url);\n\n      if (res.status === 200) {\n        res.text().then(function(text) {\n          if (text.length) {\n            self.setDescription(text);\n          } else {\n            /**\n             * Default message if description is missing in Platform\n             */\n            self.setDescription(\"No instructions for this task.\");\n          }\n        });\n      } else {\n        self.setDescription(\"No instructions for this task.\");\n      }\n\n      /**\n       * Show description\n       */\n      self.showingDescription = true;\n    });\n\n    /**\n     * Close description of Label Studio\n     */\n    function closeDescription() {\n      self.showingDescription = false;\n    }\n\n    function markLoading(loading) {\n      self.isLoading = loading;\n    }\n\n    /**\n     * Check for interfaces\n     * @param {string} name\n     * @returns {string | undefined}\n     */\n    function hasInterface(name) {\n      return self.interfaces.find(i => name === i);\n    }\n\n    /**\n     * Function\n     */\n    const afterCreate = function() {\n      self.loadTask();\n\n      /**\n       * Hotkey for submit\n       */\n      Hotkey.addKey(\"ctrl+enter\", self.sendTask);\n\n      /**\n       * Hotkey for skip task\n       */\n      if (self.hasInterface(\"skip\")) Hotkey.addKey(\"ctrl+space\", self.skipTask);\n\n      /**\n       * Hotkey for update completion\n       */\n      if (self.hasInterface(\"update\")) Hotkey.addKey(\"alt+enter\", self.updateTask);\n\n      /**\n       * Hotkey for delete\n       */\n      Hotkey.addKey(\"ctrl+backspace\", function() {\n        const { selected } = self.completionStore;\n        selected.deleteAllRegions();\n      });\n\n      Hotkey.addKey(\"ctrl+z\", function() {\n        const { history } = self.completionStore.selected;\n        history && history.canUndo && history.undo();\n      });\n\n      Hotkey.addKey(\"escape\", function() {\n        const c = self.completionStore.selected;\n        if (c && c.relationMode) {\n          c.stopRelationMode();\n        }\n      });\n\n      Hotkey.addKey(\"backspace\", function() {\n        const c = self.completionStore.selected;\n        if (c && c.highlightedNode) {\n          c.highlightedNode.deleteRegion();\n        }\n      });\n    };\n\n    /**\n     * Load task from API\n     */\n    function loadTask() {\n      if (self.taskID) {\n        return loadTaskAPI(`${API_URL.MAIN}${API_URL.TASKS}/${self.taskID}/`);\n      } else if (self.explore && self.projectID) {\n        return loadTaskAPI(`${API_URL.MAIN}${API_URL.PROJECTS}/${self.projectID}${API_URL.NEXT}`);\n      }\n    }\n\n    /**\n     *\n     * @param {*} taskObject\n     */\n    function addTask(taskObject) {\n      if (taskObject && !Utils.Checkers.isString(taskObject.data)) {\n        taskObject = {\n          ...taskObject,\n          [taskObject.data]: JSON.stringify(taskObject.data),\n        };\n      }\n      self.task = Task.create(taskObject);\n    }\n\n    /**\n     * Reset completion store\n     */\n    function resetState() {\n      self.completionStore = CompletionStore.create({ completions: [] });\n      const c = self.completionStore.addInitialCompletion();\n\n      self.completionStore.selectCompletion(c.id);\n    }\n\n    /**\n     * Load task from API\n     */\n    const loadTaskAPI = flow(function*(url) {\n      try {\n        const res = yield self.fetch(url);\n\n        if (res instanceof Response && res.status === 404) {\n          self.markLoading(false);\n          self.noTask = true;\n          return;\n        }\n\n        res.json().then(function(r) {\n          r.data = JSON.stringify(r.data);\n\n          self.addTask(r);\n          self.markLoading(false);\n\n          if (self.hasInterface(\"completions\") && r.completions) {\n            self.completionStore.destroyCompletion(self.completionStore.selected);\n\n            for (var i = 0; i < r.completions.length; i++) {\n              const c = r.completions[i];\n\n              if (c.was_cancelled === true) continue;\n\n              const comp = self.completionStore.addSavedCompletion(c);\n              comp.traverseTree(node => node.updateValue && node.updateValue(self));\n              self.completionStore.selectCompletion(comp.id);\n              comp.deserializeCompletion(c.result);\n              comp.reinitHistory();\n            }\n          } else {\n            if (self.completionStore.selected)\n              self.completionStore.selected.traverseTree(node => node.updateValue && node.updateValue(self));\n\n            // self.addGeneratedCompletion(r);\n          }\n\n          if (self.hasInterface(\"predictions\") && r.predictions) {\n            if (r.predictions && r.predictions.length) {\n              for (let i = 0; i < r.predictions.length; i++) {\n                const pred = self.completionStore.addPrediction(r.predictions[i]);\n                pred.traverseTree(node => node.updateValue && node.updateValue(self));\n                self.completionStore.selectPrediction(pred.id);\n                pred.deserializeCompletion(r.predictions[i].result);\n                pred.reinitHistory();\n              }\n            }\n          }\n        });\n      } catch (err) {\n        console.error(\"Failed to load next task \", err);\n      }\n    });\n\n    /**\n     * Skip current task\n     */\n    const skipTask = flow(function* skipTask() {\n      self.markLoading(true);\n\n      try {\n        const json = yield self.post(\n          `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.CANCEL}`,\n          JSON.stringify({ data: JSON.stringify({ error: \"cancelled\" }) }),\n        );\n\n        self.resetState();\n\n        return loadTask();\n      } catch (err) {\n        console.error(\"Failed to skip task \", err);\n      }\n    });\n\n    /**\n     * Wrapper of completion send\n     * @param {string} requestType {patch or post}\n     */\n    const sendToServer = requestType => {\n      return flow(function*() {\n        const c = self.completionStore.selected;\n\n        c.beforeSend();\n\n        const res = c.serializeCompletion();\n\n        if (self.hasInterface(\"check-empty\") && res.length === 0) {\n          alert(\"You need to label at least something!\");\n          return;\n        }\n\n        self.markLoading(true);\n\n        try {\n          const state = getSnapshot(c);\n\n          const body = JSON.stringify({\n            state: JSON.stringify(state),\n            result: res,\n          });\n\n          if (requestType === \"patch\") {\n            yield getEnv(self).patch(\n              `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.COMPLETIONS}/${c.pk}/`,\n              body,\n            );\n          } else if (requestType === \"post\") {\n            const responseCompletion = yield self.post(\n              `${API_URL.MAIN}${API_URL.TASKS}/${self.task.id}${API_URL.COMPLETIONS}/`,\n              body,\n            );\n\n            const data = yield responseCompletion.json();\n            if (data && data.id) {\n              self.completionStore.selected.updatePersonalKey(data.id.toString());\n            }\n          }\n\n          if (hasInterface(\"load\")) {\n            self.resetState();\n            return loadTask();\n          } else {\n            self.markLoading(false);\n            self.completionStore.selected.sendUserGenerate();\n\n            if (self.explore && self.projectID) {\n              self.labeledSuccess = true;\n            }\n          }\n\n          // delete state.history;\n        } catch (err) {\n          console.error(\"Failed to send task \", err);\n        }\n      });\n    };\n\n    /**\n     * Update current completion\n     */\n    const updateTask = sendToServer(\"patch\");\n\n    /**\n     * Send current completion\n     */\n    const sendTask = sendToServer(\"post\");\n\n    /**\n     * Function to initilaze completion store\n     */\n    function initializeStore({ completions, predictions }) {\n      /**\n       * Array of generated completions\n       */\n      let generatedCompletions = [];\n\n      if (predictions && predictions.length) {\n        for (let i = 0; i < predictions.length; i++) {\n          const pred = self.completionStore.addPrediction(predictions[i]);\n          pred.traverseTree(node => node.updateValue && node.updateValue(self));\n          self.completionStore.selectPrediction(pred.id);\n\n          pred.deserializeCompletion(predictions[i].result);\n          pred.reinitHistory();\n        }\n      }\n\n      /**\n       * Completions in initialize\n       */\n      if (completions && completions.length) {\n        for (let i = 0; i < completions.length; i++) {\n          const itemOfCompletion = completions[i];\n\n          /**\n           * If user skip task, we skip completion state\n           */\n          if (itemOfCompletion.was_cancelled === true) continue;\n\n          /**\n           * Add to array new completion\n           */\n          generatedCompletions.push(itemOfCompletion);\n        }\n      }\n\n      if (!completions || completions.length === 0) {\n        const c = self.completionStore.addInitialCompletion();\n        self.completionStore.selectCompletion(c.id);\n\n        if (generatedCompletions.length > 0) {\n          self.completionStore.destroyCompletion(self.completionStore.selected);\n\n          for (let iC = 0; iC < generatedCompletions.length; iC++) {\n            const comp = self.completionStore.addSavedCompletion(generatedCompletions[iC]);\n            comp.traverseTree(node => node.updateValue && node.updateValue(self));\n            self.completionStore.selectCompletion(comp.id);\n\n            comp.deserializeCompletion(generatedCompletions[iC].result);\n            comp.reinitHistory();\n          }\n        }\n      } else {\n        for (let iC = 0; iC < generatedCompletions.length; iC++) {\n          const comp = self.completionStore.addSavedCompletion(generatedCompletions[iC]);\n          comp.traverseTree(node => node.updateValue && node.updateValue(self));\n          self.completionStore.selectCompletion(comp.id);\n\n          comp.deserializeCompletion(generatedCompletions[iC].result);\n          comp.reinitHistory();\n        }\n      }\n    }\n\n    return {\n      afterCreate,\n      loadTask,\n      addTask,\n      hasInterface,\n      skipTask,\n      sendTask,\n      updateTask,\n      markLoading,\n      resetState,\n      openDescription,\n      closeDescription,\n      setDescription,\n      toggleSettings,\n      initializeStore,\n    };\n  });\n","function getData() {\n  /**\n   * TODO\n   * Remove, this is here because MST either takes string or a fully features typed tree\n   */\n  if (window.taskData && window.taskData.data) {\n    window.taskData.data = JSON.stringify(window.taskData.data);\n  }\n\n  const data = {\n    /**\n     * Project ID\n     */\n    projectID: window.projectID,\n    /**\n     * Loading of LS\n     */\n    isLoading: false,\n    /**\n     * Config in XML format\n     */\n    config: window.editorAppConfig,\n    /**\n     * Task ID\n     */\n    taskID: window.taskID,\n    /**\n     * Task data\n     */\n    task: window.taskData,\n    /**\n     * Expert\n     */\n    expert: window.expertData,\n    /**\n     * Debug mode of LS\n     */\n    debug: window.debugEditor,\n    /**\n     * Interfaces of LS\n     */\n    interfaces: window.editorInterfaces ? window.editorInterfaces : [\"basic\", \"completions\"],\n    /**\n     * Flag for display completions of task\n     */\n    explore: window.explore,\n  };\n\n  /**\n   * This is here to make project_render_editor to work because it expects static config\n   */\n  if (window.preRender) {\n    data[\"task\"] = window.taskData;\n  }\n\n  /**\n   * window.explore used for display completions\n   */\n  if (window.explore) {\n    data[\"interfaces\"] = window.editorInterfaces ? window.editorInterfaces : [\"completions\"];\n  } else {\n    data[\"interfaces\"] = window.editorInterfaces ? window.editorInterfaces : [\"submit\", \"skip\"];\n  }\n\n  return data;\n}\n\n/**\n * LS will render in this part\n * TODO: Change #root to #L\n */\nfunction rootElement() {\n  const el = document.createElement(\"div\");\n\n  let root = document.getElementById(\"label-studio\");\n\n  root.innerHTML = \"\";\n  root.appendChild(el);\n\n  return el;\n}\n\n/**\n * Get current state of LS\n */\nfunction getState() {\n  const completions = window.taskData && window.taskData.completions ? window.taskData.completions : null;\n  const predictions = window.taskData && window.taskData.predictions ? window.taskData.predictions : null;\n\n  return {\n    completions: completions,\n    predictions: predictions,\n  };\n}\n\nexport default { getData, getState, rootElement };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const Sentiment = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const AudioClassifiaction = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const AudioRegions = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const ChatbotAnalysis = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const ImageBbox = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const NamedEntity = { config, tasks, completion };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const References = { config, tasks, completion };\n","import { Sentiment } from \"../examples/sentiment_analysis\";\nimport { AudioClassification } from \"../examples/audio_classification\";\nimport { AudioRegions } from \"../examples/audio_regions\";\nimport { ChatbotAnalysis } from \"../examples/chatbot_analysis\";\nimport { ImageBbox } from \"../examples/image_bbox\";\nimport { NamedEntity } from \"../examples/named_entity\";\nimport { References } from \"../examples/references\";\nimport { TranscribeAudio } from \"../examples/transcribe_audio\";\n\n/**\n * Choose data type\n */\nlet dataType = Sentiment;\n\nfunction templateDynamicData() {\n  let settings = {\n    /**\n     * For development environment\n     */\n    developmentEnv: true,\n    /**\n     * Project ID\n     */\n    projectID: 1,\n    /**\n     * Flag to display completion\n     */\n    viewCompletion: true,\n    /**\n     * Loading of LS\n     */\n    isLoading: false,\n    /**\n     * Expert\n     */\n    expert: {\n      pk: 1,\n      lastName: \"Jones\",\n      firstName: \"Oliver\",\n    },\n    /**\n     * Debug\n     */\n    debug: window.location.search.indexOf(\"debug=true\") !== -1,\n    interfaces: window.editorInterfaces\n      ? window.editorInterfaces\n      : [\n          \"controls\",\n          \"predictions\",\n          \"completions\",\n          \"completions:menu\",\n          \"predictions:menu\",\n          \"panel\",\n          \"side-column\",\n          \"update\",\n          \"check-empty\",\n        ],\n    task: {\n      data: JSON.stringify(dataType.tasks[0]),\n      project: 10,\n      id: 100,\n      completions: [],\n      predictions: [],\n    },\n  };\n\n  if (settings.viewCompletion && dataType.completion) {\n    settings = {\n      ...settings,\n      task: {\n        ...settings.task,\n        completions: dataType.completion.completions,\n        predictions: dataType.completion.predictions,\n      },\n    };\n  }\n\n  let reqXML = () =>\n    fetch(dataType.config)\n      .then(resp => resp.text())\n      .then(r => {\n        settings = {\n          ...settings,\n          config: r,\n        };\n\n        return settings;\n      });\n\n  return reqXML();\n}\n\nfunction getData() {\n  return templateDynamicData();\n}\n\n/**\n * Get completions for task\n */\nasync function getState() {\n  const resp = await getData();\n  /**\n   * Completions\n   */\n  const resultCompletions = resp.task.completions ? resp.task.completions : null;\n  /**\n   * Predictions for Platform\n   */\n  const resultPredictions = resp.task.predictions ? resp.task.predictions : null;\n\n  return {\n    completions: resultCompletions,\n    predictions: resultPredictions,\n  };\n}\n\n/**\n * Function to return Root element\n */\nfunction rootElement() {\n  const el = document.createElement(\"div\");\n\n  let root = document.getElementById(\"label-studio\");\n\n  root.innerHTML = \"\";\n  root.appendChild(el);\n\n  root.style.margin = \"0 auto\";\n\n  return el;\n}\n\nexport default { getState, getData, rootElement };\n","import config from \"./config.xml\";\nimport tasks from \"./tasks.json\";\nimport completion from \"./completions/0.json\";\n\nexport const TranscribeAudio = { config, tasks, completion };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./assets/styles/global.scss\";\n\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport AppStore from \"./stores/AppStore\";\nimport Requests from \"./core/Requests\";\n\nimport ProductionEnviroment from \"./env/production\";\nimport DevelopmentEnvironment from \"./env/development\";\n\nlet enviroment = DevelopmentEnvironment;\n\nif (process.env.NODE_ENV === \"production\") {\n  enviroment = ProductionEnviroment;\n\n  const app = AppStore.create(enviroment.getData(), {\n    fetch: Requests.fetcher,\n    patch: Requests.patch,\n    post: Requests.poster,\n    remove: Requests.remover,\n    alert: m => console.log(m), // Noop for demo: window.alert(m)\n  });\n\n  /**\n   * Initialize store\n   */\n  app.initializeStore(enviroment.getState());\n\n  window.Htx = app;\n\n  ReactDOM.render(\n    <Provider store={app}>\n      <App />\n    </Provider>,\n    enviroment.rootElement(),\n  );\n} else {\n  enviroment = DevelopmentEnvironment;\n\n  enviroment.getData().then(resp => {\n    const app = AppStore.create(resp, {\n      fetch: Requests.fetcher,\n      patch: Requests.patch,\n      post: Requests.poster,\n      remove: Requests.remover,\n      alert: m => console.log(m), // Noop for demo: window.alert(m)\n    });\n\n    /**\n     * Initialize store\n     */\n    enviroment.getState().then(state => {\n      app.initializeStore(state);\n    });\n\n    window.Htx = app;\n\n    ReactDOM.render(\n      <Provider store={app}>\n        <App />\n      </Provider>,\n      enviroment.rootElement(),\n    );\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Completions_buttons__B9TrK\",\"completion\":\"Completions_completion__26NZY\",\"completion_selected\":\"Completions_completion_selected__13jUy\",\"title\":\"Completions_title__1OvCP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Entity_block__1GYOj\",\"button\":\"Entity_button__10C5l\",\"labels\":\"Entity_labels__1guw7\",\"tag\":\"Entity_tag__3k4gL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"skip\":\"Controls_skip__2Ctl4\",\"task\":\"Controls_task__31zQE\",\"container\":\"Controls_container__3UKts\",\"block\":\"Controls_block__VkWho\",\"wrapper\":\"Controls_wrapper__2Fo3G\",\"rewrite\":\"Controls_rewrite__1SYdl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Dialog_block__2GhAG\",\"block_selected\":\"Dialog_block_selected__3yoaT\",\"name\":\"Dialog_name__3I97q\",\"tag\":\"Dialog_tag__6I3U4\",\"date\":\"Dialog_date__2EmTp\"};"],"sourceRoot":""}